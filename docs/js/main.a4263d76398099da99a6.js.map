{"version":3,"file":"js/main.a4263d76398099da99a6.js","mappings":"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","sources":["webpack://image-lint-web/./web/components/app.vue","webpack://image-lint-web/../image-lint/lib/work-handler.js","webpack://image-lint-web/../image-lint/lib/hasher.js","webpack://image-lint-web/../image-lint/lib/pixel-format.js","webpack://image-lint-web/../image-lint/lib/logger.js","webpack://image-lint-web/../image-lint/lib/ident.js","webpack://image-lint-web/../image-lint/lib/ident/magic-number-ident.js","webpack://image-lint-web/../image-lint/lib/image-info.js","webpack://image-lint-web/../image-lint/lib/image/png-info.js","webpack://image-lint-web/../image-lint/lib/ident/png-ident.js","webpack://image-lint-web/../image-lint/lib/image/gif-info.js","webpack://image-lint-web/../image-lint/lib/ident/gif-ident.js","webpack://image-lint-web/../image-lint/lib/image/jpg-info.js","webpack://image-lint-web/../image-lint/lib/ident/jpg-ident.js","webpack://image-lint-web/../image-lint/lib/image/jxl/bit-stream.js","webpack://image-lint-web/../image-lint/lib/image/jxl/size-header.js","webpack://image-lint-web/../image-lint/lib/image/jxl/color-encoding.js","webpack://image-lint-web/../image-lint/lib/image/jxl/image-metadata.js","webpack://image-lint-web/../image-lint/lib/image/jxl-info.js","webpack://image-lint-web/../image-lint/lib/ident/jxl-ident.js","webpack://image-lint-web/../image-lint/lib/image/isobmff/isobmff.js","webpack://image-lint-web/../image-lint/lib/image/avif-info.js","webpack://image-lint-web/../image-lint/lib/ident/avif-ident.js","webpack://image-lint-web/../image-lint/lib/ident/bmp-ident.js","webpack://image-lint-web/../image-lint/lib/ident/psd-ident.js","webpack://image-lint-web/../image-lint/lib/ident/ico-ident.js","webpack://image-lint-web/../image-lint/lib/ident/tiff-ident.js","webpack://image-lint-web/../image-lint/lib/ident/riff-ident.js","webpack://image-lint-web/../image-lint/lib/ident/webp-ident.js","webpack://image-lint-web/../image-lint/lib/ident/xml-ident.js","webpack://image-lint-web/../image-lint/lib/ident/svg-ident.js","webpack://image-lint-web/../image-lint/lib/ident/html-ident.js","webpack://image-lint-web/../image-lint/lib/linter.js","webpack://image-lint-web/../image-lint/lib/defaults.js","webpack://image-lint-web/../image-lint/lib/loader/blob.js","webpack://image-lint-web/../image-lint/lib/loader.js","webpack://image-lint-web/./web/components/app.vue?dffa","webpack://image-lint-web/./web/components/iml-image-collection.vue","webpack://image-lint-web/../image-lint/lib/finder/buffer.js","webpack://image-lint-web/../image-lint/lib/finder.js","webpack://image-lint-web/./web/components/iml-image-collection.vue?c335","webpack://image-lint-web/./web/components/iml-dropzone.vue","webpack://image-lint-web/./web/components/iml-dropzone.vue?a135","webpack://image-lint-web/./web/js/index.js"],"sourcesContent":["<script>\nimport GithubButton from 'vue-github-button';\nimport {defaults} from 'image-lint';\n\nimport packageJson from '../../../image-lint/package.json';\n\nimport 'vue-multiselect/dist/vue-multiselect.css';\n\nexport default {\n\t'components': {\n\t\tGithubButton,\n\t},\n\tdata() {\n\t\tconst options = Object.assign({}, defaults);\n\n\t\toptions.color_space = options.color_space.split(',');\n\n\t\treturn {\n\t\t\t'name': packageJson.name,\n\t\t\t'version': packageJson.version,\n\t\t\t'description': packageJson.description,\n\t\t\t'support': {},\n\t\t\t'available': {\n\t\t\t\t'color_space': ['G', 'RGB', 'CMYK', 'YCbCr', 'YCCK', 'LAB', 'HSV'],\n\t\t\t},\n\t\t\t'option': options,\n\t\t\t'files': [],\n\t\t};\n\t},\n\t'methods': {\n\t\t'clear': function() {\n\t\t\tthis.files.length = 0;\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<div>\n\t\t<header class=\"lint-header\">\n\t\t\t<h1 class=\"lint-title\">\n\t\t\t\t{{ name }}\n\t\t\t</h1>\n\t\t\t<span class=\"lint-version\">v{{ version }}</span>\n\t\t\t<h2 class=\"lint-subtitle\">\n\t\t\t\t{{ description }}\n\t\t\t</h2>\n\n\t\t\t<github-button\n\t\t\t\tclass=\"github-button\"\n\t\t\t\thref=\"https://github.com/aaronasachimp/image-lint\"\n\t\t\t\tdata-size=\"large\"\n\t\t\t\tdata-show-count=\"true\"\n\t\t\t\taria-label=\"Star aaronasachimp/image-lint on GitHub\"\n\t\t\t>\n\t\t\t\tStar\n\t\t\t</github-button>\n\t\t</header>\n\t\t<form class=\"image-lint-app\">\n\t\t\t<div class=\"pane pane-options\">\n\t\t\t\t<h3 class=\"lint-options-title\">\n\t\t\t\t\tOptions\n\t\t\t\t</h3>\n\n\t\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t\t<input v-model=\"option.mismatch\" type=\"checkbox\">\n\t\t\t\t\tFind mismatches between file type and file extension.\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t\t<input v-model=\"option.duplicate\" type=\"checkbox\">\n\t\t\t\t\tFind files that have been copied.\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\t\tSet the maximum bytes per pixel before giving a warning.\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"option.bytes_per_pixel\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tstep=\"0.1\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t>\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\t\tSet the minimum byte savings before giving a warning.\n\t\t\t\t\t<input v-model=\"option.byte_savings\" type=\"number\" min=\"0\">\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-array\">\n\t\t\t\t\tSet the allowed color spaces.\n\n\t\t\t\t\t<vue-multiselect v-model=\"option.color_space\" :multiple=\"true\" :options=\"available.color_space\" />\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<div class=\"pane pane-dropzone\">\n\t\t\t\t<iml-dropzone v-model=\"files\" :class=\"{ empty: files.length == 0 }\">\n\t\t\t\t\t<div v-if=\"files.length\">\n\t\t\t\t\t\t<button type=\"button\" @click=\"clear\">\n\t\t\t\t\t\t\tClear Results\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<iml-image-collection :options=\"option\" :files=\"files\" />\n\t\t\t\t\t</div>\n\t\t\t\t</iml-dropzone>\n\t\t\t</div>\n\t\t</form>\n\t</div>\n</template>\n\n<style>\n\n@import \"../css/variables.css\";\n\n.image-lint-app {\n\tdisplay: grid;\n\tgrid-template-columns: 16em 1fr;\n}\n\n.pane {\n\tpadding: 20px;\n}\n\n.pane-options {\n\tbackground: var(--color-layer-bg);\n\tmax-width: 450px;\n}\n\n.lint-header {\n\tbackground: var(--color-status-good);\n\tcolor: var(--color-status-good-contrast);\n\tpadding: 20px;\n}\n\n.lint-header {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr auto;\n\tgrid-template-rows: auto 1fr;\n\tgrid-template-areas:\n\t\t\"title   desc button\"\n\t\t\"version desc button\";\n\talign-items: baseline;\n}\n\n.lint-title {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 36px;\n\tmargin: 0;\n\tgrid-area: title;\n}\n\n.lint-subtitle {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 18px;\n\tmargin: 0 0 0 15px;\n\tgrid-area: desc;\n}\n\n.lint-version {\n\tfont-size: 0.8em;\n\tgrid-area: version;\n\tjustify-self: end;\n}\n\n.github-button {\n\tgrid-area: button;\n\talign-self: center;\n}\n\n.lint-options-title {\n\tmargin-top: 0;\n}\n\n.lint-option {\n\tdisplay: block;\n\tmargin: 1.1em 0;\n\tline-height: 1.3;\n}\n\n.lint-option-check {\n\tdisplay:  grid;\n\tgrid-template-columns: 1.4em auto;\n\tgap: 0.4em;\n}\n\n.lint-option-check [type=checkbox] {\n\talign-self: start;\n\theight: 1.4em;\n}\n\n.lint-option-number,\n.lint-option-array {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.lint-option-number [type=number],\n.lint-option-array .multiselect {\n\tmargin-top: 0.4em;\n\tfont-size:  1em;\n\tpadding:  0.2em;\n}\n\n</style>\n","/* @flow */\n'use strict';\n\nimport {EventEmitter} from 'events';\n\n// const MAX_ACTIVE_HANDLERS = 1;\nconst MAX_ACTIVE_HANDLERS = 10;\n\n/**\n * Manage workloads so the async queue doesn't get filled before any work can\n * be done. An iterable is provided to the the start method each item will be\n * emitted for processing with the 'next' event.\n *\n * The 'next' event handler will be provided two parameter, the next item in the\n * iterable and a 'done' function to be called to release the work handler back\n * to the pool.\n */\nexport class WorkHandler /*:: <T> */ extends EventEmitter {\n\t/*::\n\t_active_handlers: number;\n\t_active_processes: number;\n\t_done_proxy: () => void;\n\t_iterator: Iterator<T> | null;\n\t*/\n\n\t/**\n\t * Construct a new WorkHandler\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._active_handlers = 0;\n\t\tthis._active_processes = 0;\n\t\tthis._done_proxy = this._done.bind(this);\n\t\tthis._iterator = null;\n\t\tthis._stopped = false;\n\n\t\tthis.on('handler.available', this._handler_available.bind(this));\n\t}\n\n\t/**\n\t * Kick off the next element in the iterable.\n\t */\n\t_handler_available() {\n\t\tif (this._iterator) {\n\t\t\tconst next = this._iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\tthis._iterator = null;\n\t\t\t} else {\n\t\t\t\tthis.emit('next', next.value, this._done_proxy);\n\t\t\t\tthis._active_handlers++;\n\t\t\t\tthis._active_processes++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Release the work handler to the pool.\n\t */\n\t_done() {\n\t\tthis._active_handlers--;\n\t\tthis._active_processes--;\n\n\t\t// console.log('handlers', this._active_handlers);\n\t\t// console.log('processes', this._active_processes);\n\n\t\tif (!this._stopped) {\n\t\t\tif (this._active_handlers >= 0 && !this._stopped) {\n\t\t\t\tthis.emit('handler.available');\n\t\t\t} else {\n\t\t\t\tthrow new Error('No handlers available, did you call done?');\n\t\t\t}\n\t\t}\n\n\t\tif (this._active_processes <= 0) {\n\t\t\tthis.emit('end');\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the work handler is stopped.\n\t * @return {boolean} true if the work handler is stopped.\n\t */\n\tis_stopped() {\n\t\treturn this._stopped;\n\t}\n\n\t/**\n\t * Start the work handler.\n\t * @param  {Promise<Iterable<T>>} promise An iterable of items that will\n\t *                                        be processed.\n\t */\n\tstart(promise/*: Promise<Iterable<T>> */) {\n\t\tif (this._iterator) {\n\t\t\tthrow new Error('Work is in progress');\n\t\t}\n\n\t\tthis._active_handlers = 0;\n\n\t\tpromise\n\t\t\t.then((iterator) => {\n\t\t\t\tthis._iterator = iterator();\n\n\t\t\t\twhile (this._active_handlers < MAX_ACTIVE_HANDLERS) {\n\t\t\t\t\tthis.emit('handler.available');\n\t\t\t\t\tthis._active_handlers++;\n\t\t\t\t}\n\t\t\t}, (e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Stop the work handler before it has reached the end of the iterator. Any\n\t * currently running processes will be allowed to complete, but no new\n\t * proesses will be started.\n\t */\n\tstop() {\n\t\tthis._stopped = true;\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport crypto from 'crypto';\n\nconst TRIE_DEPTH = 3;\nconst HASH_TYPE = 'sha1';\n\n/*::\nconst Finder = require('./finder');\n\nimport type { FileDescriptor } from './finder';\n\ntype Trie = Map<string, Map<string, Map<string, Trie>>>;\n*/\n\n/**\n * Find duplicate files.\n */\nexport class Hasher {\n\t/*::\n\ttrie: Trie;\n\t*/\n\n\t/**\n\t * Construct a new Hasher.\n\t */\n\tconstructor() {\n\t\tthis.trie = new Map();\n\t}\n\n\t/**\n\t * Retrive the branch of the Trie that would contain the given digest.\n\t * @param  {string} digest A unique hash.\n\t * @return {Trie}          The sub Trie.w\n\t */\n\tfind(digest/*: string */)/*: Trie */ {\n\t\tlet current = this.trie;\n\t\tlet depth = 0;\n\n\t\t// Descend down the trie to find the leaf that contains this digest.\n\t\twhile (depth <= TRIE_DEPTH) {\n\t\t\tconst previous = current;\n\t\t\tconst byte = digest[depth];\n\n\t\t\tcurrent = current.get(byte);\n\n\t\t\tif (!current) {\n\t\t\t\tcurrent = new Map();\n\t\t\t\tprevious.set(byte, current);\n\t\t\t}\n\n\t\t\tdepth++;\n\t\t}\n\n\t\treturn current;\n\t}\n\n\t/**\n\t * Determine if the given buffer has already been seen. If not the hash and\n\t * path will be added to the Trie.\n\t * @param  {string} path    The path to the file.\n\t * @param  {Buffer} buffer  The file's content\n\t * @return {boolean}        The path of the existing file with the\n\t *                          same contents.\n\t */\n\tcontains(path/*: string */, buffer/*: Buffer */)/*: ?string */ {\n\t\t// The leaf should contain a map of digests to file names.\n\t\tconst hash = crypto.createHash(HASH_TYPE);\n\n\t\thash.update(buffer);\n\n\t\tconst digest = hash.digest('binary');\n\t\tconst hashes = this.find(digest);\n\t\tconst found_name = hashes.get(digest);\n\n\t\tif (!found_name) {\n\t\t\thashes.set(digest, path);\n\t\t}\n\n\t\treturn found_name;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/**\n * An enumeration of all of the color spaces\n */\nexport class ColorSpace {\n\t/*::\n\tstatic G: ColorSpace;\n\tstatic RGB: ColorSpace;\n\tstatic YCbCr: ColorSpace;\n\tstatic YCCK: ColorSpace;\n\tstatic LAB: ColorSpace;\n\tstatic HSV: ColorSpace;\n\tstatic CMYK: ColorSpace;\n\tstatic XYZ: ColorSpace;\n\tstatic XYB: ColorSpace;\n\n\tstatic all_names: Set<string>;\n\n\tname: string;\n\tchannels: number;\n\tunk_format: string | null;\n\t*/\n\n\t/**\n\t * Construct a new ColorSpace.\n\t * @param  {string} name     The name of the color space.\n\t * @param  {number} channels The number of channels for this color space.\n\t */\n\tconstructor(name/*: string */, channels/*: number */) {\n\t\tthis.name = name;\n\t\tthis.channels = channels;\n\t\tthis.unk_format = null;\n\n\t\tColorSpace.all_names.add(name);\n\t}\n\n\t/**\n\t * If this is 'ColorSpace.UNK' return the name of the color format that\n\t * was unknown.\n\t *\n\t * @return {String} The unknown format.\n\t */\n\tgetUnkFormat() {\n\t\treturn this.unk_format;\n\t}\n\n\t/**\n\t * Get an existing color space with the given name.\n\t * @param  {string} id   The name of the color space.\n\t * @return {ColorSpace}  The color space or null if no color space exists\n\t *                       with that name.\n\t */\n\tstatic from(id/*: string*/)/*: ColorSpace | null */ {\n\t\tlet space/*: ColorSpace | null */ = null;\n\n\t\tif (this.all_names.has(id)) {\n\t\t\tspace = (ColorSpace/*: any */)[id];\n\t\t}\n\n\t\treturn space;\n\t}\n\n\t/**\n\t * Construct a marker for an unknown color space.\n\t *\n\t * @param  {string} format      The name of the color space that was unknown.\n\t * @param  {number} [channels]  The number of channels.\n\t * @return {ColorSpace}         The unknown color space.\n\t */\n\tstatic unkownFormat(format, channels=-1) {\n\t\tconst color_space = new ColorSpace('UNK', channels);\n\n\t\tcolor_space.unk_format = format;\n\n\t\treturn color_space;\n\t}\n}\n\nColorSpace.all_names = new Set();\n\nColorSpace.G = new ColorSpace('G', 1);\nColorSpace.RGB = new ColorSpace('RGB', 3);\nColorSpace.YCbCr = new ColorSpace('YCbCr', 3);\nColorSpace.YCCK = new ColorSpace('YCCK', 4);\nColorSpace.LAB = new ColorSpace('LAB', 3);\nColorSpace.HSV = new ColorSpace('HSV', 3);\nColorSpace.CMYK = new ColorSpace('CMYK', 4);\nColorSpace.XYZ = new ColorSpace('XYZ', 3);\nColorSpace.XYB = new ColorSpace('XYB', 3);\n\n/**\n * The pixel format of an image.\n */\nexport class PixelFormat {\n\t/*::\n\tcolor_space: ColorSpace;\n\tindexed: boolean;\n\talpha: boolean;\n\tbit_depth: { [channel: string]: number};\n\t*/\n\n\t/**\n\t * Construct a new PixelFormat\n\t */\n\tconstructor() {\n\t\tthis.indexed = false;\n\t\tthis.alpha = false;\n\t\tthis.bit_depth = {};\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport chalk from 'chalk';\n\n/**\n * @typedef {Object} LogCounts\n * @property {number} info The count of the info logs\n * @property {number} warn The count of the warning logs\n * @property {number} error The count of the error logs.\n */\n\n/**\n * @typedef {keyof LogCounts} LogTypes\n */\n\n/**\n * A logger for writing the output to a string.\n */\nexport class Log {\n\t/*::\n\tfilename: string;\n\tlog: string;\n\tcount: LogCounts;\n\t*/\n\n\t/**\n\t * Construct a new logger, generally you should use the logger factory\n\t * instead of directly constructing this object.\n\t *\n\t * @param  {string | null} filename The name of the file that is being linted.\n\t * @param  {Log | null} parent The parent logger.\n\t */\n\tconstructor(filename=null/*: string */, parent=null) {\n\t\t/**\n\t\t * The name of the associated file if any,\n\t\t * @type {string}\n\t\t */\n\t\tthis.filename = filename;\n\n\t\t/**\n\t\t * The parent logger if any.\n\t\t * @type {Log | null}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The log messages.\n\t\t * @type {string}\n\t\t */\n\t\tthis.log = '';\n\n\t\tthis._muted = false;\n\n\t\t/**\n\t\t * The log counts by type.\n\t\t * @type {LogCounts}\n\t\t */\n\t\tthis.count = {\n\t\t\t'info': 0,\n\t\t\t'warn': 0,\n\t\t\t'error': 0,\n\t\t};\n\t}\n\n\t/**\n\t * Increment the count for the givent type of log.\n\t *\n\t * @param  {LogTypes} type [description]\n\t */\n\t_increment_count(type) {\n\t\tthis.count[type]++;\n\n\t\tif (this.parent) {\n\t\t\tthis.parent._increment_count(type);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if this should be printed.\n\t * @return {boolean} true if the log should be printed.\n\t */\n\tis_printable()/*: boolean */ {\n\t\treturn this.count.warn > 0 || this.count.error > 0;\n\t}\n\n\t/**\n\t * Stop printing new message to the log.\n\t */\n\tmute() {\n\t\tthis._muted = true;\n\t}\n\n\t/**\n\t * Log a message at the 'info' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\tinfo(message/*: string */) {\n\t\tthis._increment_count('info');\n\t\tthis.log += '\\n  INFO:  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'warn' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\twarn(message/*: string */) {\n\t\tthis._increment_count('warn');\n\t\tthis.log += '\\n  ' + chalk.yellow('WARN:') + '  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'error' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\terror(message/*: string */) {\n\t\tthis._increment_count('error');\n\t\tthis.log += '\\n  ' + chalk.red('ERROR:') + '  ' + message;\n\t}\n\n\t/**\n\t * Get the number of errors that have been logged.\n\t * @return {number} The number of errors.\n\t */\n\tget_error_count() {\n\t\treturn this.count.error;\n\t}\n\n\t/**\n\t * Get the number of warnings that have been logged.\n\t * @return {number} The number of warnings.\n\t */\n\tget_warning_count() {\n\t\treturn this.count.warn;\n\t}\n\n\t/**\n\t * Get a new child logger.\n\t * @param  {string} filename The name of the file being linted.\n\t * @return {Log}          \t The new logger.\n\t */\n\tget_logger(filename) {\n\t\treturn new Log(filename, this);\n\t}\n\n\t/**\n\t * Convert this log to a string.\n\t * @return {string} The log output.\n\t */\n\ttoString()/*: string */ {\n\t\tlet warn_count = this.count.warn.toString();\n\t\tlet error_count = this.count.error.toString();\n\n\t\tif (this.count.warn) {\n\t\t\twarn_count = chalk.yellow(warn_count);\n\t\t}\n\n\t\tif (this.count.error) {\n\t\t\terror_count = chalk.red(error_count);\n\t\t}\n\n\t\treturn this.filename + this.log + '\\n' +\n\t\t\twarn_count + ' warnings. ' +\n\t\t\terror_count + ' errors.';\n\t}\n}\n\n/**\n * A factory for creating new logs.\n */\nexport class LoggerFactory {\n\t/**\n\t * Get a new instance of a logger.\n\t *\n\t * @param {string} filename The filename of the file being linted.\n\t * @return {Log}            The new logging instance.\n\t */\n\tstatic get_log(filename/*: string */)/*: Log */ {\n\t\treturn new Log(filename);\n\t}\n}\n\nexport const ROOT_LOGGER = new Log();\n","/* @flow */\n\n/*::\nimport {InfoProvider} from \"./image-info.js\";\n*/\n\n/**\n * Abstract class to identify the type of images.\n */\nexport class ImageIdentifier {\n\t/*::\n\t_info_provider: InfoProvider | null\n\n\tstatic _extension_registry: Map<string, ImageIdentifier>;\n\tstatic _mime_registry: Map<string, ImageIdentifier>;\n\tstatic _image_extensions: string[];\n\tstatic _all_extensions: string[];\n\tstatic _all_mimes: string[];\n\tstatic _all_providers: ImageIdentifier[];\n\t*/\n\n\t/**\n\t * Construct an InfoProvider\n\t */\n\tconstructor() {\n\t\tthis._info_provider = null;\n\t}\n\n\t/**\n\t * Determine if this file type is identify-only or if there is an associated\n\t * information provider.\n\t *\n\t * @return {boolean} True if the file type is identify-only.\n\t */\n\tidentify_only()/*: boolean */ {\n\t\treturn !this.get_info_provider();\n\t}\n\n\t/**\n\t * Determine if the file is of the file type.\n\t *\n\t * @abstract\n\t * @param  {Buffer}  buffer The image buffer.\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common extension for this type of file.\n\t *\n\t * @return {String} containing the extension '.jpg', '.png', etc.\n\t */\n\tget_extension()/*: string */ {\n\t\treturn this.get_extensions()[0];\n\t}\n\n\t/**\n\t * Get the possible file extensions for this type of file having the\n\t * canonical extension as the first element.\n\t */\n\tget_extensions()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common mime for this type of file.\n\t *\n\t * @return {String} containing the mime type 'image/jpeg', 'image/png', etc.\n\t */\n\tget_mime()/*: string */ {\n\t\treturn this.get_mimes()[0];\n\t}\n\n\t/**\n\t * Get the possible MIME types for this type of file having the canonical\n\t * MIME type as the first element.\n\t */\n\tget_mimes()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the buffer contains enough information to be validated.\n\t *\n\t * @param  {Buffer} buffer The image buffer.\n\t * @return {boolean} True if the image can be validated.\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get an instance of the info provider for this file type.\n\t *\n\t * @return {InfoProvider} The info provider.\n\t */\n\tget_info_provider()/*: Class<InfoProvider> | null */ {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Add an image identifier to the registry.\n\t * @param  {function} Constructor The constructor of the identifier.\n\t */\n\tstatic register(Constructor/*: Class<ImageIdentifier> */) {\n\t\tconst provider = new Constructor();\n\t\tconst is_identify_only = provider.identify_only();\n\n\t\tfor (const extension of provider.get_extensions()) {\n\t\t\tthis._extension_registry.set(extension, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_extensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tfor (const mime of provider.get_mimes()) {\n\t\t\tthis._mime_registry.set(mime, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_mimes.push(mime);\n\t\t\t}\n\t\t}\n\n\t\tthis._all_providers.push(provider);\n\t}\n\n\t/**\n\t * Clear the registered identifiers.\n\t */\n\tstatic clear_registry() {\n\t\tthis._extension_registry.clear();\n\t\tthis._all_extensions.length = 0;\n\n\t\tthis._mime_registry.clear();\n\t\tthis._all_mimes.length = 0;\n\n\t\tthis._all_providers.length = 0;\n\t}\n\n\t/**\n\t * Get all of the know file extensions.\n\t *\n\t * @return {string[]} An array of file extension.\n\t */\n\tstatic get_all_extensions()/*: string[] */ {\n\t\treturn ImageIdentifier._all_extensions;\n\t}\n\n\t/**\n\t * Get all of the known MIME types.\n\t *\n\t * @return {string[]} An array of MIME types.\n\t */\n\tstatic get_all_mimes()/*: string[] */ {\n\t\treturn ImageIdentifier._all_mimes;\n\t}\n\n\t/**\n\t * Construct a new identifier using the file extension.\n\t *\n\t * @param {string} extension   The file extension of the.\n\t * @return {ImageIdentifier}  The new image identifier.\n\t */\n\tstatic from_extension(extension/*: string */)/*: ?ImageIdentifier */ {\n\t\treturn ImageIdentifier._extension_registry.get(extension);\n\t}\n\n\t/**\n\t * Iterate all of the registered providers.\n\t */\n\tstatic* all_providers()/*: Generator<ImageIdentifier, void, void>*/ {\n\t\tyield* ImageIdentifier._all_providers;\n\t}\n}\n\nImageIdentifier._extension_registry = new Map();\nImageIdentifier._mime_registry = new Map();\nImageIdentifier._all_providers = [];\nImageIdentifier._all_extensions = [];\nImageIdentifier._all_mimes = [];\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that uses a magic number to identify the format.\n */\nexport class MagicNumberIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the magic number for this file type\n\t */\n\tget_magic()/*: Buffer */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\t\tconst buffer_magic = buffer.slice(0, magic.length);\n\n\t\t// console.log('Validating magic: ' + this.magic.toString('hex') + ' === ' + buffer_magic.toString('hex'));\n\n\t\treturn Buffer.compare(magic, buffer_magic) === 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\n\t\treturn buffer.length >= magic.length;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type { Log } from './logger.js';\nimport type { FileDescriptor } from './finder.js';\nimport type { LinterOptions } from './linter.js';\nimport type { PixelFormat } from './pixel-format.js';\n\nexport\ninterface Dimensions {\n\twidth: number;\n\theight: number;\n\tframes: number;\n}\n\nexport interface ImageInfo {\n\ttruncated: boolean;\n\tdimensions?: Dimensions;\n\tsize?: number;\n\tpixel_format?: PixelFormat;\n\tbytes_per_pixel?: number;\n}\n*/\n\n/**\n * Gather information about an image file.\n */\nexport class InfoProvider {\n\t/**\n\t * Calculate the number of bytes per pixel in the image.\n\t *\n\t * @param  {Dimensions} dims The dimensions of the image.\n\t * @param  {number} size     The file size of the image.\n\t * @return {number}          The number of bytes per pixel.\n\t */\n\tcalculate_bpp(dims/*: Dimensions */, size/*: number */)/*: number */ {\n\t\treturn (size - this.get_overhead()) / (dims.width * dims.height * dims.frames);\n\t}\n\n\t/**\n\t * Get the number of bytes of overhead of this file format.\n\t *\n\t * @return {number} The number in bytes.\n\t */\n\tget_overhead()/*: number */ {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Get the dimensions of the image.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the pixel format of the image.\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * The the information for this file.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @return {ImageInfo}     This image information.\n\t */\n\tget_info(buffer/*: Buffer */)/*: ImageInfo */ {\n\t\tconst info/*: ImageInfo */ = {\n\t\t\t'truncated': this.is_truncated(buffer),\n\t\t};\n\n\t\tif (!info.truncated) {\n\t\t\tconst dims = this.get_dimensions(buffer);\n\n\t\t\tinfo.dimensions = dims;\n\t\t\tinfo.size = buffer.length;\n\t\t\tinfo.pixel_format = this.get_pixel_format(buffer);\n\t\t\tinfo.bytes_per_pixel = this.calculate_bpp(dims, buffer.length);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Is the file truncated.\n\t *\n\t * @abstract\n\t * @param  {Buffer}    buffer A buffer containing a compressed image.\n\t * @return {Boolean}   True if the file is invalid due to it being truncated.\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport crc from 'crc';\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst IHDR_OFFSET = 0xC;\nconst SECTION_HEADER_WIDTH = 4;\nconst SECTION_LENGTH_WIDTH = 4;\nconst CRC_WIDTH = 4;\n\nconst WIDTH_OFFSET = IHDR_OFFSET + SECTION_HEADER_WIDTH;\nconst HEIGHT_OFFSET = WIDTH_OFFSET + 4;\nconst BIT_DEPTH_OFFSET = HEIGHT_OFFSET + 4;\nconst COLOR_TYPE_OFFSET = BIT_DEPTH_OFFSET + 1;\n\nconst CHUNK_TYPE_IEND = 0x49454E44;\n\n// const IEND_CRC = 0xAE426082;\nconst IEND_LENGTH = SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + CRC_WIDTH;\n\nconst GRAYSCALE_TYPES = new Set([0, 4]);\nconst RGB_TYPES = new Set([2, 3, 6]);\nconst ALPHA_TYPES = new Set([4, 6]);\nconst INDEXED_TYPES = new Set([4]);\n\n// http://www.libpng.org/pub/png/spec/1.2/\n\n/**\n * A PNG chunk.\n */\nclass PNGChunk {\n\t/*::\n\tlength: number;\n\theader: number;\n\tdata: Buffer;\n\tcrc32: number;\n\t*/\n\n\t/**\n\t * Construct a new PNG chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */) {\n\t\tthis.length = buffer.readUInt32BE(offset);\n\t\tthis.header = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH);\n\t\tthis.data = buffer.slice(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH, this.length);\n\t\tthis.crc32 = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + this.length);\n\t}\n\n\t/**\n\t * Verify the CRC in the chunk.\n\t *\n\t * @return {boolean} True if its a valid chunk.\n\t */\n\tverify()/*: boolean */ {\n\t\tconst header = Buffer.alloc(4);\n\t\tlet check = null;\n\n\t\theader.writeUInt32BE(this.header, 0);\n\n\t\tcheck = crc.crc32(header);\n\t\tcheck = crc.crc32(this.data, check);\n\n\t\treturn check === this.crc32;\n\t}\n}\n\n/**\n * A PNG info provider.\n */\nexport class PNGInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible PNG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 67;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tlet end_chunk = null;\n\n\t\ttry {\n\t\t\tend_chunk = new PNGChunk(buffer, buffer.length - IEND_LENGTH);\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn end_chunk.header === CHUNK_TYPE_IEND && !end_chunk.verify();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\treturn {\n\t\t\twidth: buffer.readUInt32BE(WIDTH_OFFSET),\n\t\t\theight: buffer.readUInt32BE(HEIGHT_OFFSET),\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tconst bit_depth = buffer.readInt8(BIT_DEPTH_OFFSET);\n\t\tconst color_type = buffer.readInt8(COLOR_TYPE_OFFSET);\n\n\t\t// Determine the color space\n\t\tif (RGB_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\tformat.bit_depth.R = bit_depth;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t\tformat.bit_depth.B = bit_depth;\n\t\t} else if (GRAYSCALE_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat(color_type);\n\t\t}\n\n\t\t// Determine the alpha channel\n\t\tif (ALPHA_TYPES.has(color_type)) {\n\t\t\tformat.alpha = true;\n\t\t\tformat.bit_depth.alpha = bit_depth;\n\t\t}\n\n\t\t// Determine if it is indexed.\n\t\tif (INDEXED_TYPES.has(color_type)) {\n\t\t\tformat.indexed = true;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {PNGInfoProvider} from '../image/png-info.js';\n\n/**\n * An image identifier that identifies PNG images.\n */\nclass PNGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('89504e470d0a1a0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn PNGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(PNGIdentifier);\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst VERSION_OFFSET = 0x3;\nconst HEIGHT_OFFSET = 0x6;\nconst WIDTH_OFFSET = 0x8;\nconst SETTINGS_OFFSET = 0xA;\nconst COLOR_TABLE_OFFSET = 0xD;\nconst COLOR_TABLE_AVAILABLE_MASK = 0x80;\nconst COLOR_TABLE_LENGTH_MASK = 0x7;\nconst IMAGE_DESCRIPTOR_OFFSET = 9; // a relative offset from the separator (0x2c)\nconst FILE_TRAILER = 0x3B; // A semicolon;\n\n/**\n * A JPEG info provider.\n */\nexport class GIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible GIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 35;\n\t}\n\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The offset of the next chunk.\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst block_length = 2 + buffer.readUInt8(offset + 2);\n\n\t\t// console.log('block_length', block_length);\n\n\t\treturn offset + block_length + this.get_sub_block_length(buffer, offset + block_length + 1) + 1;\n\t}\n\n\t/**\n\t * Get the length of the sub-block.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the sub-block.\n\t */\n\tget_sub_block_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tlet sub_block_length = 0;\n\t\tlet size_byte = buffer.readUInt8(offset);\n\n\t\t// console.log('starting searching for sub-blocks, initial sub-block size', size_byte.toString(16));\n\t\t// if the initial size_byte is 0x00 then we are dealing with a non-data chunk.\n\t\tif (size_byte !== 0) {\n\t\t\twhile (size_byte !== 0) {\n\t\t\t\tsize_byte = buffer.readUInt8(offset + sub_block_length);\n\t\t\t\t// console.log(size_byte);\n\t\t\t\tsub_block_length += size_byte + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tsub_block_length = 1;\n\t\t}\n\n\t\t// console.log('finished searching for sub-blocks, total length is', sub_block_length + 1);\n\n\t\treturn sub_block_length;\n\t}\n\n\t/**\n\t * Get the length of the color table.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the color table.\n\t */\n\tget_color_table_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst color_table_bits = buffer.readUInt8(offset) & COLOR_TABLE_LENGTH_MASK;\n\n\t\t// console.log('color table bits', color_table_bits.toString(16));\n\n\t\treturn 3 * Math.pow(2, color_table_bits + 1);\n\t}\n\n\t/**\n\t * Determine if a color table exists.\n\t *\n\t * @param  {Buffer}  buffer The file buffer.\n\t * @param  {number}  offset The offset in buffer.\n\t * @return {boolean}        True if the file has a color table.\n\t */\n\thas_color_table(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\t// console.log('has color table', !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK));\n\t\treturn !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK);\n\t}\n\n\t/**\n\t * Get the version string.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @return {string}        The version string.\n\t */\n\tget_version(buffer/*: Buffer */)/*: string */ {\n\t\treturn buffer.toString('ascii', VERSION_OFFSET, HEIGHT_OFFSET);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet frame_count = 0;\n\t\tlet found = false;\n\t\tlet offset = 0;\n\n\t\tif (this.has_color_table(buffer, SETTINGS_OFFSET)) {\n\t\t\tconst color_table_length = this.get_color_table_length(buffer, SETTINGS_OFFSET);\n\t\t\toffset = COLOR_TABLE_OFFSET + color_table_length;\n\t\t} else {\n\t\t\toffset = SETTINGS_OFFSET + 3;\n\t\t}\n\n\t\t// console.log(offset);\n\n\t\twhile (!found) {\n\t\t\tlet block_header = buffer.readUInt8(offset);\n\n\t\t\t// console.log('Offset of block', offset);\n\t\t\t// console.log('block header (should be 0x21)', block_header.toString(16));\n\t\t\t// console.log('block label', buffer.readUInt8(offset + 1).toString(16));\n\n\t\t\tif (block_header === 0x2c) {\n\t\t\t\tframe_count++;\n\t\t\t\t// console.log(buffer.readUInt8(offset).toString(16));\n\t\t\t\toffset += IMAGE_DESCRIPTOR_OFFSET;\n\t\t\t\t// Skip the color table, if present\n\n\t\t\t\t// console.log('color table return', this.has_color_table(buffer, offset));\n\t\t\t\tif (this.has_color_table(buffer, offset)) {\n\t\t\t\t\t// console.log('has local color table');\n\t\t\t\t\toffset += this.get_color_table_length(buffer, offset);\n\t\t\t\t}\n\t\t\t\t// Skip the Packed values byte and the \"LZW Minimum Code Size\" byte.\n\t\t\t\toffset += 2;\n\t\t\t\t// Skip the image data\n\t\t\t\toffset += this.get_sub_block_length(buffer, offset);\n\t\t\t\t// console.log('offset', offset);\n\t\t\t\t// console.log('this should be a block header', buffer.readUInt8(offset).toString(16));\n\t\t\t}\n\n\t\t\t// console.log('near the end', offset, buffer.length);\n\n\t\t\tif (offset + 1 >= buffer.length) {\n\t\t\t\t// Normal Termination\n\t\t\t\t// We've reached the end of the file\n\t\t\t\tfound = true;\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tblock_header = buffer.readUInt8(offset);\n\n\t\t\t\tif (block_header !== 0x21 && block_header !== 0x2c) {\n\t\t\t\t\t// Abnormal Termination\n\t\t\t\t\t// There is either junk at the end of the file or its corrupted\n\t\t\t\t\t// (or the programmer made a mistake).\n\t\t\t\t\tfound = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset);\n\t\t}\n\n\t\t// console.log('gif version', this.get_version(buffer));\n\t\t// console.log('number of frames', frame_count);\n\n\t\treturn {\n\t\t\t'width': buffer.readUInt16LE(HEIGHT_OFFSET),\n\t\t\t'height': buffer.readUInt16LE(WIDTH_OFFSET),\n\t\t\t'frames': frame_count,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format()/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tformat.indexed = true;\n\t\tformat.bit_depth.R = 8;\n\t\tformat.bit_depth.G = 8;\n\t\tformat.bit_depth.B = 8;\n\n\t\t// TODO: handle this properly\n\t\tformat.bit_depth.alpha = 1;\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {GIFInfoProvider} from '../image/gif-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass GIFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('GIF');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn GIFInfoProvider;\n\t}\n}\n\nImageIdentifier.register(GIFIdentifier);\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst MARKER_LENGTH = 2;\nconst CHUNKS_WITH_DIMS = 0xF0;\nconst HEIGHT_OFFSET = 5;\nconst WIDTH_OFFSET = 7;\nconst CHANNELS_OFFSET = 9;\nconst FILE_TRAILER = 0xFFD9;\n\n// https://www.w3.org/Graphics/JPEG/jfif3.pdf\n// http://www.itu.int/rec/T-REC-T.871-201105-I/en\n\n/**\n * A JPEG info provider.\n */\nexport class JPGInfoProvider extends InfoProvider {\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param {Buffer} buffer  The file buffer.\n\t * @param {number} offset  The offset of the current chunk.\n\t * @return {number} the offset of the next chunk\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\treturn offset + MARKER_LENGTH + buffer.readUInt16BE(offset + 2); // this.calculate_chunk_length(s1, s2);\n\t}\n\n\t/**\n\t * Determines if this chunk is a SOFn chunk that may conatain matadata for\n\t * this image.\n\t *\n\t * @param  {Buffer}  buffer The buffer source of the image.\n\t * @param  {number}  offset The offset of the start of the chunk\n\t * @return {Boolean}        Returns true if it is a SOFn chunk.\n\t */\n\tis_sof_chunk(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\tconst sof_byte = buffer.readUInt8(offset + 1);\n\n\t\treturn (sof_byte & CHUNKS_WITH_DIMS) === 0xC0 && sof_byte !== 0xC4 && sof_byte !== 0xC8 && sof_byte !== 0xCC;\n\t}\n\n\t/**\n\t * Iterate all the chunks in the file.\n\t *\n\t * @param {Buffer} buffer The buffer to scan through looking for chunks.\n\t * @yields {number} The offset of the next chunk.\n\t */\n\t* chunks(buffer/*: Buffer */)/*: Generator<number, void, number> */ {\n\t\tlet offset = this.next_chunk(buffer, MARKER_LENGTH);\n\t\tlet found = false;\n\n\t\twhile (!found) {\n\t\t\tyield offset;\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset, buffer.length);\n\n\t\t\tif (offset > buffer.length) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt16BE(buffer.length - 2) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet width = null;\n\t\tlet height = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\t// console.log('Reading header');\n\n\t\t\t\twidth = buffer.readUInt16BE(offset + WIDTH_OFFSET);\n\t\t\t\theight = buffer.readUInt16BE(offset + HEIGHT_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!width || !height) {\n\t\t\tthrow new Error('Dimensions not found');\n\t\t}\n\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tlet channels = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\tchannels = buffer.readUInt8(offset + CHANNELS_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (channels === 1) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t} else if (channels === 3) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t} else if (channels === 4) {\n\t\t\tformat.color_space = ColorSpace.CMYK;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JPGInfoProvider} from '../image/jpg-info.js';\n\n/**\n * An image identifier that identifies JPEG images.\n */\nclass JPGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ffd8ff', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jpg',\n\t\t\t'.jpeg',\n\t\t\t'.jpe',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jpeg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JPGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JPGIdentifier);\n","/* @flow */\n\nconst U32_MAX = 0xFFFFFFFF;\n\nconst VAL = 0;\nconst BITS = 1;\nconst BITS_OFFSET = 2;\n\nconst WORD_SIZE = 8;\nconst QUAD_WORD_SIZE = WORD_SIZE * 4;\n\n/*::\ntype Distribution =\n\t[0, number] |\n\t[1, number] |\n\t[2, number, number];\n\ntype Distribution32 = [\n\tDistribution,\n\tDistribution,\n\tDistribution,\n\tDistribution\n];\n\nexport type CustomXY = {\n\tx: number,\n\ty: number\n};\n\ntype EnumTable = Set<number>;\n*/\n\n/**\n * Format a byte as a string.\n * @param  {number} bits The byte as number.\n * @return {string}      The formatted byte.\n */\n// function dbg_byte(bits) {\n// \treturn ('00000000' + bits.toString(2)).slice(-8);\n// }\n\n\n/**\n * An error that is thrown when the stream can not be parsed.\n */\nexport class IllformedStreamError extends Error {\n\n}\n\n/**\n * The JXL bitstream.\n */\nexport class BitStream {\n\t/*::\n\tbuffer: Buffer;\n\toffset: number;\n\tsub_bit: number;\n\tcurrent_byte: number;\n\t*/\n\n\t/**\n\t * Construct a new JPEG XL Bit stream.\n\t * @param  {Buffer} buffer The buffer that contains the image.\n\t * @param  {number} offset The offset from beginning of the buffer.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */ = 0) {\n\t\tthis.buffer = buffer;\n\t\tthis.offset = offset;\n\t\tthis.sub_bit = 0;\n\t\tthis.current_byte = buffer.readUInt8(offset);\n\t}\n\n\t/**\n\t * Read a certain number of bits from a byte.\n\t *\n\t * @param {number} byte  The byte to read from.\n\t * @param {number} offset  Which bit to start reading from.\n\t * @param {number} bits  The number of bits to read.\n\t *\n\t * @return {number} The bits that were read.\n\t */\n\tread_from_byte(byte/*: number */, offset/*: number */, bits/*: number */)/*: number */ {\n\t\tlet value = byte;\n\n\t\t// This builds the mask with the correct number of '1'. For example:\n\t\t//\n\t\t// | Bits | Mask     |\n\t\t// | ---- | -------- |\n\t\t// |    1 | 00000001 |\n\t\t// |    2 | 00000011 |\n\t\t// |  ... |    ...   |\n\t\t// |    8 | 11111111 |\n\t\tlet mask = (1 << bits) - 1;\n\n\t\t// console.log('mask: ', mask.toString(2));\n\t\t// console.log('mask sub_bit:', this.sub_bit, '- mask bits: ', bits);\n\n\t\t// This positions the mask in the correct spot...\n\t\t//\n\t\t// | sub_bit | Bits | Mask     |\n\t\t// | ------- | ---- | -------- |\n\t\t// |       1 |    2 | 00000011 |\n\t\t// |       2 |    2 | 00000110 |\n\t\t// |   ...   |  ... |    ...   |\n\t\t// |       8 |    2 | 10000000 | (and one from the next byte).\n\t\tmask = (mask << offset) >>> 0;\n\n\t\t// console.log('mask:', mask.toString(2), '- value:', value.toString(2));\n\t\t// console.log('value: ', (value & mask).toString(2));\n\n\t\tvalue = (value & mask) >>> offset;\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a certain number of bits from the stream.\n\t *\n\t * @param  {number} bits  The number of bits to read.\n\t * @return {number}       The bits read as a number.\n\t */\n\tread_bits(bits/*: number */)/*: number */ {\n\t\tif (bits > QUAD_WORD_SIZE) {\n\t\t\tthrow new Error(`Can not read more than ${ QUAD_WORD_SIZE } bits at a time. Attempting to read ${ bits }`);\n\t\t}\n\n\t\tif (bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet leftovers = 0;\n\t\tlet shift = 0;\n\t\tconst start_bits = WORD_SIZE - this.sub_bit;\n\n\t\t// console.log('start_bits', start_bits);\n\n\t\t// Read whats leftover from the previous byte. So from here on its whole\n\t\t// bytes only.\n\t\tif (this.sub_bit > 0 && bits > start_bits) {\n\t\t\t// console.log('bits needed from previous byte', start_bits);\n\t\t\tbits -= start_bits;\n\t\t\tleftovers = this.read_from_byte(this.current_byte, this.sub_bit, start_bits);\n\t\t\tshift = start_bits;\n\n\t\t\tthis.offset += 1;\n\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\tconst bytes = Math.floor(bits / WORD_SIZE);\n\t\tlet value = leftovers;\n\n\t\t// Read whole bytes\n\t\tif (bytes > 0) {\n\t\t\tfor (let byte = 0; byte < bytes; byte++) {\n\t\t\t\tlet read = this.read_from_byte(this.current_byte, 0, WORD_SIZE);\n\n\t\t\t\t// console.log(`byte ${byte}: `, dbg_byte(read));\n\n\t\t\t\tif (shift) {\n\t\t\t\t\tread = read << shift;\n\t\t\t\t}\n\n\t\t\t\t// console.log('value: ', value.toString(2));\n\n\t\t\t\tthis.offset += 1;\n\t\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\n\t\t\t\tshift += WORD_SIZE;\n\n\t\t\t\tvalue = value | read;\n\t\t\t}\n\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\t// There may still be a couple of bits left to read.\n\t\tbits = bits - (bytes * WORD_SIZE);\n\n\t\tif (bits > 0) {\n\t\t\tlet read = this.read_from_byte(this.current_byte, this.sub_bit, bits);\n\n\t\t\t// console.log(`byte last: `, dbg_byte(read));\n\n\t\t\tif (shift) {\n\t\t\t\tread = read << shift;\n\t\t\t}\n\n\t\t\tvalue = value | read;\n\n\t\t\tthis.sub_bit += bits;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a boolean from the stream.\n\t *\n\t * @return {boolean}  The boolean read.\n\t */\n\tread_boolean()/*: boolean */ {\n\t\treturn !!this.read_bits(1);\n\t}\n\n\t/**\n\t * Read a 32bit unsigned integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}  The number read.\n\t */\n\tread_u32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tif (distributions.length > 4) {\n\t\t\tthrow new Error('U32: A u32 takes only 4 distributions.');\n\t\t}\n\n\t\tconst u = this.read_bits(2);\n\t\tconst dist = distributions[u];\n\n\t\t// console.log('distribution', u.toString(2));\n\n\t\tif (dist[0] === VAL) {\n\t\t\treturn dist[1];\n\t\t} else if (dist[0] === BITS) {\n\t\t\treturn this.read_bits(dist[1]);\n\t\t} else if (dist[0] === BITS_OFFSET) {\n\t\t\tif (dist.length !== 3) {\n\t\t\t\tthrow new Error('U32: incorrect number of parameters for BitsOffset distribution.');\n\t\t\t}\n\t\t\treturn (dist[2] + this.read_bits(dist[1])) % U32_MAX;\n\t\t} else {\n\t\t\tthrow new Error('U32: Unknown distribution.');\n\t\t}\n\t}\n\n\t/**\n\t * Read a signed 32bit integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}   The number read.\n\t */\n\tread_s32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tconst v = this.read_u32(...distributions);\n\n\t\tif (v % 2 === 0) {\n\t\t\treturn v >> 1;\n\t\t} else if (v === U32_MAX) {\n\t\t\treturn 0x80000000;\n\t\t} else {\n\t\t\treturn -(v >> 1);\n\t\t}\n\t}\n\n\t/**\n\t * Read a 16bit float from the stream.\n\t *\n\t * @return {number}  The number read.\n\t */\n\tread_f16()/*: number */ {\n\t\tconst bits16 = this.read_bits(16);\n\t\tconst sign = bits16 >> 15;\n\t\tconst biased_exp = ( bits16 >> 10 ) & 0x1F;\n\t\tconst mantissa = bits16 & 0x3FF;\n\t\tlet value;\n\n\t\tif (biased_exp === 31) {\n\t\t\tthrow new IllformedStreamError('F16: Invalid biased exponent.');\n\t\t}\n\n\t\tif ( biased_exp == 0 ) {\n\t\t\tvalue = mantissa / ( 1 << 24 );\n\t\t} else {\n\t\t\tconst biased_exp32 = biased_exp + ( 127 - 15 );\n\t\t\tconst mantissa32 = mantissa << ( 23 - 10 );\n\t\t\tconst buffer = new ArrayBuffer(4);\n\t\t\t(new Uint32Array(buffer))[0] = ( sign << 31 ) | ( biased_exp32 << 23 ) | mantissa32;\n\t\t\tvalue = (new Float32Array(buffer))[0];\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a custom X, Y from the stream.\n\t *\n\t * @return {{x: number, y: number}} The value read.\n\t */\n\tread_customxy()/*: CustomXY */ {\n\t\treturn {\n\t\t\tx: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t\ty: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t};\n\t}\n\n\t/**\n\t * Read an enumeration from the stream.\n\t *\n\t * @param  {EnumTable} enum_table The table of enum values.\n\t * @return {number}            The enum value read.\n\t */\n\tread_enum(enum_table/*: EnumTable */)/*: number */ {\n\t\tconst value = this.read_u32(\n\t\t\t[VAL, 0],\n\t\t\t[VAL, 1],\n\t\t\t[BITS_OFFSET, 4, 2],\n\t\t\t[BITS_OFFSET, 6, 18],\n\t\t);\n\n\t\tif (value > 63) {\n\t\t\tthrow new IllformedStreamError(`Enum: Invalid value: ${ value }`);\n\t\t} else if (!enum_table.has(value)) {\n\t\t\tthrow new IllformedStreamError(`Enum: Unknown value: ${ value }`);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Get the number of bits read from the stream.\n\t *\n\t * @return {number}  The number of bits read.\n\t */\n\tget_bits_read()/*: number */ {\n\t\treturn (this.offset * 8) + this.sub_bit;\n\t}\n}\n\nexport const U32 = {\n\tVAL,\n\tBITS,\n\tBITS_OFFSET,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\n/**\n * @typedef {import('./bit-stream.js').BitStream} BitStream\n */\n\n\nimport {U32} from './bit-stream.js';\n\nconst XSIZE_SEPARATE = 0; // xsize coded separately\nconst XSIZE_IS_YSIZE = 1; // xsize = ysize\nconst XSIZE_RATIO_12X10 = 2; // xsize = floor( ysize × 12 / 10)\nconst XSIZE_RATIO_4X3 = 3; // xsize = floor( ysize × 4 / 3)\nconst XSIZE_RATIO_3X2 = 4; // xsize = floor( ysize × 3 / 2)\nconst XSIZE_RATIO_16X9 = 5; // xsize = floor( ysize × 16 / 9)\nconst XSIZE_RATIO_5X4 = 6; // xsize = floor( ysize × 5 / 4)\nconst XSIZE_RATIO_2X1 = 7; // xsize = floor( ysize × 2 / 1)\n\n/**\n * The JXL size header\n */\nexport class SizeHeader {\n\t/*::\n\tsmall: boolean;\n\tysize: number;\n\txsize: number;\n\tratio: number;\n\t*/\n\n\t/**\n\t * Construct a new SizeHeader\n\t *\n\t * @param  {BitStream} stream The bit stream to read the SizeHeader from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tlet ysize;\n\t\tlet xsize;\n\t\tthis.small = stream.read_boolean();\n\n\t\tif (this.small) {\n\t\t\tysize = (stream.read_bits(5) + 1) * 8;\n\t\t} else {\n\t\t\tysize = stream.read_u32(\n\t\t\t\t[U32.BITS, 9],\n\t\t\t\t[U32.BITS, 13],\n\t\t\t\t[U32.BITS, 18],\n\t\t\t\t[U32.BITS, 30],\n\t\t\t) + 1;\n\t\t}\n\n\t\tthis.ratio = stream.read_bits(3);\n\n\t\tif (this.ratio === XSIZE_SEPARATE) {\n\t\t\tif (this.small) {\n\t\t\t\txsize = (stream.read_bits(5) + 1) * 8;\n\t\t\t} else {\n\t\t\t\txsize = stream.read_u32(\n\t\t\t\t\t[U32.BITS, 9],\n\t\t\t\t\t[U32.BITS, 13],\n\t\t\t\t\t[U32.BITS, 18],\n\t\t\t\t\t[U32.BITS, 30],\n\t\t\t\t) + 1;\n\t\t\t}\n\t\t} else if (this.ratio === XSIZE_IS_YSIZE) {\n\t\t\txsize = ysize;\n\t\t} else if (this.ratio === XSIZE_RATIO_12X10) {\n\t\t\txsize = Math.floor(ysize * 12 / 10);\n\t\t} else if (this.ratio === XSIZE_RATIO_4X3) {\n\t\t\txsize = Math.floor(ysize * 4 / 3);\n\t\t} else if (this.ratio === XSIZE_RATIO_3X2) {\n\t\t\txsize = Math.floor(ysize * 3 / 2);\n\t\t} else if (this.ratio === XSIZE_RATIO_16X9) {\n\t\t\txsize = Math.floor(ysize * 16 / 9);\n\t\t} else if (this.ratio === XSIZE_RATIO_5X4) {\n\t\t\txsize = Math.floor(ysize * 5 / 4);\n\t\t} else if (this.ratio === XSIZE_RATIO_2X1) {\n\t\t\txsize = Math.floor(ysize * 2 / 1);\n\t\t} else {\n\t\t\tthrow new Error('SizeHeader: unknown aspect ratio.');\n\t\t}\n\n\t\tthis.ysize = ysize;\n\t\tthis.xsize = xsize;\n\t}\n\n\t/**\n\t * Get whether or not this is a small image.\n\t * @return {boolean} True if small, false otherwise.\n\t */\n\tget_small()/*: boolean */ {\n\t\treturn this.small;\n\t}\n\n\t/**\n\t * Get the y-size of the image.\n\t *\n\t * @return {number} The y-size.\n\t */\n\tget_ysize()/*: number */ {\n\t\treturn this.ysize;\n\t}\n\n\t/**\n\t * Get the x-size of the image.\n\t * @return {number} The x-size.\n\t */\n\tget_xsize()/*: number */ {\n\t\treturn this.xsize;\n\t}\n\n\t/**\n\t * Get the aspect ratio.\n\t * @return {number} The ratio.\n\t */\n\tget_ratio()/*: number */ {\n\t\treturn this.ratio;\n\t}\n}\n\n\nexport const Ratio = {\n\tXSIZE_SEPARATE,\n\tXSIZE_IS_YSIZE,\n\tXSIZE_RATIO_12X10,\n\tXSIZE_RATIO_4X3,\n\tXSIZE_RATIO_3X2,\n\tXSIZE_RATIO_16X9,\n\tXSIZE_RATIO_5X4,\n\tXSIZE_RATIO_2X1,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream, CustomXY} from './bit-stream';\n*/\n\n/**\n * Color Space enumeration.\n *\n * @type {Object}\n */\nexport const COLOR_SPACE = {\n\tK_RGB: 0,\n\tK_GREY: 1,\n\tK_XYB: 2,\n\tK_UNKNOWN: 3,\n\tK_XYZ: 4,\n};\nconst ENUM_COLOR_SPACE = new Set();\n\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_RGB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_GREY);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_UNKNOWN);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYZ);\n\n/**\n * White Point enumeration.\n * @type {Object}\n */\nconst WHITE_POINT = {\n\tK_D65: 1,\n\tK_CUSTOM: 2,\n\tK_E: 10,\n\tK_DCI: 11,\n};\n\nconst ENUM_WHITE_POINT = new Set();\n\nENUM_WHITE_POINT.add(WHITE_POINT.K_D65);\nENUM_WHITE_POINT.add(WHITE_POINT.K_CUSTOM);\nENUM_WHITE_POINT.add(WHITE_POINT.K_E);\nENUM_WHITE_POINT.add(WHITE_POINT.K_DCI);\n\n/**\n * Primaries enumeration.\n * @type {Object}\n */\nconst PRIMARIES = {\n\tK_SRGB: 1,\n\tK_CUSTOM: 2,\n\tK_2100: 9,\n\tK_P3: 11,\n};\nconst ENUM_PRIMARIES = new Set();\n\nENUM_PRIMARIES.add(PRIMARIES.K_SRGB);\nENUM_PRIMARIES.add(PRIMARIES.K_CUSTOM);\nENUM_PRIMARIES.add(PRIMARIES.K_2100);\nENUM_PRIMARIES.add(PRIMARIES.K_P3);\n\n/**\n * Transfer function enumeration.\n * @type {Object}\n */\nconst TRANSFER_FUNCTION = {\n\tK_709: 1,\n\tK_UNKNOWN: 2,\n\tK_LINEAR: 8,\n\tK_SRGB: 13,\n\tK_PQ: 16,\n\tK_DCI: 17,\n\tK_HLG: 18,\n};\nconst ENUM_TRANSFER_FUNCTION = new Set();\n\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_709);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_UNKNOWN);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_LINEAR);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_SRGB);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_PQ);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_DCI);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_HLG);\n\n\n/**\n * Rendering intent enumeration.\n * @type {Object}\n */\nconst RENDERING_INTENT = {\n\tK_PERCEPTUAL: 0,\n\tK_RELATIVE: 1,\n\tK_SATURATION: 2,\n\tK_ABSOLUTE: 3,\n};\nconst ENUM_RENDERING_INTENT = new Set();\n\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_PERCEPTUAL);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_RELATIVE);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_SATURATION);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_ABSOLUTE);\n\n/**\n * The JXL color encoding header.\n */\nexport class ColorEncoding {\n\t/*::\n\treceived_icc: boolean;\n\topaque_icc: boolean;\n\tcolor_space: number;\n\twhite_point: number;\n\twhite: CustomXY;\n\tprimaries: number;\n\tred: CustomXY | null;\n\tgreen: CustomXY | null;\n\tblue: CustomXY | null;\n\thave_gamma: boolean;\n\tgamma: number;\n\ttransfer_function: number;\n\trendering_intent: number;\n\t*/\n\n\t/**\n\t * Construct a new ColorEncoding.\n\t *\n\t * @param  {BitStream} [stream] The bit stream to read the encoding from\n\t */\n\tconstructor(stream/*: ?BitStream */) {\n\t\tthis.received_icc = false;\n\t\tthis.opaque_icc = false;\n\t\tthis.color_space = COLOR_SPACE.K_RGB;\n\t\tthis.white_point = WHITE_POINT.K_D65;\n\t\tthis.primaries = PRIMARIES.K_SRGB;\n\t\tthis.have_gamma = false;\n\t\tthis.gamma = 0;\n\t\tthis.transfer_function = TRANSFER_FUNCTION.K_SRGB;\n\t\tthis.rendering_intent = RENDERING_INTENT.K_RELATIVE;\n\n\t\tif (stream) {\n\t\t\tconst all_default = stream.read_boolean();\n\n\t\t\tif (!all_default) {\n\t\t\t\tthis.received_icc = stream.read_boolean();\n\n\t\t\t\tif (this.received_icc) {\n\t\t\t\t\tthis.opaque_icc = stream.read_boolean();\n\t\t\t\t} else {\n\t\t\t\t\tthis.opaque_icc = false;\n\t\t\t\t}\n\n\t\t\t\tconst use_desc = !all_default && !this.opaque_icc;\n\n\t\t\t\tif (use_desc) {\n\t\t\t\t\tthis.color_space = stream.read_enum(ENUM_COLOR_SPACE);\n\n\t\t\t\t\tconst not_xy = this.color_space !== COLOR_SPACE.K_XYB && this.color_space !== COLOR_SPACE.K_XYZ;\n\n\t\t\t\t\tif (not_xy) {\n\t\t\t\t\t\tthis.white_point = stream.read_enum(ENUM_WHITE_POINT);\n\n\t\t\t\t\t\tif (this.white_point === WHITE_POINT.K_CUSTOM) {\n\t\t\t\t\t\t\tthis.white = stream.read_customxy();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.primaries = stream.read_enum(ENUM_PRIMARIES);\n\n\t\t\t\t\t\t\tif (this.primaries === PRIMARIES.K_CUSTOM) {\n\t\t\t\t\t\t\t\tthis.red = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.green = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.blue = stream.read_customxy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.have_gamma = stream.read_boolean();\n\n\t\t\t\t\t\tif (this.have_gamma) {\n\t\t\t\t\t\t\tthis.gamma = stream.read_bits(24);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.transfer_function = stream.read_enum(ENUM_TRANSFER_FUNCTION);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.rendering_intent = stream.read_enum(ENUM_RENDERING_INTENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nimport {U32} from './bit-stream.js';\nimport {ColorEncoding} from './color-encoding.js';\n\n/*::\nimport type {ImageMetadata2} from './image-metadata2.js';\n*/\n\n/**\n * The JXL image metadata header.\n */\nexport class ImageMetadata {\n\t/*::\n\thave_icc: boolean;\n\tbits_per_sample: number;\n\tcolor_encoding: ColorEncoding | null;\n\talpha_bits: number;\n\ttarget_nits: number;\n\tm2: ImageMetadata2 | null;\n\t*/\n\n\t/**\n\t * Construct a new ImageMetadata.\n\t *\n\t * @param  {BitStream} stream The bit stream to read the ImageMetadata from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tconst all_default = stream.read_boolean();\n\n\t\tif (!all_default) {\n\t\t\tthis.have_icc = stream.read_boolean();\n\t\t\tthis.bits_per_sample = stream.read_u32(\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.VAL, 32],\n\t\t\t\t[U32.BITS, 5],\n\t\t\t);\n\t\t\tthis.color_encoding = new ColorEncoding(stream);\n\t\t\tthis.alpha_bits = stream.read_u32(\n\t\t\t\t[U32.VAL, 0],\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.BITS, 4],\n\t\t\t);\n\t\t\tthis.target_nits = stream.read_u32(\n\t\t\t\t[U32.VAL, 5],\n\t\t\t\t[U32.VAL, 20],\n\t\t\t\t[U32.VAL, 80],\n\t\t\t\t[U32.BITS_OFFSET, 10, 1],\n\t\t\t);\n\t\t\tthis.m2 = null;\n\t\t} else {\n\t\t\tthis.have_icc = false;\n\t\t\tthis.bits_per_sample = 8;\n\t\t\tthis.color_encoding = new ColorEncoding();\n\t\t\tthis.alpha_bits = 0;\n\t\t\tthis.target_nits = 5 * 50;\n\t\t\tthis.m2 = null;\n\t\t}\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nimport {/* U32, */ BitStream} from './jxl/bit-stream.js';\nimport {SizeHeader} from './jxl/size-header.js';\nimport {ImageMetadata} from './jxl/image-metadata.js';\nimport {COLOR_SPACE} from './jxl/color-encoding.js';\n\n// const CONTAINER_HEADER_SIZE = 48;\n// const MAX_CODESTREAM_BASIC_INFO_SIZE = 50;\n// const MAX_BASIC_INFO_SIZE = CONTAINER_HEADER_SIZE + MAX_CODESTREAM_BASIC_INFO_SIZE;\n\n// https://gitlab.com/wg1/jpeg-xl/-/blob/master/lib/jxl/decode.cc\n// https://arxiv.org/ftp/arxiv/papers/1908/1908.03565.pdf\n\n// signature: Signature\n// size: SizeHeader\n// metadata: ImageMetadata\n\n/**\n * A JPEG XL info provider.\n */\nexport class JXLInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== 0x00;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\tconst size_header = new SizeHeader(bit_stream);\n\n\t\treturn {\n\t\t\twidth: size_header.get_xsize(),\n\t\t\theight: size_header.get_ysize(),\n\t\t\tframes: 1, // TODO: read this from ImageMetadata2\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\t// const size_header = new SizeHeader(bit_stream);\n\t\tconst image_metadata = new ImageMetadata(bit_stream);\n\t\tconst color_encoding = image_metadata.color_encoding;\n\n\t\tconst format = new PixelFormat();\n\n\t\tif (color_encoding) {\n\t\t\tif (color_encoding.color_space === COLOR_SPACE.K_GREY) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_RGB) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYZ) {\n\t\t\t\tformat.color_space = ColorSpace.XYZ;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYB) {\n\t\t\t\tformat.color_space = ColorSpace.XYB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat(color_encoding);\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JXLInfoProvider} from '../image/jxl-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass JXLIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ff0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jxl',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jxl',\n\t\t];\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JXLInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JXLIdentifier);\n","// This is what I percieve to be the ISOBMFF format. This is reverse engineered\n// from several files of different types.\n\nconst MAX_BLOCKS = 2048;\n\n\n// Root Block Tags\n//\n// MP4\n// ---\n// ftyp\n// free\n// mdat\n// moov\n//\n// AVIF\n// ----\n// ftyp\n// meta\n// mdat\n//\n// HEIC\n// ----\n// ftyp\n// meta\n// mdat\n\n\n/** @typedef {ISOBMFFAtom | ISOBMFFBlock} BlockOrAtom */\n\n/**\n * This is a block read from an ISOBMFF encoded file.\n */\nexport class ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFFBlock.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t */\n\tconstructor(length/*: number */, tag/*: string */) {\n\t\tthis.length = length;\n\t\tthis.tag = tag;\n\t}\n\n\t/**\n\t * Read a block from a buffer.\n\t * @param  {Buffer} buffer  The buffer object to read from.\n\t * @param  {number} offset  The offset to the beginning of the block.\n\t * @return {ISOBMFFAtom}   The block that was read.\n\t */\n\tstatic read(buffer/*: Buffer*/, offset/*: number */) {\n\t\tlet block;\n\t\tconst length = buffer.readUInt32BE(offset);\n\n\t\tif (length) {\n\t\t\tconst tag = buffer.toString('ascii', offset + 4, offset + 8);\n\t\t\tconst content = buffer.subarray(offset + 8, offset + length);\n\n\t\t\tif (tag in BLOCK_TYPES) {\n\t\t\t\tblock = new BLOCK_TYPES[tag](length, tag, content);\n\t\t\t} else {\n\t\t\t\tblock = new UnknownAtom(length, tag, content);\n\t\t\t}\n\t\t} else {\n\t\t\tblock = new NullAtom();\n\t\t}\n\n\t\treturn block;\n\t}\n}\n\n/**\n * A ISO BMFF Atom that can contains other Blocks or Atoms.\n */\nclass ISOBMFFBlock extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFF block\n\t * @param  {number} length  The length of the block.\n\t * @param  {string} tag     The tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t * @param  {number} offset  The offset to the beginning of the container.\n\t */\n\tconstructor(length, tag, buffer, offset = 0) {\n\t\tsuper(length, tag);\n\n\t\tthis._buffer = buffer;\n\t\tthis._offset = offset;\n\t\tthis._children = null;\n\t}\n\n\t/**\n\t * Lazy load the children.\n\t * @return {{string: BlockOrAtom}} The children of this block.\n\t */\n\tget children() {\n\t\tconst buffer = this._buffer;\n\t\tconst offset = this._offset;\n\n\t\tif (!this._children) {\n\t\t\tthis._children = {};\n\n\t\t\tfor (const block of this.readBlocks(buffer, offset)) {\n\t\t\t\t// Only take the first block for a particular tag to prevent\n\t\t\t\t// appending data to overwrite content in the file. Which might be\n\t\t\t\t// a security issue.\n\t\t\t\t//\n\t\t\t\t// Also skip null blocks.\n\t\t\t\tif (block.tag !== null && !this._children[block.tag]) {\n\t\t\t\t\tthis._children[block.tag] = block;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._children;\n\t}\n\n\t/**\n\t * Read all of the blocks from this buffer starting at offset.\n\t *\n\t * @param  {Buffer} buffer The buffer object to read from\n\t * @param  {number} offset The offset to start reading from.\n\t * @yields {ISOBMFFBlock} for each block in the buffer.\n\t */\n\t* readBlocks(buffer, offset) {\n\t\tlet bytesProcessed = 0;\n\t\tlet blocksTillMax = MAX_BLOCKS;\n\n\t\twhile (bytesProcessed + offset < buffer.length && blocksTillMax) {\n\t\t\tconst block = ISOBMFFAtom.read(buffer, offset + bytesProcessed);\n\t\t\tbytesProcessed += block.length;\n\t\t\tblocksTillMax--;\n\n\t\t\tyield block;\n\t\t}\n\t}\n}\n\n/**\n * A ISO BMFF block for an unidentified block.\n */\nclass UnknownAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Unknown block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.content = content;\n\t}\n}\n\n/**\n * A null atom for atoms that have zero length.\n */\nclass NullAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a null atom.\n\t */\n\tconstructor() {\n\t\tsuper(4, null);\n\t}\n}\n\n/**\n * This is the root block for all ISOBMFF block, The whole file.\n */\nexport class RootBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new root block.\n\t * @param  {Buffer} buffer The buffer that contains the file.\n\t */\n\tconstructor(buffer) {\n\t\tsuper(buffer.length, null, buffer);\n\t}\n}\n\n/**\n * A ISO BMFF block for an ftyp block.\n * ISO\n */\nclass FtypAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Ftyp block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.majorBrand = this.readBrand(0, content);\n\t\tthis.minorVersion = content.readUInt32BE(4);\n\t\tthis.compatibleBrands = [];\n\n\t\tconst numberOfCompatBrands = (length - 16) / 4;\n\n\t\tfor (let i = 0; i < numberOfCompatBrands; i++) {\n\t\t\tthis.compatibleBrands.push(this.readBrand((i * 4) + 8, content));\n\t\t}\n\t}\n\n\t/**\n\t * Read a brand from a block.\n\t * @param  {number} offset The offset to start reading at\n\t * @param  {Buffer} buffer The buffer to read from\n\t * @return {string}        The brand.\n\t */\n\treadBrand(offset, buffer) {\n\t\treturn buffer.subarray(offset, offset + 4).toString('ascii');\n\t}\n}\n\n/**\n * The ISPE atom. Contains the image width and image height.\n */\nclass ISPEAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ispe block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\t\tthis.unknown = content.readUInt32BE(0);\n\t\tthis.width = content.readUInt32BE(4);\n\t\tthis.height = content.readUInt32BE(8);\n\t}\n}\n\n/**\n * The PIXI atom. Contains the Pixel format.\n */\nclass PIXIAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new pixi block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer);\n\n\t\tconst UNKNOWN_BITS = 4;\n\n\t\tthis.unknown = buffer.readUInt32BE(0);\n\t\tthis.channels = buffer.readUInt8(UNKNOWN_BITS);\n\t\tthis.bitsPerChannel = [];\n\n\t\tfor (let i = 0; i < this.channels; i++) {\n\t\t\tthis.bitsPerChannel.push(buffer.readUInt8(UNKNOWN_BITS + 1));\n\t\t}\n\t}\n}\n\n\n/**\n * A 'iinf' block.\n */\nclass IINFBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new IINFBlock.\n\t * @param  {number} length The length of the block\n\t * @param  {string} tag    The block tag\n\t * @param  {Buffer} buffer The buffer that contains the block content\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer, 6);\n\t}\n}\n\n\nconst BLOCK_TYPES = {\n\t'ftyp': FtypAtom,\n\n\t// HEIC/AVIF\n\t'meta': ISOBMFFBlock,\n\t'iprp': ISOBMFFBlock,\n\t'iinf': IINFBlock,\n\t'ipco': ISOBMFFBlock,\n\t'ispe': ISPEAtom,\n\t'pixi': PIXIAtom,\n\t// 'colr': COLRAtom, // Color Profile\n};\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\nimport {RootBlock} from '../image/isobmff/isobmff.js';\n\n\n/**\n * A AVIF info provider.\n */\nexport class AVIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible AVIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 333;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\t// TODO: implement\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst ispeAtom = root.children.meta.children.iprp.children.ipco.children.ispe;\n\n\t\treturn {\n\t\t\twidth: ispeAtom.width,\n\t\t\theight: ispeAtom.height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst format = new PixelFormat();\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tconst pixi = root.children.meta.children.iprp.children.ipco.children.pixi;\n\n\t\t// console.log(root.children.meta.children.iprp.children.ipco.children);\n\n\t\tif (pixi) {\n\t\t\tconst channels = pixi.channels;\n\n\t\t\tif (channels === 1) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (channels === 3) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t\t}\n\t\t} else {\n\t\t\t// If there is no 'pixi' atom assume RGB. I don't know if this is\n\t\t\t// the correct way of handling this.\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {AVIFInfoProvider} from '../image/avif-info.js';\n\nconst FTYP_START = 4;\nconst FTYPE_LENGTH = 8;\n\n/**\n * An image identifier that identifies ICO images.\n */\nclass AVIFIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > (FTYP_START + FTYPE_LENGTH);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\tconst ftyp = buffer.subarray(FTYP_START, FTYP_START + FTYPE_LENGTH).toString('ascii');\n\n\t\treturn ftyp === 'ftypavif' || ftyp === 'ftypheic';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.avif',\n\t\t\t'.heif',\n\t\t\t'.heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/avif',\n\t\t\t'image/heif',\n\t\t\t'image/heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn AVIFInfoProvider;\n\t}\n}\n\nImageIdentifier.register(AVIFIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies BMP images.\n *\n * https://en.wikipedia.org/wiki/BMP_file_format\n */\nclass BMPIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('424D', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.bmp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/bmp',\n\t\t\t'image/x-bmp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(BMPIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies PSD images.\n */\nclass PSDIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('38425053', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.psd',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/photoshop',\n\t\t\t'image/x-photoshop',\n\t\t\t'image/psd',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(PSDIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nconst FIRST_BYTE = 0;\nconst ICO_MAGIC = 1;\nconst CUR_MAGIC = 2;\nconst MINIMUM_SIZE = 4; // 4 == size of FIRST_BYTE + size of *_MAGIC\n\n/**\n * An image identifier that identifies ICO images.\n */\nclass IcoIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\t// ico: 0000 0001\n\t\t// cur: 0000 0002\n\t\tconst first_magic = buffer.readUInt16LE(0);\n\t\tconst type_magic = buffer.readUInt16LE(2);\n\n\t\treturn first_magic === FIRST_BYTE &&\n\t\t\t(type_magic === ICO_MAGIC || type_magic === CUR_MAGIC);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.ico',\n\t\t\t'.cur',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/x-icon',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(IcoIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies TIFF images.\n */\nclass TIFFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from([0x49, 0x49, 0x2A, 0x00]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.tif',\n\t\t\t'.tiff',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/tiff',\n\t\t\t'image/tiff-fx',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(TIFFIdentifier);\n","/* @flow */\n'use strict';\n\nimport {ImageIdentifier} from '../ident.js';\nconst RIFF_TAG = 0x52494646;\nconst MINIMUM_SIZE = 12; // 12 == size of RIFF_TAG + skipped bytes + size of this.type_tag\n\n/**\n * An image identifier that identifies RIFF based files.\n */\nexport class RIFFIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the type tag of this type of file.\n\t */\n\tget_type_tag()/*: number */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst riff_magic = buffer.readUInt32BE(0);\n\t\tconst type_magic = buffer.readUInt32BE(8);\n\n\t\treturn riff_magic === RIFF_TAG && type_magic === this.get_type_tag();\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport {ImageIdentifier} from '../ident.js';\nimport {RIFFIdentifier} from './riff-ident.js';\nconst WEBP_TYPE_TAG = 0x57454250;\n\n/**\n * An image identifier that identifies WebP images.\n */\nclass WebPIdentifier extends RIFFIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_type_tag() {\n\t\treturn WEBP_TYPE_TAG;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.webp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/webp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(WebPIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that can identify XML files.\n */\nexport class XMLIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the name of the root element of this type of XML file.\n\t */\n\tget_root_element()/*: string */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\t// Only check the first part of the file.\n\t\tconst small_buffer = buffer.slice(0, 512).toString().toLowerCase();\n\n\t\treturn small_buffer.includes('<' + this.get_root_element());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn true;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies SVG images.\n */\nclass SVGIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'svg';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.svg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/svg+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(SVGIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies HTML files.\n */\nclass HTMLIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'html';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.html',\n\t\t\t'.htm',\n\t\t\t'.xhtml',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'text/html',\n\t\t\t'application/xhtml+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(HTMLIdentifier);\n","/* @flow */\n\nimport {WorkHandler} from './work-handler.js';\nimport {Hasher} from './hasher.js';\nimport {ColorSpace} from './pixel-format.js';\nimport {ROOT_LOGGER} from './logger.js';\nimport {EventEmitter} from 'events';\nimport {ImageIdentifier} from './ident.js';\n\n/*::\nimport type { Dimensions, ImageInfo } from './image-info';\nimport type Finder from './finder';\nimport type {FileDescriptor} from './finder';\nimport type {Log} from './logger';\n\nexport type LinterOptions = {\n\tcolor_space: string[],\n\tduplicate: boolean,\n\tbytes_per_pixel: number,\n\tbyte_savings: number,\n\tmismatch: boolean,\n\thelp: boolean,\n\tversion: boolean\n};\n */\n\nimport './ident/png-ident.js';\nimport './ident/gif-ident.js';\nimport './ident/jpg-ident.js';\nimport './ident/jxl-ident.js';\nimport './ident/avif-ident.js';\n\n// Identify only\nimport './ident/bmp-ident.js';\nimport './ident/psd-ident.js';\nimport './ident/ico-ident.js';\nimport './ident/tiff-ident.js';\nimport './ident/webp-ident.js';\nimport './ident/svg-ident.js';\nimport './ident/html-ident.js';\n\n/**\n * An unavoidable linter error that prevents the linter from continuing. This\n * is mainly marker class so we don't have to print the stack trace.\n */\nclass LinterError extends Error {\n\n}\n\n/**\n * The image linter.\n */\nexport class Linter extends EventEmitter {\n\t/*::\n\tfinder: Finder;\n\tdisable_color: boolean;\n\t */\n\n\t/**\n\t * Construct a new Linter\n\t * @param  {Finder} finder The finder to use to locate the images.\n\t */\n\tconstructor(finder/*: Finder */) {\n\t\tsuper();\n\n\t\tthis.finder = finder;\n\t\tthis.disable_color = false;\n\t}\n\n\t/**\n\t * Calculate the optimal size of the image.\n\t *\n\t * @param  {Dimensions} dims   The dimensions of the image.\n\t * @param  {number}     bpp    The bytes per pixel of the image.\n\t * @return {number}            The optimial size of the image.\n\t */\n\tcalculate_optimial_size(dims/*: Dimensions */, bpp/*: number */)/*: number */ {\n\t\treturn ((dims.width * dims.height * dims.frames) * bpp);\n\t}\n\n\t/**\n\t * Construct a description of an image file.\n\t *\n\t * @param  {Dimensions} dims    The dimensions of the image.\n\t * @return {string}             The description of the image.\n\t */\n\tdescribe_file(dims/*: Dimensions */)/*: string */ {\n\t\treturn 'File properties: ' + dims.width + 'x' + dims.height + (dims.frames !== 1 ? ', ' + dims.frames + ' frames' : '');\n\t}\n\n\t/**\n\t * Get the information for the file.\n\t *\n\t * @param  {FileDescriptor} file    The file descriptor.\n\t * @param  {Buffer} buffer          The file buffer.\n\t * @param  {Log} logger             The logger for printing errors.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Promise<ImageInfo>}     The image info.\n\t */\n\tget_info(\n\t\tfile/*: FileDescriptor */,\n\t\tbuffer/*: Buffer */,\n\t\tlogger/*: Log */,\n\t\toptions/*: LinterOptions */)/*: Promise<ImageInfo> */ {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst extension = file.extension.toLowerCase();\n\t\t\tlet identifier = ImageIdentifier.from_extension(extension);\n\t\t\tlet file_buffer/*: ?Buffer */ = null;\n\t\t\tlet is_of_file_type = false;\n\n\t\t\tif (buffer instanceof Buffer) {\n\t\t\t\tfile_buffer = buffer;\n\t\t\t} else {\n\t\t\t\treject(new LinterError('Image buffer is missing, this is a bug.'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tis_of_file_type = identifier.is_of_file_type(file_buffer);\n\t\t\t} else {\n\t\t\t\tlogger.warn('There is no information provider for \"' + extension + '\" files.');\n\t\t\t}\n\n\t\t\t// Attenpt to find the correct file type.\n\t\t\tif (!identifier || !is_of_file_type) {\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.info('This file is not what it seems, attempting brute force discovery of file type.');\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info('This file is not what it seems.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = null;\n\n\t\t\t\tfor (const candidate of ImageIdentifier.all_providers()) {\n\t\t\t\t\tif (candidate.can_validate(file_buffer) && candidate.is_of_file_type(file_buffer)) {\n\t\t\t\t\t\tidentifier = candidate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!is_of_file_type) {\n\t\t\t\tlet found_extension = 'unknown';\n\n\t\t\t\tif (identifier) {\n\t\t\t\t\tfound_extension = identifier.get_extension();\n\t\t\t\t}\n\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.warn('There is a mismatch between the file extension (' + extension + ') and the file contents (' + found_extension + ')');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tconst ProviderClass = identifier.get_info_provider();\n\n\t\t\t\tif (!ProviderClass) {\n\t\t\t\t\treject(new LinterError('Unsupported file type'));\n\t\t\t\t} else {\n\t\t\t\t\tconst provider = new ProviderClass();\n\n\t\t\t\t\tresolve(provider.get_info(file_buffer));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treject(new LinterError('Unknown file type'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Run the linter\n\t * @param  {string[]} folder        A list of folders to look for images in.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Linter}                 The linter for chaining.\n\t */\n\tlint(folder/*: string[] */, options/*: LinterOptions */)/*: Linter */ {\n\t\tconst handler = new WorkHandler();\n\t\tconst hasher = new Hasher();\n\t\tlet allowed_color_spaces/*: Set<ColorSpace> | null */ = null;\n\n\t\t// Prepare the allowed color spaces.\n\t\tif (options.color_space) {\n\t\t\tconst spaces = options.color_space;\n\n\t\t\tallowed_color_spaces = new Set();\n\n\t\t\tfor (let space of spaces) {\n\t\t\t\tspace = ColorSpace.from(space);\n\n\t\t\t\tif (space) {\n\t\t\t\t\tallowed_color_spaces.add(space);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thandler.on('next', (file/*: FileDescriptor */, done/*: () => void */) => {\n\t\t\tconst logger = ROOT_LOGGER.get_logger(file.path);\n\n\t\t\t/**\n\t\t\t * Handler an error from the loader\n\t\t\t * @param  {Error} err An error.\n\t\t\t */\n\t\t\tfunction error_handler(err/*: Error */) {\n\t\t\t\tif (err instanceof LinterError) {\n\t\t\t\t\t// A there was a problem with the file that prevents linting\n\t\t\t\t\t// from continuing.\n\t\t\t\t\tlogger.error(err.message);\n\t\t\t\t} else if (err.stack) {\n\t\t\t\t\tlogger.error(err.message + ': ' + err.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log(file.path);\n\n\t\t\tfile.loader.load()\n\t\t\t\t.then((buffer) => {\n\t\t\t\t\t// A file could still be loading when a fatal error occurs\n\t\t\t\t\t// so check the status of the handler before continuing.\n\t\t\t\t\tif (handler.is_stopped()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for empty files and exit early to prevent unnecessary work.\n\t\t\t\t\tif (buffer.length === 0) {\n\t\t\t\t\t\tthrow new LinterError('This is an empty file, further analysis is not possible.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.duplicate === true) {\n\t\t\t\t\t\tconst found = hasher.contains(file.path, buffer);\n\n\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\tlogger.warn('This file is a duplicate of: ' + found);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.get_info(file, buffer, logger, options);\n\t\t\t\t})\n\t\t\t\t.then((info/*: ImageInfo */) => {\n\t\t\t\t\t// We could still be parsing a file when a fatal error\n\t\t\t\t\t// occurs so check the status of the handler before continuing.\n\t\t\t\t\tif (handler.is_stopped()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!info.truncated) {\n\t\t\t\t\t\tconst color_space = info.pixel_format.color_space;\n\t\t\t\t\t\tconst min_bpp = options.bytes_per_pixel;\n\t\t\t\t\t\tconst min_savings = options.byte_savings;\n\t\t\t\t\t\tconst size_difference = info.size - this.calculate_optimial_size(info.dimensions, min_bpp);\n\n\t\t\t\t\t\tlogger.info(this.describe_file(info.dimensions));\n\n\t\t\t\t\t\tif (info.bytes_per_pixel >= min_bpp && (size_difference > min_savings)) {\n\t\t\t\t\t\t\tlogger.warn('The bytes per pixel (' + info.bytes_per_pixel.toFixed(2) + ') exceeds the minimum (' + min_bpp + ').');\n\t\t\t\t\t\t\tlogger.info('You can acheive a minimum savings of ' + size_difference + ' bytes by meeting this threshold.');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (allowed_color_spaces) {\n\t\t\t\t\t\t\tif (color_space.name === 'UNK') {\n\t\t\t\t\t\t\t\tconst channels = color_space.channels > 0 ? color_space.channels : 'an unknown number of';\n\n\t\t\t\t\t\t\t\tlogger.error(`This image has an unknown color space ${ color_space.getUnkFormat() } with ${ channels } channels.`);\n\t\t\t\t\t\t\t} else if (allowed_color_spaces.size && !allowed_color_spaces.has(color_space)) {\n\t\t\t\t\t\t\t\t// console.log('Color Space', color_space);\n\t\t\t\t\t\t\t\tlogger.warn(`The color space of this image is ${ color_space.name }. It must be one of ${ options.color_space }.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error('This image is truncated, further analysis is not possible.');\n\t\t\t\t\t}\n\t\t\t\t}, error_handler)\n\t\t\t\t.catch(error_handler)\n\t\t\t\t.finally(() => {\n\t\t\t\t\tif (options.max_warnings >= 0 && ROOT_LOGGER.get_warning_count() > options.max_warnings) {\n\t\t\t\t\t\tif (!handler.is_stopped()) {\n\t\t\t\t\t\t\tlogger.error(`Too many warnings. A maximum of ${options.max_warnings} warnings are allowed.`);\n\t\t\t\t\t\t\thandler.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit('file.completed', logger);\n\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t});\n\n\t\thandler.on('end', () => {\n\t\t\tthis.emit('linter.completed');\n\t\t});\n\n\t\thandler.start(this.finder.get_files(folder));\n\n\t\treturn this;\n\t}\n}\n","const MINIMUM_BYTES_PER_PIXEL = 3;\nconst MINIMUM_BYTE_SAVINGS = 500;\nconst DEFAULT_COLOR_SPACES = 'G,RGB';\n\nexport const defaults = {\n\t'bytes_per_pixel': MINIMUM_BYTES_PER_PIXEL,\n\t'byte_savings': MINIMUM_BYTE_SAVINGS,\n\t'color_space': DEFAULT_COLOR_SPACES,\n\t'mismatch': true,\n\t'duplicate': true,\n\t'max_warnings': -1,\n};\n","/* @flow */\nimport {Loader} from '../loader.js';\n\n/**\n * Load files from a web browser Blob object.\n */\nexport class BlobLoader extends Loader {\n\t/*::\n\t_blob: Blob\n\t*/\n\n\t/**\n\t * Construct a new BlobLoader.\n\t *\n\t * @param  {Blob} blob  A web browser Blob object\n\t */\n\tconstructor(blob/*: Blob */) {\n\t\tsuper('');\n\n\t\tthis._blob = blob;\n\t}\n\n\t/**\n\t * Load the file.\n\t * @return {Promise<Buffer>}  The loaded file.\n\t */\n\tasync load()/*: Promise<Buffer> */ {\n\t\tconst arrbuf = await this._blob.arrayBuffer();\n\n\t\treturn Buffer.from(arrbuf);\n\t}\n}\n","/* @flow */\n\n/**\n * A base class for loader instances.\n */\nexport class Loader {\n\t/*::\n\t_path: string;\n\t*/\n\n\t/**\n\t * Construct a new loader instance.\n\t *\n\t * @param  {string} path The path to use for loading files.\n\t */\n\tconstructor(path/*: string */) {\n\t\tthis._path = path;\n\t}\n\n\t/**\n\t * The path.\n\t * @return {string} The path.\n\t */\n\tgetPath()/*: string */ {\n\t\treturn this._path;\n\t}\n\n\t/**\n\t * Load the file at the provided path.\n\t *\n\t * @return {Promise<Buffer>}  An image file.\n\t */\n\tload()/*: Promise<Buffer> */ {\n\t\treturn Promise.reject(new Error('Not Implemented!'));\n\t}\n}\n","import { render } from \"./app.vue?vue&type=template&id=d50f6052\"\nimport script from \"./app.vue?vue&type=script&lang=js\"\nexport * from \"./app.vue?vue&type=script&lang=js\"\n\nimport \"./app.vue?vue&type=style&index=0&id=d50f6052&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport {Linter, BufferArrayFinder, ImageIdentifier} from 'image-lint';\n\nconst finder = new BufferArrayFinder(ImageIdentifier.get_all_extensions(), ImageIdentifier.get_all_mimes());\n\nexport default {\n\t'props': {\n\t\t'options': {\n\t\t\t'type': Object,\n\t\t\t'required': true,\n\t\t},\n\t\t'files': {\n\t\t\t'type': Array,\n\t\t\t'required': true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tlinter: null,\n\t\t\terror: null,\n\t\t\tresults: null,\n\t\t};\n\t},\n\t'computed': {\n\t\thas_finished() {\n\t\t\treturn this.results !== null || this.error !== null;\n\t\t},\n\t\thas_error() {\n\t\t\treturn this.error !== null;\n\t\t},\n\t\thas_results() {\n\t\t\treturn this.results !== null;\n\t\t},\n\t},\n\t'watch': {\n\t\tfiles: {\n\t\t\tasync handler(files, files_old) {\n\t\t\t\tconst options = this.options;\n\t\t\t\tconst linter = new Linter(finder);\n\t\t\t\tlet results = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tresults = await (new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst result_list = [];\n\n\t\t\t\t\t\tlinter.lint(files, options)\n\t\t\t\t\t\t\t.on('file.completed', (logger) => {\n\t\t\t\t\t\t\t\tresult_list.push(logger);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.on('linter.completed', () => {\n\t\t\t\t\t\t\t\tresolve(result_list);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.error = e;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.results = results;\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\t'methods': {\n\t\treformat_log(log) {\n\t\t\tconst log_parts = log.trim().split('\\n');\n\n\t\t\treturn log_parts.map((line) => {\n\t\t\t\treturn line.trim();\n\t\t\t}).join('\\n');\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<ul class=\"lint-results\">\n\t\t<li\n\t\t\tv-for=\"result in results\"\n\t\t\t:key=\"result.filename\"\n\t\t\tclass=\"lint-result\"\n\t\t\t:class=\"{ 'has-error': has_error, 'has-results': has_results }\"\n\t\t>\n\t\t\t<details open>\n\t\t\t\t<summary\n\t\t\t\t\tclass=\"lint-result-summary\"\n\t\t\t\t\t:class=\"{ 'lint-error': result && result.count.error, 'lint-warn': result && result.count.warn }\"\n\t\t\t\t>\n\t\t\t\t\t{{ result.filename }}\n\t\t\t\t\t<span v-if=\"has_results\"> -\n\t\t\t\t\t\t<span v-if=\"result.count.info\">\n\t\t\t\t\t\t\tInfo: {{ result.count.info }}<span v-if=\"result.count.warn || result.count.error\">, </span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if=\"result.count.warn\">\n\t\t\t\t\t\t\tWarnings: {{ result.count.warn }}<span v-if=\"result.count.error\">, </span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if=\"result.count.error\">Errors: {{ result.count.error }}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</summary>\n\t\t\t\t<!-- eslint-disable vue/no-v-html -->\n\t\t\t\t<output\n\t\t\t\t\tv-if=\"has_results\"\n\t\t\t\t\tclass=\"lint-result-output\"\n\t\t\t\t\tv-html=\"reformat_log(result.log)\"\n\t\t\t\t/>\n\t\t\t\t<!-- eslint-enable -->\n\t\t\t</details>\n\t\t</li>\n\t</ul>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.lint-results {\n\tlist-style: none;\n\tpadding: 0;\n}\n\n.lint-result {\n\tmargin: 15px 0px;\n\tbackground: var(--color-layer-bg);\n\tpadding-bottom: 1px; /* Prevent margin-collapse */\n\tborder-radius: 8px;\n\toverflow: hidden;\n}\n\n.lint-result .lint-result-summary {\n\tbackground: var(--color-status-unknown);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result.has-results .lint-result-summary {\n\tbackground: var(--color-status-good);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result .lint-result-summary.lint-warn {\n\tbackground: var(--color-status-warn);\n}\n\n.lint-result .lint-result-summary.lint-error {\n\tbackground: var(--color-status-failure);\n}\n\n.lint-result.has-error .lint-result-summary {\n\tbackground: var(--color-status-error);\n}\n\n.lint-result.has-error .upload-progress,\n.lint-result.has-results .upload-progress {\n\tdisplay: none;\n}\n\n.lint-result-output {\n\tfont-family: monospace;\n\twhite-space: pre-wrap;\n\tmargin: 10px 10px 10px 18px;\n\tdisplay: block;\n}\n</style>\n","/* @flow */\n\nimport {Finder} from '../finder.js';\nimport {BlobLoader} from '../loader/blob.js';\nimport path from 'path';\n\n/*::\nimport type { FileDescriptor } from '../finder';\n */\n\n/**\n * Finds files in a Browser Blob object.\n */\nexport class BufferArrayFinder extends Finder {\n\t/*::\n\tfilename: string;\n\tpath: string;\n\tbuffer: Buffer;\n\t*/\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_files(initial_files/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\treturn Promise.resolve(this._search.bind(this, initial_files));\n\t}\n\n\t/**\n\t * Traverse the file system yielding any files it finds.\n\t *\n\t * @param {Blob[]} files  The initial queue items.\n\t */\n\t* _search(files/*: Blob[] */)/*: Generator<FileDescriptor, *, *> */ {\n\t\tfor (const file of files) {\n\t\t\tconst extension = path.extname(file.name);\n\n\t\t\tyield {\n\t\t\t\t'path': file.name,\n\t\t\t\t'extension': extension,\n\t\t\t\t'loader': new BlobLoader(file),\n\t\t\t};\n\t\t}\n\t}\n}\n","'use strict';\n/* @flow */\n\n\n/*::\nimport type Loader from './loader';\n\nexport interface FileDescriptor {\n\tpath: string;\n\textension: string;\n\tloader: Loader;\n}\n */\n\n/**\n * A base class for finding files in different mediums.\n */\nexport class Finder {\n\t/*::\n\textensions: string[];\n\tmimes: string[];\n\t */\n\n\t/**\n\t * Construct a new Finder\n\t * @param  {string[]} extensions The list of extensions to look for.\n\t * @param  {string[]} mimes      The list of MIME types to look for.\n\t */\n\tconstructor(extensions/*: string[] */, mimes/*: string[]*/) {\n\t\tthis.extensions = extensions;\n\t\tthis.mimes = mimes;\n\t}\n\n\t/**\n\t * Get an iterator of unresolved file descriptors.\n\t *\n\t * @abstract\n\t * @param {string[]} initial_items The initial set of items to be searched for.\n\t */\n\tget_files(initial_items/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the provided extension is an image extension (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  ext The extension to check.\n\t * @return {boolean}    True if it is an image extension, false otherwise.\n\t */\n\tis_image_extension(ext/*: string */)/*: boolean */ {\n\t\treturn this.extensions.indexOf(ext) >= 0;\n\t}\n\n\t/**\n\t * Determine if the provided MIME type is an image MIME type (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  mime The MIME type to check.\n\t * @return {boolean}     True if it is an image MIME type, false otherwise.\n\t */\n\tis_image_mime(mime/*: string */)/*: boolean */ {\n\t\treturn this.mimes.indexOf(mime) >= 0;\n\t}\n}\n","import { render } from \"./iml-image-collection.vue?vue&type=template&id=69b58ea8\"\nimport script from \"./iml-image-collection.vue?vue&type=script&lang=js\"\nexport * from \"./iml-image-collection.vue?vue&type=script&lang=js\"\n\nimport \"./iml-image-collection.vue?vue&type=style&index=0&id=69b58ea8&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nexport default {\n\t'props': {\n\t\t'modelValue': {\n\t\t\ttype: Array,\n\t\t\trequired: true,\n\t\t},\n\t},\n\t'emits': ['update:modelValue'],\n\t'methods': {\n\t\t'files': function* (dt) {\n\t\t\tif (dt.items) {\n\t\t\t\tfor (const i of dt.items) {\n\t\t\t\t\tyield i.getAsFile();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield* dt.files;\n\t\t\t}\n\t\t},\n\t\t'drop': function(e) {\n\t\t\te.preventDefault();\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\n\t\t\tconst files = Array.from(this.files(e.dataTransfer));\n\n\t\t\tthis.$emit('update:modelValue', files);\n\t\t},\n\t\t'dragenter': function() {\n\t\t\tthis.$refs.dropzone.classList.add('active');\n\t\t},\n\t\t'dragleave': function() {\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\t\t},\n\t\t'dragover': function(e) {\n\t\t\te.preventDefault();\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<div\n\t\tref=\"dropzone\"\n\t\tclass=\"drop-target\"\n\t\t@drop=\"drop\"\n\t\t@dragover=\"dragover\"\n\t\t@dragenter=\"dragenter\"\n\t\t@dragleave=\"dragleave\"\n\t>\n\t\t<slot>Drop files here</slot>\n\t</div>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.drop-target {\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n}\n\n.drop-target.empty {\n\talign-items: center;\n}\n\n.drop-target.active {\n\tborder: 2px dashed var(--color-status-good);\n}\n</style>\n","import { render } from \"./iml-dropzone.vue?vue&type=template&id=1ea58bc0\"\nimport script from \"./iml-dropzone.vue?vue&type=script&lang=js\"\nexport * from \"./iml-dropzone.vue?vue&type=script&lang=js\"\n\nimport \"./iml-dropzone.vue?vue&type=style&index=0&id=1ea58bc0&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {createApp} from 'vue';\nimport Multiselect from 'vue-multiselect';\n\nimport ImageLintApp from '../components/app.vue';\nimport ImlImageCollection from '../components/iml-image-collection.vue';\nimport ImlDropzone from '../components/iml-dropzone.vue';\n\nimport '../css/index.css';\n\n\nconst body = document.body;\nconst rootEl = document.createElement('div');\n\nbody.appendChild(rootEl);\n\ncreateApp(ImageLintApp)\n\t.component('vue-multiselect', Multiselect)\n\t.component('image-lint-app', ImageLintApp)\n\t.component('iml-image-collection', ImlImageCollection)\n\t.component('iml-dropzone', ImlDropzone)\n\t.mount(rootEl);\n"],"names":["class","WorkHandler","EventEmitter","constructor","super","this","_active_handlers","_active_processes","_done_proxy","_done","bind","_iterator","_stopped","on","_handler_available","next","done","emit","value","Error","is_stopped","start","promise","then","iterator","e","stack","console","error","name","message","catch","stop","Hasher","trie","Map","find","digest","current","depth","previous","byte","get","set","contains","path","buffer","hash","update","hashes","found_name","ColorSpace","channels","unk_format","all_names","add","getUnkFormat","static","id","space","has","format","color_space","Set","G","RGB","YCbCr","YCCK","LAB","HSV","CMYK","XYZ","XYB","PixelFormat","indexed","alpha","bit_depth","Log","filename","parent","log","_muted","count","_increment_count","type","is_printable","warn","mute","info","get_error_count","get_warning_count","get_logger","toString","warn_count","error_count","ROOT_LOGGER","ImageIdentifier","_info_provider","identify_only","get_info_provider","is_of_file_type","get_extension","get_extensions","get_mime","get_mimes","can_validate","Constructor","provider","is_identify_only","extension","_extension_registry","_all_extensions","push","mime","_mime_registry","_all_mimes","_all_providers","clear","length","MagicNumberIdentifier","get_magic","magic","buffer_magic","slice","Buffer","compare","InfoProvider","calculate_bpp","dims","size","get_overhead","width","height","frames","get_dimensions","get_pixel_format","get_info","is_truncated","truncated","dimensions","pixel_format","bytes_per_pixel","GRAYSCALE_TYPES","RGB_TYPES","ALPHA_TYPES","INDEXED_TYPES","PNGChunk","offset","readUInt32BE","header","data","crc32","verify","alloc","check","writeUInt32BE","crc","PNGInfoProvider","end_chunk","SECTION_LENGTH_WIDTH","IHDR_OFFSET","WIDTH_OFFSET","readInt8","HEIGHT_OFFSET","color_type","BIT_DEPTH_OFFSET","R","B","unkownFormat","register","from","GIFInfoProvider","next_chunk","block_length","readUInt8","get_sub_block_length","sub_block_length","size_byte","get_color_table_length","color_table_bits","Math","pow","has_color_table","get_version","frame_count","found","SETTINGS_OFFSET","block_header","readUInt16LE","JPGInfoProvider","readUInt16BE","is_sof_chunk","sof_byte","chunks","U32_MAX","IllformedStreamError","BitStream","sub_bit","current_byte","read_from_byte","bits","mask","read_bits","WORD_SIZE","leftovers","shift","start_bits","bytes","floor","read","read_boolean","read_u32","distributions","dist","read_s32","v","read_f16","bits16","sign","biased_exp","mantissa","biased_exp32","mantissa32","ArrayBuffer","Uint32Array","Float32Array","read_customxy","x","y","read_enum","enum_table","get_bits_read","SizeHeader","stream","ysize","xsize","small","ratio","get_small","get_ysize","get_xsize","get_ratio","ENUM_COLOR_SPACE","ENUM_WHITE_POINT","ENUM_PRIMARIES","ENUM_TRANSFER_FUNCTION","ENUM_RENDERING_INTENT","ColorEncoding","received_icc","opaque_icc","white_point","primaries","have_gamma","gamma","transfer_function","rendering_intent","all_default","white","red","green","blue","ImageMetadata","have_icc","bits_per_sample","color_encoding","alpha_bits","target_nits","m2","JXLInfoProvider","bit_stream","size_header","ISOBMFFAtom","tag","block","content","subarray","BLOCK_TYPES","UnknownAtom","NullAtom","ISOBMFFBlock","_buffer","_offset","_children","children","readBlocks","bytesProcessed","blocksTillMax","RootBlock","majorBrand","readBrand","minorVersion","compatibleBrands","numberOfCompatBrands","i","unknown","bitsPerChannel","UNKNOWN_BITS","AVIFInfoProvider","ispeAtom","meta","iprp","ipco","ispe","root","pixi","ftyp","FTYP_START","first_magic","type_magic","RIFFIdentifier","get_type_tag","riff_magic","XMLIdentifier","get_root_element","toLowerCase","includes","LinterError","Linter","finder","disable_color","calculate_optimial_size","bpp","describe_file","file","logger","options","Promise","resolve","reject","identifier","from_extension","file_buffer","mismatch","candidate","all_providers","found_extension","ProviderClass","lint","folder","handler","hasher","allowed_color_spaces","spaces","error_handler","err","loader","load","duplicate","min_bpp","min_savings","byte_savings","size_difference","toFixed","finally","max_warnings","get_files","defaults","BlobLoader","_path","getPath","blob","_blob","async","arrbuf","arrayBuffer","GithubButton","Object","assign","split","files","version","description","href","option","step","min","multiple","available","open","extensions","mimes","initial_items","is_image_extension","ext","indexOf","is_image_mime","initial_files","_search","get_all_extensions","get_all_mimes","Array","linter","results","has_finished","has_error","has_results","files_old","result_list","immediate","reformat_log","trim","map","line","join","result","key","required","dt","items","getAsFile","preventDefault","$refs","dropzone","classList","remove","dataTransfer","$emit","ref","drop","dragover","dragenter","dragleave","body","document","rootEl","createElement","appendChild","component","mount"],"sourceRoot":""}