{"version":3,"file":"js/main.8257b468e32e7a838a45.js","mappings":"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","sources":["webpack:///./web/components/dropzone.vue","webpack:///./web/components/dropzone.vue?f3cc","webpack:///./web/components/app.vue","webpack:///../image-lint/lib/work-handler.js","webpack:///../image-lint/lib/hasher.js","webpack:///../image-lint/lib/pixel-format.js","webpack:///../image-lint/lib/logger.js","webpack:///../image-lint/lib/ident.js","webpack:///../image-lint/lib/ident/magic-number-ident.js","webpack:///../image-lint/lib/image-info.js","webpack:///../image-lint/lib/image/png-info.js","webpack:///../image-lint/lib/ident/png-ident.js","webpack:///../image-lint/lib/image/gif-info.js","webpack:///../image-lint/lib/ident/gif-ident.js","webpack:///../image-lint/lib/image/jpg-info.js","webpack:///../image-lint/lib/ident/jpg-ident.js","webpack:///../image-lint/lib/image/jxl/bit-stream.js","webpack:///../image-lint/lib/image/jxl/size-header.js","webpack:///../image-lint/lib/image/jxl/color-encoding.js","webpack:///../image-lint/lib/image/jxl/image-metadata.js","webpack:///../image-lint/lib/image/jxl-info.js","webpack:///../image-lint/lib/ident/jxl-ident.js","webpack:///../image-lint/lib/image/isobmff/isobmff.js","webpack:///../image-lint/lib/image/avif-info.js","webpack:///../image-lint/lib/ident/avif-ident.js","webpack:///../image-lint/lib/ident/bmp-ident.js","webpack:///../image-lint/lib/ident/psd-ident.js","webpack:///../image-lint/lib/ident/ico-ident.js","webpack:///../image-lint/lib/ident/tiff-ident.js","webpack:///../image-lint/lib/ident/riff-ident.js","webpack:///../image-lint/lib/ident/webp-ident.js","webpack:///../image-lint/lib/ident/xml-ident.js","webpack:///../image-lint/lib/ident/svg-ident.js","webpack:///../image-lint/lib/ident/html-ident.js","webpack:///../image-lint/lib/linter.js","webpack:///../image-lint/lib/defaults.js","webpack:///../image-lint/lib/loader/blob.js","webpack:///../image-lint/lib/loader.js","webpack:///./web/components/app.vue?dffa","webpack:///./web/components/image-collection.vue","webpack:///../image-lint/lib/finder/buffer.js","webpack:///../image-lint/lib/finder.js","webpack:///./web/components/image-collection.vue?0564","webpack:///./web/js/index.js"],"sourcesContent":["<script>\nexport default {\n\t'props': {\n\t\t'modelValue': Array\n\t},\n\t'methods': {\n\t\t'files': function* (dt) {\n\t\t\tlet files = [];\n\n\t\t\tif (dt.items) {\n\t\t\t\tfor (let i of dt.items) {\n\t\t\t\t\tyield i.getAsFile();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield* dt.files;\n\t\t\t}\n\t\t},\n\t\t'drop': function (e) {\n\t\t\te.preventDefault();\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\n\t\t\tconst files = Array.from(this.files(e.dataTransfer));\n\n\t\t\tthis.$emit('update:modelValue', files);\n\t\t},\n\t\t'dragenter': function () {\n\t\t\tthis.$refs.dropzone.classList.add('active');\n\t\t},\n\t\t'dragleave': function () {\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\t\t},\n\t\t'dragover': function (e) {\n\t\t\te.preventDefault();\n\t\t}\n\t}\n};\t\n</script>\n\n<template>\n\t<div class=\"drop-target\" ref=\"dropzone\" @drop=\"drop\" @dragover=\"dragover\" @dragenter=\"dragenter\" @dragleave=\"dragleave\">\n\t\t<slot>Drop files here</slot>\n\t</div>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.drop-target {\n  height: 100%;\n\tdisplay: flex;\n  justify-content: center;\n}\n\n.drop-target.empty {\n\talign-items: center;\n}\n\n.drop-target.active {\n  border: 2px dashed var(--color-status-good);\n}\n</style>\n","import { render } from \"./dropzone.vue?vue&type=template&id=2f3a8d06\"\nimport script from \"./dropzone.vue?vue&type=script&lang=js\"\nexport * from \"./dropzone.vue?vue&type=script&lang=js\"\n\nimport \"./dropzone.vue?vue&type=style&index=0&id=2f3a8d06&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport {reactive} from 'vue';\nimport GithubButton from 'vue-github-button';\nimport {defaults} from 'image-lint';\n\nimport packageJson from '../../../image-lint/package.json';\n\nimport 'vue-multiselect/dist/vue-multiselect.css';\n\nexport default {\n\tcomponents: {\n\t\tGithubButton\n\t},\n\tdata() {\n\t\tconst options = Object.assign({}, defaults);\n\n\t\toptions.color_space = options.color_space.split(',');\n\n\t\treturn {\n\t\t\t'name': packageJson.name,\n\t\t\t'version': packageJson.version,\n\t\t\t'description': packageJson.description,\n\t\t\t'support': {},\n\t\t\t'available': {\n\t\t\t\t'color_space': ['G', 'RGB', 'CMYK', 'YCbCr', 'YCCK', 'LAB', 'HSV']\n\t\t\t},\n\t\t\t'option':  options,\n\t\t\t'files': []\n\t\t};\n\t},\n\t'methods': {\n\t\t'clear': function () {\n\t\t\tthis.files.length = 0;\n\t\t},\n\t}\n}\n</script>\n\n<template>\n\t<div>\n\t\t<header class=\"lint-header\">\n\t\t\t<h1 class=\"lint-title\">{{ name }}</h1>\n\t\t\t<span class=\"lint-version\">v{{ version }}</span>\n\t\t\t<h2 class=\"lint-subtitle\">{{ description }}</h2>\n\n\t\t\t<github-button class=\"github-button\" href=\"https://github.com/aaronasachimp/image-lint\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star aaronasachimp/image-lint on GitHub\">Star</github-button>\n\t\t</header>\n\t\t<form class=\"image-lint-app\">\n\t\t\t<div class=\"pane pane-options\">\n\t\t\t\t<h3 class=\"lint-options-title\">Options</h3>\n\n\t\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t\t<input type=\"checkbox\" v-model=\"option.mismatch\" />\n\t\t\t\t\tFind mismatches between file type and file extension.\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t\t<input type=\"checkbox\" v-model=\"option.duplicate\" />\n\t\t\t\t\tFind files that have been copied.\n\t\t\t\t</label>\n\t\t\t\t\n\t\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\t\tSet the maximum bytes per pixel before giving a warning.\n\t\t\t\t\t<input type=\"number\" v-model=\"option.bytes_per_pixel\" step=\"0.1\" min=\"0\" />\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\t\tSet the minimum byte savings before giving a warning.\n\t\t\t\t\t<input type=\"number\" v-model=\"option.byte_savings\" min=\"0\" />\n\t\t\t\t</label>\n\n\t\t\t\t<label class=\"lint-option lint-option-array\">\n\t\t\t\t\tSet the allowed color spaces.\n\n\t\t\t\t\t<vue-multiselect v-model=\"option.color_space\" :multiple=\"true\" :options=\"available.color_space\" />\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<div class=\"pane pane-dropzone\">\n\t\t\t\t<dropzone v-model=\"files\" :class=\"{ empty: files.length == 0 }\">\n\t\t\t\t\t<div v-if=\"files.length\">\n\t\t\t\t\t\t<button type=\"button\" v-on:click=\"clear\">Clear Results</button>\n\t\t\t\t\t\t<image-collection :options=\"option\" :files=\"files\"></image-collection>\n\t\t\t\t\t</div>\n\t\t\t\t</dropzone>\n\t\t\t</div>\n\t\t</form>\n\t</div>\n</template>\n\n<style>\n\n@import \"../css/variables.css\";\n\n.image-lint-app {\n\tdisplay: grid;\n\tgrid-template-columns: 16em 1fr;\n}\n\n.pane {\n\tpadding: 20px;\n}\n\n.pane-options {\n\tbackground: var(--color-layer-bg);\n\tmax-width: 450px;\n}\n\n.lint-header {\n\tbackground: var(--color-status-good);\n\tcolor: var(--color-status-good-contrast);\n\tpadding: 20px;\n}\n\n.lint-header {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr auto;\n\tgrid-template-rows: auto 1fr;\n\tgrid-template-areas:\n\t\t\"title   desc button\"\n\t\t\"version desc button\";\n\talign-items: baseline;\n}\n\n.lint-title {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 36px;\n\tmargin: 0;\n\tgrid-area: title;\n}\n\n.lint-subtitle {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 18px;\n\tmargin: 0 0 0 15px;\n\tgrid-area: desc;\n}\n\n.lint-version {\n\tfont-size: 0.8em;\n\tgrid-area: version;\n\tjustify-self: end;\n}\n\n.github-button {\n\tgrid-area: button;\n\talign-self: center;\n}\n\n.lint-options-title {\n\tmargin-top: 0;\n}\n\n.lint-option {\n\tdisplay: block;\n\tmargin: 1.1em 0;\n\tline-height: 1.3;\n}\n\n.lint-option-check {\n\tdisplay:  grid;\n\tgrid-template-columns: 1.4em auto;\n\tgap: 0.4em;\n}\n\n.lint-option-check [type=checkbox] {\n\talign-self: start;\n\theight: 1.4em;\n}\n\n.lint-option-number,\n.lint-option-array {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.lint-option-number [type=number],\n.lint-option-array .multiselect {\n\tmargin-top: 0.4em;\n\tfont-size:  1em;\n\tpadding:  0.2em;\n}\n\n</style>","/* @flow */\n'use strict';\n\nimport {EventEmitter} from 'events';\n\n// const MAX_ACTIVE_HANDLERS = 1;\nconst MAX_ACTIVE_HANDLERS = 10;\n\n/**\n * Manage workloads so the async queue doesn't get filled before any work can\n * be done. An iterable is provided to the the start method each item will be\n * emitted for processing with the 'next' event.\n *\n * The 'next' event handler will be provided two parameter, the next item in the\n * iterable and a 'done' function to be called to release the work handler back\n * to the pool.\n */\nexport class WorkHandler /*:: <T> */ extends EventEmitter {\n\t/*::\n\t_active_handlers: number;\n\t_active_processes: number;\n\t_done_proxy: () => void;\n\t_iterator: Iterator<T> | null;\n\t*/\n\n\t/**\n\t * Construct a new WorkHandler\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._active_handlers = 0;\n\t\tthis._active_processes = 0;\n\t\tthis._done_proxy = this._done.bind(this);\n\t\tthis._iterator = null;\n\n\t\tthis.on('handler.available', this._handler_available.bind(this));\n\t}\n\n\t/**\n\t * Kick off the next element in the iterable.\n\t */\n\t_handler_available() {\n\t\tif (this._iterator) {\n\t\t\tconst next = this._iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\tthis._iterator = null;\n\t\t\t} else {\n\t\t\t\tthis.emit('next', next.value, this._done_proxy);\n\t\t\t\tthis._active_handlers++;\n\t\t\t\tthis._active_processes++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Release the work handler to the pool.\n\t */\n\t_done() {\n\t\tthis._active_handlers--;\n\t\tthis._active_processes--;\n\n\t\t// console.log('handlers', this._active_handlers);\n\t\t// console.log('processes', this._active_processes);\n\n\t\tif (this._active_handlers >= 0) {\n\t\t\tthis.emit('handler.available');\n\t\t} else {\n\t\t\tthrow new Error('No handlers available, did you call done?');\n\t\t}\n\n\t\tif (this._active_processes <= 0) {\n\t\t\tthis.emit('end');\n\t\t}\n\t}\n\n\t/**\n\t * Start the work handler.\n\t * @param  {Promise<Iterable<T>>} promise An iterable of items that will\n\t *                                        be processed.\n\t */\n\tstart(promise/*: Promise<Iterable<T>> */) {\n\t\tif (this._iterator) {\n\t\t\tthrow new Error('Work is in progress');\n\t\t}\n\n\t\tthis._active_handlers = 0;\n\n\t\tpromise\n\t\t\t.then((iterator) => {\n\t\t\t\tthis._iterator = iterator();\n\n\t\t\t\twhile (this._active_handlers < MAX_ACTIVE_HANDLERS) {\n\t\t\t\t\tthis.emit('handler.available');\n\t\t\t\t\tthis._active_handlers++;\n\t\t\t\t}\n\t\t\t}, (e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport crypto from 'crypto';\n\nconst TRIE_DEPTH = 3;\nconst HASH_TYPE = 'sha1';\n\n/*::\nconst Finder = require('./finder');\n\nimport type { FileDescriptor } from './finder';\n\ntype Trie = Map<string, Map<string, Map<string, Trie>>>;\n*/\n\n/**\n * Find duplicate files.\n */\nexport class Hasher {\n\t/*::\n\ttrie: Trie;\n\t*/\n\n\t/**\n\t * Construct a new Hasher.\n\t */\n\tconstructor() {\n\t\tthis.trie = new Map();\n\t}\n\n\t/**\n\t * Retrive the branch of the Trie that would contain the given digest.\n\t * @param  {string} digest A unique hash.\n\t * @return {Trie}          The sub Trie.w\n\t */\n\tfind(digest/*: string */)/*: Trie */ {\n\t\tlet current = this.trie;\n\t\tlet depth = 0;\n\n\t\t// Descend down the trie to find the leaf that contains this digest.\n\t\twhile (depth <= TRIE_DEPTH) {\n\t\t\tconst previous = current;\n\t\t\tconst byte = digest[depth];\n\n\t\t\tcurrent = current.get(byte);\n\n\t\t\tif (!current) {\n\t\t\t\tcurrent = new Map();\n\t\t\t\tprevious.set(byte, current);\n\t\t\t}\n\n\t\t\tdepth++;\n\t\t}\n\n\t\treturn current;\n\t}\n\n\t/**\n\t * Determine if the given buffer has already been seen. If not the hash and\n\t * path will be added to the Trie.\n\t * @param  {string} path    The path to the file.\n\t * @param  {Buffer} buffer  The file's content\n\t * @return {boolean}        The path of the existing file with the\n\t *                          same contents.\n\t */\n\tcontains(path/*: string */, buffer/*: Buffer */)/*: ?string */ {\n\t\t// The leaf should contain a map of digests to file names.\n\t\tconst hash = crypto.createHash(HASH_TYPE);\n\n\t\thash.update(buffer);\n\n\t\tconst digest = hash.digest('binary');\n\t\tconst hashes = this.find(digest);\n\t\tconst found_name = hashes.get(digest);\n\n\t\tif (!found_name) {\n\t\t\thashes.set(digest, path);\n\t\t}\n\n\t\treturn found_name;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/**\n * An enumeration of all of the color spaces\n */\nexport class ColorSpace {\n\t/*::\n\tstatic G: ColorSpace;\n\tstatic RGB: ColorSpace;\n\tstatic YCbCr: ColorSpace;\n\tstatic YCCK: ColorSpace;\n\tstatic LAB: ColorSpace;\n\tstatic HSV: ColorSpace;\n\tstatic CMYK: ColorSpace;\n\tstatic XYZ: ColorSpace;\n\tstatic XYB: ColorSpace;\n\n\tstatic all_names: Set<string>;\n\n\tname: string;\n\tchannels: number;\n\tunk_format: string | null;\n\t*/\n\n\t/**\n\t * Construct a new ColorSpace.\n\t * @param  {string} name     The name of the color space.\n\t * @param  {number} channels The number of channels for this color space.\n\t */\n\tconstructor(name/*: string */, channels/*: number */) {\n\t\tthis.name = name;\n\t\tthis.channels = channels;\n\t\tthis.unk_format = null;\n\n\t\tColorSpace.all_names.add(name);\n\t}\n\n\t/**\n\t * If this is 'ColorSpace.UNK' return the name of the color format that\n\t * was unknown.\n\t *\n\t * @return {String} The unknown format.\n\t */\n\tgetUnkFormat() {\n\t\treturn this.unk_format;\n\t}\n\n\t/**\n\t * Get an existing color space with the given name.\n\t * @param  {string} id   The name of the color space.\n\t * @return {ColorSpace}  The color space or null if no color space exists\n\t *                       with that name.\n\t */\n\tstatic from(id/*: string*/)/*: ColorSpace | null */ {\n\t\tlet space/*: ColorSpace | null */ = null;\n\n\t\tif (this.all_names.has(id)) {\n\t\t\tspace = (ColorSpace/*: any */)[id];\n\t\t}\n\n\t\treturn space;\n\t}\n\n\t/**\n\t * Construct a marker for an unknown color space.\n\t *\n\t * @param  {string} format      The name of the color space that was unknown.\n\t * @param  {number} [channels]  The number of channels.\n\t * @return {ColorSpace}         The unknown color space.\n\t */\n\tstatic unkownFormat(format, channels=-1) {\n\t\tconst color_space = new ColorSpace('UNK', channels);\n\n\t\tcolor_space.unk_format = format;\n\n\t\treturn color_space;\n\t}\n}\n\nColorSpace.all_names = new Set();\n\nColorSpace.G = new ColorSpace('G', 1);\nColorSpace.RGB = new ColorSpace('RGB', 3);\nColorSpace.YCbCr = new ColorSpace('YCbCr', 3);\nColorSpace.YCCK = new ColorSpace('YCCK', 4);\nColorSpace.LAB = new ColorSpace('LAB', 3);\nColorSpace.HSV = new ColorSpace('HSV', 3);\nColorSpace.CMYK = new ColorSpace('CMYK', 4);\nColorSpace.XYZ = new ColorSpace('XYZ', 3);\nColorSpace.XYB = new ColorSpace('XYB', 3);\n\n/**\n * The pixel format of an image.\n */\nexport class PixelFormat {\n\t/*::\n\tcolor_space: ColorSpace;\n\tindexed: boolean;\n\talpha: boolean;\n\tbit_depth: { [channel: string]: number};\n\t*/\n\n\t/**\n\t * Construct a new PixelFormat\n\t */\n\tconstructor() {\n\t\tthis.indexed = false;\n\t\tthis.alpha = false;\n\t\tthis.bit_depth = {};\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport chalk from 'chalk';\n\n/*::\ninterface LogCounts {\n\tinfo: number;\n\twarn: number;\n\terror: number;\n}\n*/\n\n/**\n * A logger for writing the output to a string.\n */\nexport class Log {\n\t/*::\n\tfilename: string;\n\tlog: string;\n\tcount: LogCounts;\n\t*/\n\n\t/**\n\t * Construct a new logger, generally you should use the logger factory\n\t * instead of directly constructing this object.\n\t *\n\t * @param  {string} filename The name of the file that is being linted.\n\t */\n\tconstructor(filename/*: string */) {\n\t\tthis.filename = filename;\n\t\tthis.log = '';\n\t\tthis.count = {\n\t\t\t'info': 0,\n\t\t\t'warn': 0,\n\t\t\t'error': 0,\n\t\t};\n\t}\n\n\t/**\n\t * Determine if this should be printed.\n\t * @return {boolean} true if the log should be printed.\n\t */\n\tis_printable()/*: boolean */ {\n\t\treturn this.count.warn > 0 || this.count.error > 0;\n\t}\n\n\t/**\n\t * Log a message at the 'info' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\tinfo(message/*: string */) {\n\t\tthis.count.info++;\n\t\tthis.log += '\\n  INFO:  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'warn' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\twarn(message/*: string */) {\n\t\tthis.count.warn++;\n\t\tthis.log += '\\n  ' + chalk.yellow('WARN:') + '  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'error' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\terror(message/*: string */) {\n\t\tthis.count.error++;\n\t\tthis.log += '\\n  ' + chalk.red('ERROR:') + '  ' + message;\n\t}\n\n\t/**\n\t * Get the number of errors that have been logged.\n\t * @return {number} The number of errors.\n\t */\n\tget_error_count() {\n\t\treturn this.count.error;\n\t}\n\n\t/**\n\t * Get the number of warnings that have been logged.\n\t * @return {number} The number of warnings.\n\t */\n\tget_warning_count() {\n\t\treturn this.count.warn;\n\t}\n\n\t/**\n\t * Convert this log to a string.\n\t * @return {string} The log output.\n\t */\n\ttoString()/*: string */ {\n\t\tlet warn_count = this.count.warn.toString();\n\t\tlet error_count = this.count.error.toString();\n\n\t\tif (this.count.warn) {\n\t\t\twarn_count = chalk.yellow(warn_count);\n\t\t}\n\n\t\tif (this.count.error) {\n\t\t\terror_count = chalk.red(error_count);\n\t\t}\n\n\t\treturn this.filename + this.log + '\\n' +\n\t\t\twarn_count + ' warnings. ' +\n\t\t\terror_count + ' errors.';\n\t}\n}\n\n/**\n * A factory for creating new logs.\n */\nexport class LoggerFactory {\n\t/**\n\t * Get a new instance of a logger.\n\t *\n\t * @param {string} filename The filename of the file being linted.\n\t * @return {Log}            The new logging instance.\n\t */\n\tstatic get_log(filename/*: string */)/*: Log */ {\n\t\treturn new Log(filename);\n\t}\n}\n","/* @flow */\n\n/*::\nimport {InfoProvider} from \"./image-info.js\";\n*/\n\n/**\n * Abstract class to identify the type of images.\n */\nexport class ImageIdentifier {\n\t/*::\n\t_info_provider: InfoProvider | null\n\n\tstatic _extension_registry: Map<string, ImageIdentifier>;\n\tstatic _mime_registry: Map<string, ImageIdentifier>;\n\tstatic _image_extensions: string[];\n\tstatic _all_extensions: string[];\n\tstatic _all_mimes: string[];\n\tstatic _all_providers: ImageIdentifier[];\n\t*/\n\n\t/**\n\t * Construct an InfoProvider\n\t */\n\tconstructor() {\n\t\tthis._info_provider = null;\n\t}\n\n\t/**\n\t * Determine if this file type is identify-only or if there is an associated\n\t * information provider.\n\t *\n\t * @return {boolean} True if the file type is identify-only.\n\t */\n\tidentify_only()/*: boolean */ {\n\t\treturn !this.get_info_provider();\n\t}\n\n\t/**\n\t * Determine if the file is of the file type.\n\t *\n\t * @abstract\n\t * @param  {Buffer}  buffer The image buffer.\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common extension for this type of file.\n\t *\n\t * @return {String} containing the extension '.jpg', '.png', etc.\n\t */\n\tget_extension()/*: string */ {\n\t\treturn this.get_extensions()[0];\n\t}\n\n\t/**\n\t * Get the possible file extensions for this type of file having the\n\t * canonical extension as the first element.\n\t */\n\tget_extensions()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common mime for this type of file.\n\t *\n\t * @return {String} containing the mime type 'image/jpeg', 'image/png', etc.\n\t */\n\tget_mime()/*: string */ {\n\t\treturn this.get_mimes()[0];\n\t}\n\n\t/**\n\t * Get the possible MIME types for this type of file having the canonical\n\t * MIME type as the first element.\n\t */\n\tget_mimes()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the buffer contains enough information to be validated.\n\t *\n\t * @param  {Buffer} buffer The image buffer.\n\t * @return {boolean} True if the image can be validated.\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get an instance of the info provider for this file type.\n\t *\n\t * @return {InfoProvider} The info provider.\n\t */\n\tget_info_provider()/*: Class<InfoProvider> | null */ {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Add an image identifier to the registry.\n\t * @param  {function} Constructor The constructor of the identifier.\n\t */\n\tstatic register(Constructor/*: Class<ImageIdentifier> */) {\n\t\tconst provider = new Constructor();\n\t\tconst is_identify_only = provider.identify_only();\n\n\t\tfor (const extension of provider.get_extensions()) {\n\t\t\tthis._extension_registry.set(extension, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_extensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tfor (const mime of provider.get_mimes()) {\n\t\t\tthis._mime_registry.set(mime, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_mimes.push(mime);\n\t\t\t}\n\t\t}\n\n\t\tthis._all_providers.push(provider);\n\t}\n\n\t/**\n\t * Clear the registered identifiers.\n\t */\n\tstatic clear_registry() {\n\t\tthis._extension_registry.clear();\n\t\tthis._all_extensions.length = 0;\n\n\t\tthis._mime_registry.clear();\n\t\tthis._all_mimes.length = 0;\n\n\t\tthis._all_providers.length = 0;\n\t}\n\n\t/**\n\t * Get all of the know file extensions.\n\t *\n\t * @return {string[]} An array of file extension.\n\t */\n\tstatic get_all_extensions()/*: string[] */ {\n\t\treturn ImageIdentifier._all_extensions;\n\t}\n\n\t/**\n\t * Get all of the known MIME types.\n\t *\n\t * @return {string[]} An array of MIME types.\n\t */\n\tstatic get_all_mimes()/*: string[] */ {\n\t\treturn ImageIdentifier._all_mimes;\n\t}\n\n\t/**\n\t * Construct a new identifier using the file extension.\n\t *\n\t * @param {string} extension   The file extension of the.\n\t * @return {ImageIdentifier}  The new image identifier.\n\t */\n\tstatic from_extension(extension/*: string */)/*: ?ImageIdentifier */ {\n\t\treturn ImageIdentifier._extension_registry.get(extension);\n\t}\n\n\t/**\n\t * Iterate all of the registered providers.\n\t */\n\tstatic* all_providers()/*: Generator<ImageIdentifier, void, void>*/ {\n\t\tyield* ImageIdentifier._all_providers;\n\t}\n}\n\nImageIdentifier._extension_registry = new Map();\nImageIdentifier._mime_registry = new Map();\nImageIdentifier._all_providers = [];\nImageIdentifier._all_extensions = [];\nImageIdentifier._all_mimes = [];\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that uses a magic number to identify the format.\n */\nexport class MagicNumberIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the magic number for this file type\n\t */\n\tget_magic()/*: Buffer */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\t\tconst buffer_magic = buffer.slice(0, magic.length);\n\n\t\t// console.log('Validating magic: ' + this.magic.toString('hex') + ' === ' + buffer_magic.toString('hex'));\n\n\t\treturn Buffer.compare(magic, buffer_magic) === 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\n\t\treturn buffer.length >= magic.length;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type { Log } from './logger.js';\nimport type { FileDescriptor } from './finder.js';\nimport type { LinterOptions } from './linter.js';\nimport type { PixelFormat } from './pixel-format.js';\n\nexport\ninterface Dimensions {\n\twidth: number;\n\theight: number;\n\tframes: number;\n}\n\nexport interface ImageInfo {\n\ttruncated: boolean;\n\tdimensions?: Dimensions;\n\tsize?: number;\n\tpixel_format?: PixelFormat;\n\tbytes_per_pixel?: number;\n}\n*/\n\n/**\n * Gather information about an image file.\n */\nexport class InfoProvider {\n\t/**\n\t * Calculate the number of bytes per pixel in the image.\n\t *\n\t * @param  {Dimensions} dims The dimensions of the image.\n\t * @param  {number} size     The file size of the image.\n\t * @return {number}          The number of bytes per pixel.\n\t */\n\tcalculate_bpp(dims/*: Dimensions */, size/*: number */)/*: number */ {\n\t\treturn (size - this.get_overhead()) / (dims.width * dims.height * dims.frames);\n\t}\n\n\t/**\n\t * Get the number of bytes of overhead of this file format.\n\t *\n\t * @return {number} The number in bytes.\n\t */\n\tget_overhead()/*: number */ {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Get the dimensions of the image.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the pixel format of the image.\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * The the information for this file.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @return {ImageInfo}     This image information.\n\t */\n\tget_info(buffer/*: Buffer */)/*: ImageInfo */ {\n\t\tconst info/*: ImageInfo */ = {\n\t\t\t'truncated': this.is_truncated(buffer),\n\t\t};\n\n\t\tif (!info.truncated) {\n\t\t\tconst dims = this.get_dimensions(buffer);\n\n\t\t\tinfo.dimensions = dims;\n\t\t\tinfo.size = buffer.length;\n\t\t\tinfo.pixel_format = this.get_pixel_format(buffer);\n\t\t\tinfo.bytes_per_pixel = this.calculate_bpp(dims, buffer.length);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Is the file truncated.\n\t *\n\t * @abstract\n\t * @param  {Buffer}    buffer A buffer containing a compressed image.\n\t * @return {Boolean}   True if the file is invalid due to it being truncated.\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport crc from 'crc';\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst IHDR_OFFSET = 0xC;\nconst SECTION_HEADER_WIDTH = 4;\nconst SECTION_LENGTH_WIDTH = 4;\nconst CRC_WIDTH = 4;\n\nconst WIDTH_OFFSET = IHDR_OFFSET + SECTION_HEADER_WIDTH;\nconst HEIGHT_OFFSET = WIDTH_OFFSET + 4;\nconst BIT_DEPTH_OFFSET = HEIGHT_OFFSET + 4;\nconst COLOR_TYPE_OFFSET = BIT_DEPTH_OFFSET + 1;\n\nconst CHUNK_TYPE_IEND = 0x49454E44;\n\n// const IEND_CRC = 0xAE426082;\nconst IEND_LENGTH = SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + CRC_WIDTH;\n\nconst GRAYSCALE_TYPES = new Set([0, 4]);\nconst RGB_TYPES = new Set([2, 3, 6]);\nconst ALPHA_TYPES = new Set([4, 6]);\nconst INDEXED_TYPES = new Set([4]);\n\n// http://www.libpng.org/pub/png/spec/1.2/\n\n/**\n * A PNG chunk.\n */\nclass PNGChunk {\n\t/*::\n\tlength: number;\n\theader: number;\n\tdata: Buffer;\n\tcrc32: number;\n\t*/\n\n\t/**\n\t * Construct a new PNG chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */) {\n\t\tthis.length = buffer.readUInt32BE(offset);\n\t\tthis.header = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH);\n\t\tthis.data = buffer.slice(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH, this.length);\n\t\tthis.crc32 = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + this.length);\n\t}\n\n\t/**\n\t * Verify the CRC in the chunk.\n\t *\n\t * @return {boolean} True if its a valid chunk.\n\t */\n\tverify()/*: boolean */ {\n\t\tconst header = Buffer.alloc(4);\n\t\tlet check = null;\n\n\t\theader.writeUInt32BE(this.header, 0);\n\n\t\tcheck = crc.crc32(header);\n\t\tcheck = crc.crc32(this.data, check);\n\n\t\treturn check === this.crc32;\n\t}\n}\n\n/**\n * A PNG info provider.\n */\nexport class PNGInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible PNG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 67;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tlet end_chunk = null;\n\n\t\ttry {\n\t\t\tend_chunk = new PNGChunk(buffer, buffer.length - IEND_LENGTH);\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn end_chunk.header === CHUNK_TYPE_IEND && !end_chunk.verify();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\treturn {\n\t\t\twidth: buffer.readUInt32BE(WIDTH_OFFSET),\n\t\t\theight: buffer.readUInt32BE(HEIGHT_OFFSET),\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tconst bit_depth = buffer.readInt8(BIT_DEPTH_OFFSET);\n\t\tconst color_type = buffer.readInt8(COLOR_TYPE_OFFSET);\n\n\t\t// Determine the color space\n\t\tif (RGB_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\tformat.bit_depth.R = bit_depth;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t\tformat.bit_depth.B = bit_depth;\n\t\t} else if (GRAYSCALE_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat(color_type);\n\t\t}\n\n\t\t// Determine the alpha channel\n\t\tif (ALPHA_TYPES.has(color_type)) {\n\t\t\tformat.alpha = true;\n\t\t\tformat.bit_depth.alpha = bit_depth;\n\t\t}\n\n\t\t// Determine if it is indexed.\n\t\tif (INDEXED_TYPES.has(color_type)) {\n\t\t\tformat.indexed = true;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {PNGInfoProvider} from '../image/png-info.js';\n\n/**\n * An image identifier that identifies PNG images.\n */\nclass PNGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('89504e470d0a1a0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn PNGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(PNGIdentifier);\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst VERSION_OFFSET = 0x3;\nconst HEIGHT_OFFSET = 0x6;\nconst WIDTH_OFFSET = 0x8;\nconst SETTINGS_OFFSET = 0xA;\nconst COLOR_TABLE_OFFSET = 0xD;\nconst COLOR_TABLE_AVAILABLE_MASK = 0x80;\nconst COLOR_TABLE_LENGTH_MASK = 0x7;\nconst IMAGE_DESCRIPTOR_OFFSET = 9; // a relative offset from the separator (0x2c)\nconst FILE_TRAILER = 0x3B; // A semicolon;\n\n/**\n * A JPEG info provider.\n */\nexport class GIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible GIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 35;\n\t}\n\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The offset of the next chunk.\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst block_length = 2 + buffer.readUInt8(offset + 2);\n\n\t\t// console.log('block_length', block_length);\n\n\t\treturn offset + block_length + this.get_sub_block_length(buffer, offset + block_length + 1) + 1;\n\t}\n\n\t/**\n\t * Get the length of the sub-block.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the sub-block.\n\t */\n\tget_sub_block_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tlet sub_block_length = 0;\n\t\tlet size_byte = buffer.readUInt8(offset);\n\n\t\t// console.log('starting searching for sub-blocks, initial sub-block size', size_byte.toString(16));\n\t\t// if the initial size_byte is 0x00 then we are dealing with a non-data chunk.\n\t\tif (size_byte !== 0) {\n\t\t\twhile (size_byte !== 0) {\n\t\t\t\tsize_byte = buffer.readUInt8(offset + sub_block_length);\n\t\t\t\t// console.log(size_byte);\n\t\t\t\tsub_block_length += size_byte + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tsub_block_length = 1;\n\t\t}\n\n\t\t// console.log('finished searching for sub-blocks, total length is', sub_block_length + 1);\n\n\t\treturn sub_block_length;\n\t}\n\n\t/**\n\t * Get the length of the color table.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the color table.\n\t */\n\tget_color_table_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst color_table_bits = buffer.readUInt8(offset) & COLOR_TABLE_LENGTH_MASK;\n\n\t\t// console.log('color table bits', color_table_bits.toString(16));\n\n\t\treturn 3 * Math.pow(2, color_table_bits + 1);\n\t}\n\n\t/**\n\t * Determine if a color table exists.\n\t *\n\t * @param  {Buffer}  buffer The file buffer.\n\t * @param  {number}  offset The offset in buffer.\n\t * @return {boolean}        True if the file has a color table.\n\t */\n\thas_color_table(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\t// console.log('has color table', !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK));\n\t\treturn !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK);\n\t}\n\n\t/**\n\t * Get the version string.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @return {string}        The version string.\n\t */\n\tget_version(buffer/*: Buffer */)/*: string */ {\n\t\treturn buffer.toString('ascii', VERSION_OFFSET, HEIGHT_OFFSET);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet frame_count = 0;\n\t\tlet found = false;\n\t\tlet offset = 0;\n\n\t\tif (this.has_color_table(buffer, SETTINGS_OFFSET)) {\n\t\t\tconst color_table_length = this.get_color_table_length(buffer, SETTINGS_OFFSET);\n\t\t\toffset = COLOR_TABLE_OFFSET + color_table_length;\n\t\t} else {\n\t\t\toffset = SETTINGS_OFFSET + 3;\n\t\t}\n\n\t\t// console.log(offset);\n\n\t\twhile (!found) {\n\t\t\tlet block_header = buffer.readUInt8(offset);\n\n\t\t\t// console.log('Offset of block', offset);\n\t\t\t// console.log('block header (should be 0x21)', block_header.toString(16));\n\t\t\t// console.log('block label', buffer.readUInt8(offset + 1).toString(16));\n\n\t\t\tif (block_header === 0x2c) {\n\t\t\t\tframe_count++;\n\t\t\t\t// console.log(buffer.readUInt8(offset).toString(16));\n\t\t\t\toffset += IMAGE_DESCRIPTOR_OFFSET;\n\t\t\t\t// Skip the color table, if present\n\n\t\t\t\t// console.log('color table return', this.has_color_table(buffer, offset));\n\t\t\t\tif (this.has_color_table(buffer, offset)) {\n\t\t\t\t\t// console.log('has local color table');\n\t\t\t\t\toffset += this.get_color_table_length(buffer, offset);\n\t\t\t\t}\n\t\t\t\t// Skip the Packed values byte and the \"LZW Minimum Code Size\" byte.\n\t\t\t\toffset += 2;\n\t\t\t\t// Skip the image data\n\t\t\t\toffset += this.get_sub_block_length(buffer, offset);\n\t\t\t\t// console.log('offset', offset);\n\t\t\t\t// console.log('this should be a block header', buffer.readUInt8(offset).toString(16));\n\t\t\t}\n\n\t\t\t// console.log('near the end', offset, buffer.length);\n\n\t\t\tif (offset + 1 >= buffer.length) {\n\t\t\t\t// Normal Termination\n\t\t\t\t// We've reached the end of the file\n\t\t\t\tfound = true;\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tblock_header = buffer.readUInt8(offset);\n\n\t\t\t\tif (block_header !== 0x21 && block_header !== 0x2c) {\n\t\t\t\t\t// Abnormal Termination\n\t\t\t\t\t// There is either junk at the end of the file or its corrupted\n\t\t\t\t\t// (or the programmer made a mistake).\n\t\t\t\t\tfound = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset);\n\t\t}\n\n\t\t// console.log('gif version', this.get_version(buffer));\n\t\t// console.log('number of frames', frame_count);\n\n\t\treturn {\n\t\t\t'width': buffer.readUInt16LE(HEIGHT_OFFSET),\n\t\t\t'height': buffer.readUInt16LE(WIDTH_OFFSET),\n\t\t\t'frames': frame_count,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format()/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tformat.indexed = true;\n\t\tformat.bit_depth.R = 8;\n\t\tformat.bit_depth.G = 8;\n\t\tformat.bit_depth.B = 8;\n\n\t\t// TODO: handle this properly\n\t\tformat.bit_depth.alpha = 1;\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {GIFInfoProvider} from '../image/gif-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass GIFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('GIF');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn GIFInfoProvider;\n\t}\n}\n\nImageIdentifier.register(GIFIdentifier);\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst MARKER_LENGTH = 2;\nconst CHUNKS_WITH_DIMS = 0xF0;\nconst HEIGHT_OFFSET = 5;\nconst WIDTH_OFFSET = 7;\nconst CHANNELS_OFFSET = 9;\nconst FILE_TRAILER = 0xFFD9;\n\n// https://www.w3.org/Graphics/JPEG/jfif3.pdf\n// http://www.itu.int/rec/T-REC-T.871-201105-I/en\n\n/**\n * A JPEG info provider.\n */\nexport class JPGInfoProvider extends InfoProvider {\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param {Buffer} buffer  The file buffer.\n\t * @param {number} offset  The offset of the current chunk.\n\t * @return {number} the offset of the next chunk\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\treturn offset + MARKER_LENGTH + buffer.readUInt16BE(offset + 2); // this.calculate_chunk_length(s1, s2);\n\t}\n\n\t/**\n\t * Determines if this chunk is a SOFn chunk that may conatain matadata for\n\t * this image.\n\t *\n\t * @param  {Buffer}  buffer The buffer source of the image.\n\t * @param  {number}  offset The offset of the start of the chunk\n\t * @return {Boolean}        Returns true if it is a SOFn chunk.\n\t */\n\tis_sof_chunk(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\tconst sof_byte = buffer.readUInt8(offset + 1);\n\n\t\treturn (sof_byte & CHUNKS_WITH_DIMS) === 0xC0 && sof_byte !== 0xC4 && sof_byte !== 0xC8 && sof_byte !== 0xCC;\n\t}\n\n\t/**\n\t * Iterate all the chunks in the file.\n\t *\n\t * @param {Buffer} buffer The buffer to scan through looking for chunks.\n\t * @yields {number} The offset of the next chunk.\n\t */\n\t* chunks(buffer/*: Buffer */)/*: Generator<number, void, number> */ {\n\t\tlet offset = this.next_chunk(buffer, MARKER_LENGTH);\n\t\tlet found = false;\n\n\t\twhile (!found) {\n\t\t\tyield offset;\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset, buffer.length);\n\n\t\t\tif (offset > buffer.length) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt16BE(buffer.length - 2) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet width = null;\n\t\tlet height = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\t// console.log('Reading header');\n\n\t\t\t\twidth = buffer.readUInt16BE(offset + WIDTH_OFFSET);\n\t\t\t\theight = buffer.readUInt16BE(offset + HEIGHT_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!width || !height) {\n\t\t\tthrow new Error('Dimensions not found');\n\t\t}\n\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tlet channels = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\tchannels = buffer.readUInt8(offset + CHANNELS_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (channels === 1) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t} else if (channels === 3) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t} else if (channels === 4) {\n\t\t\tformat.color_space = ColorSpace.CMYK;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JPGInfoProvider} from '../image/jpg-info.js';\n\n/**\n * An image identifier that identifies JPEG images.\n */\nclass JPGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ffd8ff', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jpg',\n\t\t\t'.jpeg',\n\t\t\t'.jpe',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jpeg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JPGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JPGIdentifier);\n","/* @flow */\n\nconst U32_MAX = 0xFFFFFFFF;\n\nconst VAL = 0;\nconst BITS = 1;\nconst BITS_OFFSET = 2;\n\nconst WORD_SIZE = 8;\nconst QUAD_WORD_SIZE = WORD_SIZE * 4;\n\n/*::\ntype Distribution =\n\t[0, number] |\n\t[1, number] |\n\t[2, number, number];\n\ntype Distribution32 = [\n\tDistribution,\n\tDistribution,\n\tDistribution,\n\tDistribution\n];\n\nexport type CustomXY = {\n\tx: number,\n\ty: number\n};\n\ntype EnumTable = Set<number>;\n*/\n\n/**\n * Format a byte as a string.\n * @param  {number} bits The byte as number.\n * @return {string}      The formatted byte.\n */\n// function dbg_byte(bits) {\n// \treturn ('00000000' + bits.toString(2)).slice(-8);\n// }\n\n\n/**\n * An error that is thrown when the stream can not be parsed.\n */\nexport class IllformedStreamError extends Error {\n\n}\n\n/**\n * The JXL bitstream.\n */\nexport class BitStream {\n\t/*::\n\tbuffer: Buffer;\n\toffset: number;\n\tsub_bit: number;\n\tcurrent_byte: number;\n\t*/\n\n\t/**\n\t * Construct a new JPEG XL Bit stream.\n\t * @param  {Buffer} buffer The buffer that contains the image.\n\t * @param  {number} offset The offset from beginning of the buffer.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */ = 0) {\n\t\tthis.buffer = buffer;\n\t\tthis.offset = offset;\n\t\tthis.sub_bit = 0;\n\t\tthis.current_byte = buffer.readUInt8(offset);\n\t}\n\n\t/**\n\t * Read a certain number of bits from a byte.\n\t *\n\t * @param {number} byte  The byte to read from.\n\t * @param {number} offset  Which bit to start reading from.\n\t * @param {number} bits  The number of bits to read.\n\t *\n\t * @return {number} The bits that were read.\n\t */\n\tread_from_byte(byte/*: number */, offset/*: number */, bits/*: number */)/*: number */ {\n\t\tlet value = byte;\n\n\t\t// This builds the mask with the correct number of '1'. For example:\n\t\t//\n\t\t// | Bits | Mask     |\n\t\t// | ---- | -------- |\n\t\t// |    1 | 00000001 |\n\t\t// |    2 | 00000011 |\n\t\t// |  ... |    ...   |\n\t\t// |    8 | 11111111 |\n\t\tlet mask = (1 << bits) - 1;\n\n\t\t// console.log('mask: ', mask.toString(2));\n\t\t// console.log('mask sub_bit:', this.sub_bit, '- mask bits: ', bits);\n\n\t\t// This positions the mask in the correct spot...\n\t\t//\n\t\t// | sub_bit | Bits | Mask     |\n\t\t// | ------- | ---- | -------- |\n\t\t// |       1 |    2 | 00000011 |\n\t\t// |       2 |    2 | 00000110 |\n\t\t// |   ...   |  ... |    ...   |\n\t\t// |       8 |    2 | 10000000 | (and one from the next byte).\n\t\tmask = (mask << offset) >>> 0;\n\n\t\t// console.log('mask:', mask.toString(2), '- value:', value.toString(2));\n\t\t// console.log('value: ', (value & mask).toString(2));\n\n\t\tvalue = (value & mask) >>> offset;\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a certain number of bits from the stream.\n\t *\n\t * @param  {number} bits  The number of bits to read.\n\t * @return {number}       The bits read as a number.\n\t */\n\tread_bits(bits/*: number */)/*: number */ {\n\t\tif (bits > QUAD_WORD_SIZE) {\n\t\t\tthrow new Error(`Can not read more than ${ QUAD_WORD_SIZE } bits at a time. Attempting to read ${ bits }`);\n\t\t}\n\n\t\tif (bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet leftovers = 0;\n\t\tlet shift = 0;\n\t\tconst start_bits = WORD_SIZE - this.sub_bit;\n\n\t\t// console.log('start_bits', start_bits);\n\n\t\t// Read whats leftover from the previous byte. So from here on its whole\n\t\t// bytes only.\n\t\tif (this.sub_bit > 0 && bits > start_bits) {\n\t\t\t// console.log('bits needed from previous byte', start_bits);\n\t\t\tbits -= start_bits;\n\t\t\tleftovers = this.read_from_byte(this.current_byte, this.sub_bit, start_bits);\n\t\t\tshift = start_bits;\n\n\t\t\tthis.offset += 1;\n\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\tconst bytes = Math.floor(bits / WORD_SIZE);\n\t\tlet value = leftovers;\n\n\t\t// Read whole bytes\n\t\tif (bytes > 0) {\n\t\t\tfor (let byte = 0; byte < bytes; byte++) {\n\t\t\t\tlet read = this.read_from_byte(this.current_byte, 0, WORD_SIZE);\n\n\t\t\t\t// console.log(`byte ${byte}: `, dbg_byte(read));\n\n\t\t\t\tif (shift) {\n\t\t\t\t\tread = read << shift;\n\t\t\t\t}\n\n\t\t\t\t// console.log('value: ', value.toString(2));\n\n\t\t\t\tthis.offset += 1;\n\t\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\n\t\t\t\tshift += WORD_SIZE;\n\n\t\t\t\tvalue = value | read;\n\t\t\t}\n\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\t// There may still be a couple of bits left to read.\n\t\tbits = bits - (bytes * WORD_SIZE);\n\n\t\tif (bits > 0) {\n\t\t\tlet read = this.read_from_byte(this.current_byte, this.sub_bit, bits);\n\n\t\t\t// console.log(`byte last: `, dbg_byte(read));\n\n\t\t\tif (shift) {\n\t\t\t\tread = read << shift;\n\t\t\t}\n\n\t\t\tvalue = value | read;\n\n\t\t\tthis.sub_bit += bits;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a boolean from the stream.\n\t *\n\t * @return {boolean}  The boolean read.\n\t */\n\tread_boolean()/*: boolean */ {\n\t\treturn !!this.read_bits(1);\n\t}\n\n\t/**\n\t * Read a 32bit unsigned integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}  The number read.\n\t */\n\tread_u32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tif (distributions.length > 4) {\n\t\t\tthrow new Error('U32: A u32 takes only 4 distributions.');\n\t\t}\n\n\t\tconst u = this.read_bits(2);\n\t\tconst dist = distributions[u];\n\n\t\t// console.log('distribution', u.toString(2));\n\n\t\tif (dist[0] === VAL) {\n\t\t\treturn dist[1];\n\t\t} else if (dist[0] === BITS) {\n\t\t\treturn this.read_bits(dist[1]);\n\t\t} else if (dist[0] === BITS_OFFSET) {\n\t\t\tif (dist.length !== 3) {\n\t\t\t\tthrow new Error('U32: incorrect number of parameters for BitsOffset distribution.');\n\t\t\t}\n\t\t\treturn (dist[2] + this.read_bits(dist[1])) % U32_MAX;\n\t\t} else {\n\t\t\tthrow new Error('U32: Unknown distribution.');\n\t\t}\n\t}\n\n\t/**\n\t * Read a signed 32bit integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}   The number read.\n\t */\n\tread_s32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tconst v = this.read_u32(...distributions);\n\n\t\tif (v % 2 === 0) {\n\t\t\treturn v >> 1;\n\t\t} else if (v === U32_MAX) {\n\t\t\treturn 0x80000000;\n\t\t} else {\n\t\t\treturn -(v >> 1);\n\t\t}\n\t}\n\n\t/**\n\t * Read a 16bit float from the stream.\n\t *\n\t * @return {number}  The number read.\n\t */\n\tread_f16()/*: number */ {\n\t\tconst bits16 = this.read_bits(16);\n\t\tconst sign = bits16 >> 15;\n\t\tconst biased_exp = ( bits16 >> 10 ) & 0x1F;\n\t\tconst mantissa = bits16 & 0x3FF;\n\t\tlet value;\n\n\t\tif (biased_exp === 31) {\n\t\t\tthrow new IllformedStreamError('F16: Invalid biased exponent.');\n\t\t}\n\n\t\tif ( biased_exp == 0 ) {\n\t\t\tvalue = mantissa / ( 1 << 24 );\n\t\t} else {\n\t\t\tconst biased_exp32 = biased_exp + ( 127 - 15 );\n\t\t\tconst mantissa32 = mantissa << ( 23 - 10 );\n\t\t\tconst buffer = new ArrayBuffer(4);\n\t\t\t(new Uint32Array(buffer))[0] = ( sign << 31 ) | ( biased_exp32 << 23 ) | mantissa32;\n\t\t\tvalue = (new Float32Array(buffer))[0];\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a custom X, Y from the stream.\n\t *\n\t * @return {{x: number, y: number}} The value read.\n\t */\n\tread_customxy()/*: CustomXY */ {\n\t\treturn {\n\t\t\tx: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t\ty: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t};\n\t}\n\n\t/**\n\t * Read an enumeration from the stream.\n\t *\n\t * @param  {EnumTable} enum_table The table of enum values.\n\t * @return {number}            The enum value read.\n\t */\n\tread_enum(enum_table/*: EnumTable */)/*: number */ {\n\t\tconst value = this.read_u32(\n\t\t\t[VAL, 0],\n\t\t\t[VAL, 1],\n\t\t\t[BITS_OFFSET, 4, 2],\n\t\t\t[BITS_OFFSET, 6, 18],\n\t\t);\n\n\t\tif (value > 63) {\n\t\t\tthrow new IllformedStreamError(`Enum: Invalid value: ${ value }`);\n\t\t} else if (!enum_table.has(value)) {\n\t\t\tthrow new IllformedStreamError(`Enum: Unknown value: ${ value }`);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Get the number of bits read from the stream.\n\t *\n\t * @return {number}  The number of bits read.\n\t */\n\tget_bits_read()/*: number */ {\n\t\treturn (this.offset * 8) + this.sub_bit;\n\t}\n}\n\nexport const U32 = {\n\tVAL,\n\tBITS,\n\tBITS_OFFSET,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nimport {U32} from './bit-stream.js';\n\nconst XSIZE_SEPARATE = 0; // xsize coded separately\nconst XSIZE_IS_YSIZE = 1; // xsize = ysize\nconst XSIZE_RATIO_12X10 = 2; // xsize = floor( ysize × 12 / 10)\nconst XSIZE_RATIO_4X3 = 3; // xsize = floor( ysize × 4 / 3)\nconst XSIZE_RATIO_3X2 = 4; // xsize = floor( ysize × 3 / 2)\nconst XSIZE_RATIO_16X9 = 5; // xsize = floor( ysize × 16 / 9)\nconst XSIZE_RATIO_5X4 = 6; // xsize = floor( ysize × 5 / 4)\nconst XSIZE_RATIO_2X1 = 7; // xsize = floor( ysize × 2 / 1)\n\n/**\n * The JXL size header\n */\nexport class SizeHeader {\n\t/*::\n\tsmall: boolean;\n\tysize: number;\n\txsize: number;\n\tratio: number;\n\t*/\n\n\t/**\n\t * Construct a new SizeHeader\n\t *\n\t * @param  {BitStream} stream The bit stream to read the SizeHeader from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tlet ysize;\n\t\tlet xsize;\n\t\tthis.small = stream.read_boolean();\n\n\t\tif (this.small) {\n\t\t\tysize = (stream.read_bits(5) + 1) * 8;\n\t\t} else {\n\t\t\tysize = stream.read_u32(\n\t\t\t\t[U32.BITS, 9],\n\t\t\t\t[U32.BITS, 13],\n\t\t\t\t[U32.BITS, 18],\n\t\t\t\t[U32.BITS, 30],\n\t\t\t) + 1;\n\t\t}\n\n\t\tthis.ratio = stream.read_bits(3);\n\n\t\tif (this.ratio === XSIZE_SEPARATE) {\n\t\t\tif (this.small) {\n\t\t\t\txsize = (stream.read_bits(5) + 1) * 8;\n\t\t\t} else {\n\t\t\t\txsize = stream.read_u32(\n\t\t\t\t\t[U32.BITS, 9],\n\t\t\t\t\t[U32.BITS, 13],\n\t\t\t\t\t[U32.BITS, 18],\n\t\t\t\t\t[U32.BITS, 30],\n\t\t\t\t) + 1;\n\t\t\t}\n\t\t} else if (this.ratio === XSIZE_IS_YSIZE) {\n\t\t\txsize = ysize;\n\t\t} else if (this.ratio === XSIZE_RATIO_12X10) {\n\t\t\txsize = Math.floor(ysize * 12 / 10);\n\t\t} else if (this.ratio === XSIZE_RATIO_4X3) {\n\t\t\txsize = Math.floor(ysize * 4 / 3);\n\t\t} else if (this.ratio === XSIZE_RATIO_3X2) {\n\t\t\txsize = Math.floor(ysize * 3 / 2);\n\t\t} else if (this.ratio === XSIZE_RATIO_16X9) {\n\t\t\txsize = Math.floor(ysize * 16 / 9);\n\t\t} else if (this.ratio === XSIZE_RATIO_5X4) {\n\t\t\txsize = Math.floor(ysize * 5 / 4);\n\t\t} else if (this.ratio === XSIZE_RATIO_2X1) {\n\t\t\txsize = Math.floor(ysize * 2 / 1);\n\t\t} else {\n\t\t\tthrow new Error('SizeHeader: unknown aspect ratio.');\n\t\t}\n\n\t\tthis.ysize = ysize;\n\t\tthis.xsize = xsize;\n\t}\n\n\t/**\n\t * Get whether or not this is a small image.\n\t * @return {boolean} True if small, false otherwise.\n\t */\n\tget_small()/*: boolean */ {\n\t\treturn this.small;\n\t}\n\n\t/**\n\t * Get the y-size of the image.\n\t *\n\t * @return {number} The y-size.\n\t */\n\tget_ysize()/*: number */ {\n\t\treturn this.ysize;\n\t}\n\n\t/**\n\t * Get the x-size of the image.\n\t * @return {number} The x-size.\n\t */\n\tget_xsize()/*: number */ {\n\t\treturn this.xsize;\n\t}\n\n\t/**\n\t * Get the aspect ratio.\n\t * @return {number} The ratio.\n\t */\n\tget_ratio()/*: number */ {\n\t\treturn this.ratio;\n\t}\n}\n\n\nexport const Ratio = {\n\tXSIZE_SEPARATE,\n\tXSIZE_IS_YSIZE,\n\tXSIZE_RATIO_12X10,\n\tXSIZE_RATIO_4X3,\n\tXSIZE_RATIO_3X2,\n\tXSIZE_RATIO_16X9,\n\tXSIZE_RATIO_5X4,\n\tXSIZE_RATIO_2X1,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream, CustomXY} from './bit-stream';\n*/\n\n/**\n * Color Space enumeration.\n *\n * @type {Object}\n */\nexport const COLOR_SPACE = {\n\tK_RGB: 0,\n\tK_GREY: 1,\n\tK_XYB: 2,\n\tK_UNKNOWN: 3,\n\tK_XYZ: 4,\n};\nconst ENUM_COLOR_SPACE = new Set();\n\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_RGB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_GREY);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_UNKNOWN);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYZ);\n\n/**\n * White Point enumeration.\n * @type {Object}\n */\nconst WHITE_POINT = {\n\tK_D65: 1,\n\tK_CUSTOM: 2,\n\tK_E: 10,\n\tK_DCI: 11,\n};\n\nconst ENUM_WHITE_POINT = new Set();\n\nENUM_WHITE_POINT.add(WHITE_POINT.K_D65);\nENUM_WHITE_POINT.add(WHITE_POINT.K_CUSTOM);\nENUM_WHITE_POINT.add(WHITE_POINT.K_E);\nENUM_WHITE_POINT.add(WHITE_POINT.K_DCI);\n\n/**\n * Primaries enumeration.\n * @type {Object}\n */\nconst PRIMARIES = {\n\tK_SRGB: 1,\n\tK_CUSTOM: 2,\n\tK_2100: 9,\n\tK_P3: 11,\n};\nconst ENUM_PRIMARIES = new Set();\n\nENUM_PRIMARIES.add(PRIMARIES.K_SRGB);\nENUM_PRIMARIES.add(PRIMARIES.K_CUSTOM);\nENUM_PRIMARIES.add(PRIMARIES.K_2100);\nENUM_PRIMARIES.add(PRIMARIES.K_P3);\n\n/**\n * Transfer function enumeration.\n * @type {Object}\n */\nconst TRANSFER_FUNCTION = {\n\tK_709: 1,\n\tK_UNKNOWN: 2,\n\tK_LINEAR: 8,\n\tK_SRGB: 13,\n\tK_PQ: 16,\n\tK_DCI: 17,\n\tK_HLG: 18,\n};\nconst ENUM_TRANSFER_FUNCTION = new Set();\n\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_709);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_UNKNOWN);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_LINEAR);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_SRGB);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_PQ);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_DCI);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_HLG);\n\n\n/**\n * Rendering intent enumeration.\n * @type {Object}\n */\nconst RENDERING_INTENT = {\n\tK_PERCEPTUAL: 0,\n\tK_RELATIVE: 1,\n\tK_SATURATION: 2,\n\tK_ABSOLUTE: 3,\n};\nconst ENUM_RENDERING_INTENT = new Set();\n\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_PERCEPTUAL);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_RELATIVE);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_SATURATION);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_ABSOLUTE);\n\n/**\n * The JXL color encoding header.\n */\nexport class ColorEncoding {\n\t/*::\n\treceived_icc: boolean;\n\topaque_icc: boolean;\n\tcolor_space: number;\n\twhite_point: number;\n\twhite: CustomXY;\n\tprimaries: number;\n\tred: CustomXY | null;\n\tgreen: CustomXY | null;\n\tblue: CustomXY | null;\n\thave_gamma: boolean;\n\tgamma: number;\n\ttransfer_function: number;\n\trendering_intent: number;\n\t*/\n\n\t/**\n\t * Construct a new ColorEncoding.\n\t *\n\t * @param  {BitStream} [stream] The bit stream to read the encoding from\n\t */\n\tconstructor(stream/*: ?BitStream */) {\n\t\tthis.received_icc = false;\n\t\tthis.opaque_icc = false;\n\t\tthis.color_space = COLOR_SPACE.K_RGB;\n\t\tthis.white_point = WHITE_POINT.K_D65;\n\t\tthis.primaries = PRIMARIES.K_SRGB;\n\t\tthis.have_gamma = false;\n\t\tthis.gamma = 0;\n\t\tthis.transfer_function = TRANSFER_FUNCTION.K_SRGB;\n\t\tthis.rendering_intent = RENDERING_INTENT.K_RELATIVE;\n\n\t\tif (stream) {\n\t\t\tconst all_default = stream.read_boolean();\n\n\t\t\tif (!all_default) {\n\t\t\t\tthis.received_icc = stream.read_boolean();\n\n\t\t\t\tif (this.received_icc) {\n\t\t\t\t\tthis.opaque_icc = stream.read_boolean();\n\t\t\t\t} else {\n\t\t\t\t\tthis.opaque_icc = false;\n\t\t\t\t}\n\n\t\t\t\tconst use_desc = !all_default && !this.opaque_icc;\n\n\t\t\t\tif (use_desc) {\n\t\t\t\t\tthis.color_space = stream.read_enum(ENUM_COLOR_SPACE);\n\n\t\t\t\t\tconst not_xy = this.color_space !== COLOR_SPACE.K_XYB && this.color_space !== COLOR_SPACE.K_XYZ;\n\n\t\t\t\t\tif (not_xy) {\n\t\t\t\t\t\tthis.white_point = stream.read_enum(ENUM_WHITE_POINT);\n\n\t\t\t\t\t\tif (this.white_point === WHITE_POINT.K_CUSTOM) {\n\t\t\t\t\t\t\tthis.white = stream.read_customxy();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.primaries = stream.read_enum(ENUM_PRIMARIES);\n\n\t\t\t\t\t\t\tif (this.primaries === PRIMARIES.K_CUSTOM) {\n\t\t\t\t\t\t\t\tthis.red = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.green = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.blue = stream.read_customxy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.have_gamma = stream.read_boolean();\n\n\t\t\t\t\t\tif (this.have_gamma) {\n\t\t\t\t\t\t\tthis.gamma = stream.read_bits(24);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.transfer_function = stream.read_enum(ENUM_TRANSFER_FUNCTION);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.rendering_intent = stream.read_enum(ENUM_RENDERING_INTENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nimport {U32} from './bit-stream.js';\nimport {ColorEncoding} from './color-encoding.js';\n\n/*::\nimport type {ImageMetadata2} from './image-metadata2.js';\n*/\n\n/**\n * The JXL image metadata header.\n */\nexport class ImageMetadata {\n\t/*::\n\thave_icc: boolean;\n\tbits_per_sample: number;\n\tcolor_encoding: ColorEncoding | null;\n\talpha_bits: number;\n\ttarget_nits: number;\n\tm2: ImageMetadata2 | null;\n\t*/\n\n\t/**\n\t * Construct a new ImageMetadata.\n\t *\n\t * @param  {BitStream} stream The bit stream to read the ImageMetadata from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tconst all_default = stream.read_boolean();\n\n\t\tif (!all_default) {\n\t\t\tthis.have_icc = stream.read_boolean();\n\t\t\tthis.bits_per_sample = stream.read_u32(\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.VAL, 32],\n\t\t\t\t[U32.BITS, 5],\n\t\t\t);\n\t\t\tthis.color_encoding = new ColorEncoding(stream);\n\t\t\tthis.alpha_bits = stream.read_u32(\n\t\t\t\t[U32.VAL, 0],\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.BITS, 4],\n\t\t\t);\n\t\t\tthis.target_nits = stream.read_u32(\n\t\t\t\t[U32.VAL, 5],\n\t\t\t\t[U32.VAL, 20],\n\t\t\t\t[U32.VAL, 80],\n\t\t\t\t[U32.BITS_OFFSET, 10, 1],\n\t\t\t);\n\t\t\tthis.m2 = null;\n\t\t} else {\n\t\t\tthis.have_icc = false;\n\t\t\tthis.bits_per_sample = 8;\n\t\t\tthis.color_encoding = new ColorEncoding();\n\t\t\tthis.alpha_bits = 0;\n\t\t\tthis.target_nits = 5 * 50;\n\t\t\tthis.m2 = null;\n\t\t}\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nimport {/* U32, */ BitStream} from './jxl/bit-stream.js';\nimport {SizeHeader} from './jxl/size-header.js';\nimport {ImageMetadata} from './jxl/image-metadata.js';\nimport {COLOR_SPACE} from './jxl/color-encoding.js';\n\n// const CONTAINER_HEADER_SIZE = 48;\n// const MAX_CODESTREAM_BASIC_INFO_SIZE = 50;\n// const MAX_BASIC_INFO_SIZE = CONTAINER_HEADER_SIZE + MAX_CODESTREAM_BASIC_INFO_SIZE;\n\n// https://gitlab.com/wg1/jpeg-xl/-/blob/master/lib/jxl/decode.cc\n// https://arxiv.org/ftp/arxiv/papers/1908/1908.03565.pdf\n\n// signature: Signature\n// size: SizeHeader\n// metadata: ImageMetadata\n\n/**\n * A JPEG XL info provider.\n */\nexport class JXLInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== 0x00;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\tconst size_header = new SizeHeader(bit_stream);\n\n\t\treturn {\n\t\t\twidth: size_header.get_xsize(),\n\t\t\theight: size_header.get_ysize(),\n\t\t\tframes: 1, // TODO: read this from ImageMetadata2\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\t// const size_header = new SizeHeader(bit_stream);\n\t\tconst image_metadata = new ImageMetadata(bit_stream);\n\t\tconst color_encoding = image_metadata.color_encoding;\n\n\t\tconst format = new PixelFormat();\n\n\t\tif (color_encoding) {\n\t\t\tif (color_encoding.color_space === COLOR_SPACE.K_GREY) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_RGB) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYZ) {\n\t\t\t\tformat.color_space = ColorSpace.XYZ;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYB) {\n\t\t\t\tformat.color_space = ColorSpace.XYB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat(color_encoding);\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JXLInfoProvider} from '../image/jxl-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass JXLIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ff0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jxl',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jxl',\n\t\t];\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JXLInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JXLIdentifier);\n","// This is what I percieve to be the ISOBMFF format. This is reverse engineered\n// from several files of different types.\n\nconst MAX_BLOCKS = 2048;\n\n\n// Root Block Tags\n//\n// MP4\n// ---\n// ftyp\n// free\n// mdat\n// moov\n//\n// AVIF\n// ----\n// ftyp\n// meta\n// mdat\n//\n// HEIC\n// ----\n// ftyp\n// meta\n// mdat\n\n\n/** @typedef {ISOBMFFAtom | ISOBMFFBlock} BlockOrAtom */\n\n/**\n * This is a block read from an ISOBMFF encoded file.\n */\nexport class ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFFBlock.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t */\n\tconstructor(length/*: number */, tag/*: string */) {\n\t\tthis.length = length;\n\t\tthis.tag = tag;\n\t}\n\n\t/**\n\t * Read a block from a buffer.\n\t * @param  {Buffer} buffer  The buffer object to read from.\n\t * @param  {number} offset  The offset to the beginning of the block.\n\t * @return {ISOBMFFAtom}   The block that was read.\n\t */\n\tstatic read(buffer/*: Buffer*/, offset/*: number */) {\n\t\tlet block;\n\t\tconst length = buffer.readUInt32BE(offset);\n\n\t\tif (length) {\n\t\t\tconst tag = buffer.toString('ascii', offset + 4, offset + 8);\n\t\t\tconst content = buffer.subarray(offset + 8, offset + length);\n\n\t\t\tif (tag in BLOCK_TYPES) {\n\t\t\t\tblock = new BLOCK_TYPES[tag](length, tag, content);\n\t\t\t} else {\n\t\t\t\tblock = new UnknownAtom(length, tag, content);\n\t\t\t}\n\t\t} else {\n\t\t\tblock = new NullAtom();\n\t\t}\n\n\t\treturn block;\n\t}\n}\n\n/**\n * A ISO BMFF Atom that can contains other Blocks or Atoms.\n */\nclass ISOBMFFBlock extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFF block\n\t * @param  {number} length  The length of the block.\n\t * @param  {string} tag     The tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t * @param  {number} offset  The offset to the beginning of the container.\n\t */\n\tconstructor(length, tag, buffer, offset = 0) {\n\t\tsuper(length, tag);\n\n\t\tthis._buffer = buffer;\n\t\tthis._offset = offset;\n\t\tthis._children = null;\n\t}\n\n\t/**\n\t * Lazy load the children.\n\t * @return {{string: BlockOrAtom}} The children of this block.\n\t */\n\tget children() {\n\t\tconst buffer = this._buffer;\n\t\tconst offset = this._offset;\n\n\t\tif (!this._children) {\n\t\t\tthis._children = {};\n\n\t\t\tfor (const block of this.readBlocks(buffer, offset)) {\n\t\t\t\t// Only take the first block for a particular tag to prevent\n\t\t\t\t// appending data to overwrite content in the file. Which might be\n\t\t\t\t// a security issue.\n\t\t\t\t//\n\t\t\t\t// Also skip null blocks.\n\t\t\t\tif (block.tag !== null && !this._children[block.tag]) {\n\t\t\t\t\tthis._children[block.tag] = block;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._children;\n\t}\n\n\t/**\n\t * Read all of the blocks from this buffer starting at offset.\n\t *\n\t * @param  {Buffer} buffer The buffer object to read from\n\t * @param  {number} offset The offset to start reading from.\n\t * @yields {ISOBMFFBlock} for each block in the buffer.\n\t */\n\t* readBlocks(buffer, offset) {\n\t\tlet bytesProcessed = 0;\n\t\tlet blocksTillMax = MAX_BLOCKS;\n\n\t\twhile (bytesProcessed + offset < buffer.length && blocksTillMax) {\n\t\t\tconst block = ISOBMFFAtom.read(buffer, offset + bytesProcessed);\n\t\t\tbytesProcessed += block.length;\n\t\t\tblocksTillMax--;\n\n\t\t\tyield block;\n\t\t}\n\t}\n}\n\n/**\n * A ISO BMFF block for an unidentified block.\n */\nclass UnknownAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Unknown block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.content = content;\n\t}\n}\n\n/**\n * A null atom for atoms that have zero length.\n */\nclass NullAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a null atom.\n\t */\n\tconstructor() {\n\t\tsuper(4, null);\n\t}\n}\n\n/**\n * This is the root block for all ISOBMFF block, The whole file.\n */\nexport class RootBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new root block.\n\t * @param  {Buffer} buffer The buffer that contains the file.\n\t */\n\tconstructor(buffer) {\n\t\tsuper(buffer.length, null, buffer);\n\t}\n}\n\n/**\n * A ISO BMFF block for an ftyp block.\n * ISO\n */\nclass FtypAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Ftyp block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.majorBrand = this.readBrand(0, content);\n\t\tthis.minorVersion = content.readUInt32BE(4);\n\t\tthis.compatibleBrands = [];\n\n\t\tconst numberOfCompatBrands = (length - 16) / 4;\n\n\t\tfor (let i = 0; i < numberOfCompatBrands; i++) {\n\t\t\tthis.compatibleBrands.push(this.readBrand((i * 4) + 8, content));\n\t\t}\n\t}\n\n\t/**\n\t * Read a brand from a block.\n\t * @param  {number} offset The offset to start reading at\n\t * @param  {Buffer} buffer The buffer to read from\n\t * @return {string}        The brand.\n\t */\n\treadBrand(offset, buffer) {\n\t\treturn buffer.subarray(offset, offset + 4).toString('ascii');\n\t}\n}\n\n/**\n * The ISPE atom. Contains the image width and image height.\n */\nclass ISPEAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ispe block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\t\tthis.unknown = content.readUInt32BE(0);\n\t\tthis.width = content.readUInt32BE(4);\n\t\tthis.height = content.readUInt32BE(8);\n\t}\n}\n\n/**\n * The PIXI atom. Contains the Pixel format.\n */\nclass PIXIAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new pixi block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer);\n\n\t\tconst UNKNOWN_BITS = 4;\n\n\t\tthis.unknown = buffer.readUInt32BE(0);\n\t\tthis.channels = buffer.readUInt8(UNKNOWN_BITS);\n\t\tthis.bitsPerChannel = [];\n\n\t\tfor (let i = 0; i < this.channels; i++) {\n\t\t\tthis.bitsPerChannel.push(buffer.readUInt8(UNKNOWN_BITS + 1));\n\t\t}\n\t}\n}\n\n\n/**\n * A 'iinf' block.\n */\nclass IINFBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new IINFBlock.\n\t * @param  {number} length The length of the block\n\t * @param  {string} tag    The block tag\n\t * @param  {Buffer} buffer The buffer that contains the block content\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer, 6);\n\t}\n}\n\n\nconst BLOCK_TYPES = {\n\t'ftyp': FtypAtom,\n\n\t// HEIC/AVIF\n\t'meta': ISOBMFFBlock,\n\t'iprp': ISOBMFFBlock,\n\t'iinf': IINFBlock,\n\t'ipco': ISOBMFFBlock,\n\t'ispe': ISPEAtom,\n\t'pixi': PIXIAtom,\n\t// 'colr': COLRAtom, // Color Profile\n};\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\nimport {RootBlock} from '../image/isobmff/isobmff.js';\n\n\n/**\n * A AVIF info provider.\n */\nexport class AVIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible AVIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 333;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\t// TODO: implement\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst ispeAtom = root.children.meta.children.iprp.children.ipco.children.ispe;\n\n\t\treturn {\n\t\t\twidth: ispeAtom.width,\n\t\t\theight: ispeAtom.height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst format = new PixelFormat();\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tconst pixi = root.children.meta.children.iprp.children.ipco.children.pixi;\n\n\t\t// console.log(root.children.meta.children.iprp.children.ipco.children);\n\n\t\tif (pixi) {\n\t\t\tconst channels = pixi.channels;\n\n\t\t\tif (channels === 1) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (channels === 3) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t\t}\n\t\t} else {\n\t\t\t// If there is no 'pixi' atom assume RGB. I don't know if this is\n\t\t\t// the correct way of handling this.\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {AVIFInfoProvider} from '../image/avif-info.js';\n\nconst FTYP_START = 4;\nconst FTYPE_LENGTH = 8;\n\n/**\n * An image identifier that identifies ICO images.\n */\nclass AVIFIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > (FTYP_START + FTYPE_LENGTH);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\tconst ftyp = buffer.subarray(FTYP_START, FTYP_START + FTYPE_LENGTH).toString('ascii');\n\n\t\treturn ftyp === 'ftypavif' || ftyp === 'ftypheic';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.avif',\n\t\t\t'.heif',\n\t\t\t'.heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/avif',\n\t\t\t'image/heif',\n\t\t\t'image/heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn AVIFInfoProvider;\n\t}\n}\n\nImageIdentifier.register(AVIFIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies BMP images.\n *\n * https://en.wikipedia.org/wiki/BMP_file_format\n */\nclass BMPIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('424D', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.bmp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/bmp',\n\t\t\t'image/x-bmp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(BMPIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies PSD images.\n */\nclass PSDIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('38425053', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.psd',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/photoshop',\n\t\t\t'image/x-photoshop',\n\t\t\t'image/psd',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(PSDIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nconst FIRST_BYTE = 0;\nconst ICO_MAGIC = 1;\nconst CUR_MAGIC = 2;\nconst MINIMUM_SIZE = 4; // 4 == size of FIRST_BYTE + size of *_MAGIC\n\n/**\n * An image identifier that identifies ICO images.\n */\nclass IcoIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\t// ico: 0000 0001\n\t\t// cur: 0000 0002\n\t\tconst first_magic = buffer.readUInt16LE(0);\n\t\tconst type_magic = buffer.readUInt16LE(2);\n\n\t\treturn first_magic === FIRST_BYTE &&\n\t\t\t(type_magic === ICO_MAGIC || type_magic === CUR_MAGIC);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.ico',\n\t\t\t'.cur',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/x-icon',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(IcoIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies TIFF images.\n */\nclass TIFFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from([0x49, 0x49, 0x2A, 0x00]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.tif',\n\t\t\t'.tiff',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/tiff',\n\t\t\t'image/tiff-fx',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(TIFFIdentifier);\n","/* @flow */\n'use strict';\n\nimport {ImageIdentifier} from '../ident.js';\nconst RIFF_TAG = 0x52494646;\nconst MINIMUM_SIZE = 12; // 12 == size of RIFF_TAG + skipped bytes + size of this.type_tag\n\n/**\n * An image identifier that identifies RIFF based files.\n */\nexport class RIFFIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the type tag of this type of file.\n\t */\n\tget_type_tag()/*: number */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst riff_magic = buffer.readUInt32BE(0);\n\t\tconst type_magic = buffer.readUInt32BE(8);\n\n\t\treturn riff_magic === RIFF_TAG && type_magic === this.get_type_tag();\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport {ImageIdentifier} from '../ident.js';\nimport {RIFFIdentifier} from './riff-ident.js';\nconst WEBP_TYPE_TAG = 0x57454250;\n\n/**\n * An image identifier that identifies WebP images.\n */\nclass WebPIdentifier extends RIFFIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_type_tag() {\n\t\treturn WEBP_TYPE_TAG;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.webp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/webp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(WebPIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that can identify XML files.\n */\nexport class XMLIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the name of the root element of this type of XML file.\n\t */\n\tget_root_element()/*: string */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\t// Only check the first part of the file.\n\t\tconst small_buffer = buffer.slice(0, 512).toString().toLowerCase();\n\n\t\treturn small_buffer.includes('<' + this.get_root_element());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn true;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies SVG images.\n */\nclass SVGIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'svg';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.svg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/svg+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(SVGIdentifier);\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies HTML files.\n */\nclass HTMLIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'html';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.html',\n\t\t\t'.htm',\n\t\t\t'.xhtml',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'text/html',\n\t\t\t'application/xhtml+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(HTMLIdentifier);\n","/* @flow */\n\nimport {WorkHandler} from './work-handler.js';\nimport {Hasher} from './hasher.js';\nimport {ColorSpace} from './pixel-format.js';\nimport {LoggerFactory} from './logger.js';\nimport {EventEmitter} from 'events';\nimport {ImageIdentifier} from './ident.js';\n\n/*::\nimport type { Dimensions, ImageInfo } from './image-info';\nimport type Finder from './finder';\nimport type {FileDescriptor} from './finder';\nimport type {Log} from './logger';\n\nexport type LinterOptions = {\n\tcolor_space: string[],\n\tduplicate: boolean,\n\tbytes_per_pixel: number,\n\tbyte_savings: number,\n\tmismatch: boolean,\n\thelp: boolean,\n\tversion: boolean\n};\n */\n\nimport './ident/png-ident.js';\nimport './ident/gif-ident.js';\nimport './ident/jpg-ident.js';\nimport './ident/jxl-ident.js';\nimport './ident/avif-ident.js';\n\n// Identify only\nimport './ident/bmp-ident.js';\nimport './ident/psd-ident.js';\nimport './ident/ico-ident.js';\nimport './ident/tiff-ident.js';\nimport './ident/webp-ident.js';\nimport './ident/svg-ident.js';\nimport './ident/html-ident.js';\n\n/**\n * The image linter.\n */\nexport class Linter extends EventEmitter {\n\t/*::\n\tfinder: Finder;\n\tdisable_color: boolean;\n\t */\n\n\t/**\n\t * Construct a new Linter\n\t * @param  {Finder} finder The finder to use to locate the images.\n\t */\n\tconstructor(finder/*: Finder */) {\n\t\tsuper();\n\n\t\tthis.finder = finder;\n\t\tthis.disable_color = false;\n\t}\n\n\t/**\n\t * Calculate the optimal size of the image.\n\t *\n\t * @param  {Dimensions} dims   The dimensions of the image.\n\t * @param  {number}     bpp    The bytes per pixel of the image.\n\t * @return {number}            The optimial size of the image.\n\t */\n\tcalculate_optimial_size(dims/*: Dimensions */, bpp/*: number */)/*: number */ {\n\t\treturn ((dims.width * dims.height * dims.frames) * bpp);\n\t}\n\n\t/**\n\t * Construct a description of an image file.\n\t *\n\t * @param  {Dimensions} dims    The dimensions of the image.\n\t * @return {string}             The description of the image.\n\t */\n\tdescribe_file(dims/*: Dimensions */)/*: string */ {\n\t\treturn 'File properties: ' + dims.width + 'x' + dims.height + (dims.frames !== 1 ? ', ' + dims.frames + ' frames' : '');\n\t}\n\n\t/**\n\t * Get the information for the file.\n\t *\n\t * @param  {FileDescriptor} file    The file descriptor.\n\t * @param  {Buffer} buffer          The file buffer.\n\t * @param  {Log} logger             The logger for printing errors.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Promise<ImageInfo>}     The image info.\n\t */\n\tget_info(\n\t\tfile/*: FileDescriptor */,\n\t\tbuffer/*: Buffer */,\n\t\tlogger/*: Log */,\n\t\toptions/*: LinterOptions */)/*: Promise<ImageInfo> */ {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst extension = file.extension.toLowerCase();\n\t\t\tlet identifier = ImageIdentifier.from_extension(extension);\n\t\t\tlet file_buffer/*: ?Buffer */ = null;\n\t\t\tlet is_of_file_type = false;\n\n\t\t\tif (buffer instanceof Buffer) {\n\t\t\t\tfile_buffer = buffer;\n\t\t\t} else {\n\t\t\t\treject('Image buffer is missing, this is a bug.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tis_of_file_type = identifier.is_of_file_type(file_buffer);\n\t\t\t} else {\n\t\t\t\tlogger.warn('There is no information provider for \"' + extension + '\" files.');\n\t\t\t}\n\n\t\t\t// Attenpt to find the correct file type.\n\t\t\tif (!identifier || !is_of_file_type) {\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.info('This file is not what it seems, attempting brute force discovery of file type.');\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info('This file is not what it seems.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = null;\n\n\t\t\t\tfor (const candidate of ImageIdentifier.all_providers()) {\n\t\t\t\t\tif (candidate.can_validate(file_buffer) && candidate.is_of_file_type(file_buffer)) {\n\t\t\t\t\t\tidentifier = candidate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!is_of_file_type) {\n\t\t\t\tlet found_extension = 'unknown';\n\n\t\t\t\tif (identifier) {\n\t\t\t\t\tfound_extension = identifier.get_extension();\n\t\t\t\t}\n\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.warn('There is a mismatch between the file extension (' + extension + ') and the file contents (' + found_extension + ')');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tconst ProviderClass = identifier.get_info_provider();\n\n\t\t\t\tif (!ProviderClass) {\n\t\t\t\t\treject('Unsupported file type');\n\t\t\t\t} else {\n\t\t\t\t\tconst provider = new ProviderClass();\n\n\t\t\t\t\tresolve(provider.get_info(file_buffer));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treject('Unknown file type');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Run the linter\n\t * @param  {string[]} folder        A list of folders to look for images in.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Linter}                 The linter for chaining.\n\t */\n\tlint(folder/*: string[] */, options/*: LinterOptions */)/*: Linter */ {\n\t\tconst linter = this;\n\t\tconst handler = new WorkHandler();\n\t\tconst hasher = new Hasher();\n\t\tlet allowed_color_spaces/*: Set<ColorSpace> | null */ = null;\n\n\t\t// Prepare the allowed color spaces.\n\t\tif (options.color_space) {\n\t\t\tconst spaces = options.color_space;\n\n\t\t\tallowed_color_spaces = new Set();\n\n\t\t\tfor (let space of spaces) {\n\t\t\t\tspace = ColorSpace.from(space);\n\n\t\t\t\tif (space) {\n\t\t\t\t\tallowed_color_spaces.add(space);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thandler.on('next', (file/*: FileDescriptor */, done/*: () => void */) => {\n\t\t\tconst logger = LoggerFactory.get_log(file.path);\n\n\t\t\t/**\n\t\t\t * Handler an error from the loader\n\t\t\t * @param  {Error} err An error.\n\t\t\t */\n\t\t\tfunction error_handler(err/*: Error */) {\n\t\t\t\tif (err.stack) {\n\t\t\t\t\tlogger.error(err.message + ': ' + err.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(err);\n\t\t\t\t}\n\n\t\t\t\tlinter.emit('file.completed', logger);\n\n\t\t\t\tdone();\n\t\t\t}\n\n\t\t\t// console.log(file.path);\n\n\t\t\tfile.loader.load()\n\t\t\t\t.then((buffer) => {\n\t\t\t\t\t// Check for empty files and exit early to prevent unnecessary work.\n\t\t\t\t\tif (buffer.length === 0) {\n\t\t\t\t\t\tthrow 'This is an empty file, further analysis is not possible.';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.duplicate === true) {\n\t\t\t\t\t\tconst found = hasher.contains(file.path, buffer);\n\n\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\tlogger.warn('This file is a duplicate of: ' + found);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.get_info(file, buffer, logger, options);\n\t\t\t\t})\n\t\t\t\t.then((info/*: ImageInfo */) => {\n\t\t\t\t\tif (!info.truncated) {\n\t\t\t\t\t\tconst color_space = info.pixel_format.color_space;\n\t\t\t\t\t\tconst min_bpp = options.bytes_per_pixel;\n\t\t\t\t\t\tconst min_savings = options.byte_savings;\n\t\t\t\t\t\tconst size_difference = info.size - this.calculate_optimial_size(info.dimensions, min_bpp);\n\n\t\t\t\t\t\tlogger.info(this.describe_file(info.dimensions));\n\n\t\t\t\t\t\tif (info.bytes_per_pixel >= min_bpp && (size_difference > min_savings)) {\n\t\t\t\t\t\t\tlogger.warn('The bytes per pixel (' + info.bytes_per_pixel.toFixed(2) + ') exceeds the minimum (' + min_bpp + ').');\n\t\t\t\t\t\t\tlogger.info('You can acheive a minimum savings of ' + size_difference + ' bytes by meeting this threshold.');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (allowed_color_spaces) {\n\t\t\t\t\t\t\tif (color_space.name === 'UNK') {\n\t\t\t\t\t\t\t\tconst channels = color_space.channels > 0 ? color_space.channels : 'an unknown number of';\n\n\t\t\t\t\t\t\t\tlogger.error(`This image has an unknown color space ${ color_space.getUnkFormat() } with ${ channels } channels.`);\n\t\t\t\t\t\t\t} else if (allowed_color_spaces.size && !allowed_color_spaces.has(color_space)) {\n\t\t\t\t\t\t\t\t// console.log('Color Space', color_space);\n\t\t\t\t\t\t\t\tlogger.warn(`The color space of this image is ${ color_space.name }. It must be one of ${ options.color_space }.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error('This image is truncated, further analysis is not possible.');\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit('file.completed', logger);\n\n\t\t\t\t\tdone();\n\t\t\t\t}, error_handler)\n\t\t\t\t.catch(error_handler);\n\t\t});\n\n\t\thandler.on('end', () => {\n\t\t\tthis.emit('linter.completed');\n\t\t});\n\n\t\thandler.start(this.finder.get_files(folder));\n\n\t\treturn this;\n\t}\n}\n","const MINIMUM_BYTES_PER_PIXEL = 3;\nconst MINIMUM_BYTE_SAVINGS = 500;\nconst DEFAULT_COLOR_SPACES = 'G,RGB';\n\nexport const defaults = {\n\t'bytes_per_pixel': MINIMUM_BYTES_PER_PIXEL,\n\t'byte_savings': MINIMUM_BYTE_SAVINGS,\n\t'color_space': DEFAULT_COLOR_SPACES,\n\t'mismatch': true,\n\t'duplicate': true,\n};\n","/* @flow */\nimport {Loader} from '../loader.js';\n\n/**\n * Load files from a web browser Blob object.\n */\nexport class BlobLoader extends Loader {\n\t/*::\n\t_blob: Blob\n\t*/\n\n\t/**\n\t * Construct a new BlobLoader.\n\t *\n\t * @param  {Blob} blob  A web browser Blob object\n\t */\n\tconstructor(blob/*: Blob */) {\n\t\tsuper('');\n\n\t\tthis._blob = blob;\n\t}\n\n\t/**\n\t * Load the file.\n\t * @return {Promise<Buffer>}  The loaded file.\n\t */\n\tasync load()/*: Promise<Buffer> */ {\n\t\tconst arrbuf = await this._blob.arrayBuffer();\n\n\t\treturn Buffer.from(arrbuf);\n\t}\n}\n","/* @flow */\n\n/**\n * A base class for loader instances.\n */\nexport class Loader {\n\t/*::\n\t_path: string;\n\t*/\n\n\t/**\n\t * Construct a new loader instance.\n\t *\n\t * @param  {string} path The path to use for loading files.\n\t */\n\tconstructor(path/*: string */) {\n\t\tthis._path = path;\n\t}\n\n\t/**\n\t * The path.\n\t * @return {string} The path.\n\t */\n\tgetPath()/*: string */ {\n\t\treturn this._path;\n\t}\n\n\t/**\n\t * Load the file at the provided path.\n\t *\n\t * @return {Promise<Buffer>}  An image file.\n\t */\n\tload()/*: Promise<Buffer> */ {\n\t\treturn Promise.reject('Not Implemented!');\n\t}\n}\n","import { render } from \"./app.vue?vue&type=template&id=b195b736\"\nimport script from \"./app.vue?vue&type=script&lang=js\"\nexport * from \"./app.vue?vue&type=script&lang=js\"\n\nimport \"./app.vue?vue&type=style&index=0&id=b195b736&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport {Linter, BufferArrayFinder, ImageIdentifier} from 'image-lint';\n\nconst finder = new BufferArrayFinder(ImageIdentifier.get_all_extensions(), ImageIdentifier.get_all_mimes());\n\nexport default {\n\t'props': ['options', 'files'],\n\tdata() {\n\t\treturn {\n\t\t\tlinter: null,\n\t\t\terror: null,\n\t\t\tresults: null\n\t\t};\n\t},\n\t'watch': {\n\t\tfiles: {\n\t\t\tasync handler(files, files_old) {\n\t\t\t\tlet options = this.options,\n\t\t\t\t\tresults = null,\n\t\t\t\t\tlinter = new Linter(finder);\n\n\t\t\t\ttry {\n\t\t\t\t\tresults = await (new Promise((resolve, reject) => {\n\t\t\t\t\t\tlet result_list = [];\n\n\t\t\t\t\t\tlinter.lint(files, options)\n\t\t\t\t\t\t\t.on('file.completed', (logger) => {\n\t\t\t\t\t\t\t\tresult_list.push(logger);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.on('linter.completed', () => {\n\t\t\t\t\t\t\t\tresolve(result_list);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.error = e;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.results = results;\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t},\n\t'computed': {\n\t\thas_finished() {\n\t\t\treturn this.results !== null || this.error !== null;\n\t\t},\n\t\thas_error() {\n\t\t\treturn this.error !== null;\n\t\t},\n\t\thas_results() {\n\t\t\treturn this.results !== null;\n\t\t}\n\t},\n\t'methods': {\n\t\treformat_log(log) {\n\t\t\tlet log_parts = log.trim().split('\\n');\n\n\t\t\treturn log_parts.map((line) => {\n\t\t\t\treturn line.trim();\n\t\t\t}).join('\\n');\n\t\t}\n\t}\n};\n</script>\n\n<template>\n\t<ul class=\"lint-results\">\n\t\t<li v-for=\"result in results\" class=\"lint-result\" v-bind:class=\"{ 'has-error': has_error, 'has-results': has_results }\">\n\t\t\t<details open>\n\t\t\t\t<summary class=\"lint-result-summary\" v-bind:class=\"{ 'lint-error': result && result.count.error, 'lint-warn': result && result.count.warn }\">\n\t\t\t\t\t{{ result.filename }}\n\t\t\t\t\t<span v-if=\"has_results\"> - \n\t\t\t\t\t\t<span v-if=\"result.count.info\">Info: {{ result.count.info }}<span v-if=\"result.count.warn || result.count.error\">, </span></span>\n\t\t\t\t\t\t<span v-if=\"result.count.warn\">Warnings: {{ result.count.warn }}<span v-if=\"result.count.error\">, </span></span>\n\t\t\t\t\t\t<span v-if=\"result.count.error\">Errors: {{ result.count.error }}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</summary>\n\t\t\t\t<output class=\"lint-result-output\" v-if=\"has_results\" v-html=\"reformat_log(result.log)\"></output>\n\t\t\t</details>\n\t\t</li>\n\t</ul>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.lint-results {\n\tlist-style: none;\n\tpadding: 0;\n}\n\n.lint-result {\n\tmargin: 15px 0px;\n\tbackground: var(--color-layer-bg);\n\tpadding-bottom: 1px; /* Prevent margin-collapse */\n\tborder-radius: 8px;\n\toverflow: hidden;\n}\n\n.lint-result .lint-result-summary {\n\tbackground: var(--color-status-unknown);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result.has-results .lint-result-summary {\n\tbackground: var(--color-status-good);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result .lint-result-summary.lint-warn {\n\tbackground: var(--color-status-warn);\n}\n\n.lint-result .lint-result-summary.lint-error {\n\tbackground: var(--color-status-failure);\n}\n\n.lint-result.has-error .lint-result-summary {\n\tbackground: var(--color-status-error);\n}\n\n.lint-result.has-error .upload-progress,\n.lint-result.has-results .upload-progress {\n\tdisplay: none;\n}\n\n.lint-result-output {\n\tfont-family: monospace;\n\twhite-space: pre-wrap;\n\tmargin: 10px 10px 10px 18px;\n\tdisplay: block;\n}\n</style>","/* @flow */\n\nimport {Finder} from '../finder.js';\nimport {BlobLoader} from '../loader/blob.js';\nimport path from 'path';\n\n/*::\nimport type { FileDescriptor } from '../finder';\n */\n\n/**\n * Finds files in a Browser Blob object.\n */\nexport class BufferArrayFinder extends Finder {\n\t/*::\n\tfilename: string;\n\tpath: string;\n\tbuffer: Buffer;\n\t*/\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_files(initial_files/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\treturn Promise.resolve(this._search.bind(this, initial_files));\n\t}\n\n\t/**\n\t * Traverse the file system yielding any files it finds.\n\t *\n\t * @param {Blob[]} files  The initial queue items.\n\t */\n\t* _search(files/*: Blob[] */)/*: Generator<FileDescriptor, *, *> */ {\n\t\tfor (const file of files) {\n\t\t\tconst extension = path.extname(file.name);\n\n\t\t\tyield {\n\t\t\t\t'path': file.name,\n\t\t\t\t'extension': extension,\n\t\t\t\t'loader': new BlobLoader(file),\n\t\t\t};\n\t\t}\n\t}\n}\n","'use strict';\n/* @flow */\n\n\n/*::\nimport type Loader from './loader';\n\nexport interface FileDescriptor {\n\tpath: string;\n\textension: string;\n\tloader: Loader;\n}\n */\n\n/**\n * A base class for finding files in different mediums.\n */\nexport class Finder {\n\t/*::\n\textensions: string[];\n\tmimes: string[];\n\t */\n\n\t/**\n\t * Construct a new Finder\n\t * @param  {string[]} extensions The list of extensions to look for.\n\t * @param  {string[]} mimes      The list of MIME types to look for.\n\t */\n\tconstructor(extensions/*: string[] */, mimes/*: string[]*/) {\n\t\tthis.extensions = extensions;\n\t\tthis.mimes = mimes;\n\t}\n\n\t/**\n\t * Get an iterator of unresolved file descriptors.\n\t *\n\t * @abstract\n\t * @param {string[]} initial_items The initial set of items to be searched for.\n\t */\n\tget_files(initial_items/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the provided extension is an image extension (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  ext The extension to check.\n\t * @return {boolean}    True if it is an image extension, false otherwise.\n\t */\n\tis_image_extension(ext/*: string */)/*: boolean */ {\n\t\treturn this.extensions.indexOf(ext) >= 0;\n\t}\n\n\t/**\n\t * Determine if the provided MIME type is an image MIME type (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  mime The MIME type to check.\n\t * @return {boolean}     True if it is an image MIME type, false otherwise.\n\t */\n\tis_image_mime(mime/*: string */)/*: boolean */ {\n\t\treturn this.mimes.indexOf(mime) >= 0;\n\t}\n}\n","import { render } from \"./image-collection.vue?vue&type=template&id=a0b1fd20\"\nimport script from \"./image-collection.vue?vue&type=script&lang=js\"\nexport * from \"./image-collection.vue?vue&type=script&lang=js\"\n\nimport \"./image-collection.vue?vue&type=style&index=0&id=a0b1fd20&lang=css\"\n\nimport exportComponent from \"/Users/aaronspaulding/Sites/playground/image-lint/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {createApp} from 'vue';\nimport Multiselect from 'vue-multiselect';\n\nimport Dropzone from '../components/dropzone.vue';\nimport ImageLintApp from '../components/app.vue';\nimport ImageCollection from '../components/image-collection.vue';\n\nimport \"../css/index.css\";\n\n\nconst body = document.body;\nconst rootEl = document.createElement('div');\n\nbody.appendChild(rootEl);\n\ncreateApp(ImageLintApp)\n\t.component('vue-multiselect', Multiselect)\n\t.component('dropzone', Dropzone)\n\t.component('image-lint-app', ImageLintApp)\n\t.component('image-collection', ImageCollection)\n\t.mount(rootEl);\n"],"names":["Array","dt","items","i","getAsFile","files","e","preventDefault","this","$refs","dropzone","classList","remove","from","dataTransfer","$emit","add","class","ref","drop","dragover","dragenter","dragleave","WorkHandler","EventEmitter","constructor","super","_active_handlers","_active_processes","_done_proxy","_done","bind","_iterator","on","_handler_available","next","done","emit","value","Error","start","promise","then","iterator","stack","console","error","name","message","catch","Hasher","trie","Map","find","digest","current","depth","previous","byte","get","set","contains","path","buffer","hash","update","hashes","found_name","ColorSpace","channels","unk_format","all_names","getUnkFormat","static","id","space","has","format","color_space","Set","G","RGB","YCbCr","YCCK","LAB","HSV","CMYK","XYZ","XYB","PixelFormat","indexed","alpha","bit_depth","Log","filename","log","count","is_printable","warn","info","get_error_count","get_warning_count","toString","warn_count","error_count","ImageIdentifier","_info_provider","identify_only","get_info_provider","is_of_file_type","get_extension","get_extensions","get_mime","get_mimes","can_validate","Constructor","provider","is_identify_only","extension","_extension_registry","_all_extensions","push","mime","_mime_registry","_all_mimes","_all_providers","clear","length","MagicNumberIdentifier","get_magic","magic","buffer_magic","slice","Buffer","compare","InfoProvider","calculate_bpp","dims","size","get_overhead","width","height","frames","get_dimensions","get_pixel_format","get_info","is_truncated","truncated","dimensions","pixel_format","bytes_per_pixel","GRAYSCALE_TYPES","RGB_TYPES","ALPHA_TYPES","INDEXED_TYPES","PNGChunk","offset","readUInt32BE","header","data","crc32","verify","alloc","check","writeUInt32BE","crc","PNGInfoProvider","end_chunk","SECTION_LENGTH_WIDTH","IHDR_OFFSET","WIDTH_OFFSET","readInt8","HEIGHT_OFFSET","color_type","BIT_DEPTH_OFFSET","R","B","unkownFormat","register","GIFInfoProvider","next_chunk","block_length","readUInt8","get_sub_block_length","sub_block_length","size_byte","get_color_table_length","color_table_bits","Math","pow","has_color_table","get_version","frame_count","found","SETTINGS_OFFSET","block_header","readUInt16LE","JPGInfoProvider","readUInt16BE","is_sof_chunk","sof_byte","chunks","U32_MAX","IllformedStreamError","BitStream","sub_bit","current_byte","read_from_byte","bits","mask","read_bits","WORD_SIZE","leftovers","shift","start_bits","bytes","floor","read","read_boolean","read_u32","distributions","dist","read_s32","v","read_f16","bits16","sign","biased_exp","mantissa","biased_exp32","mantissa32","ArrayBuffer","Uint32Array","Float32Array","read_customxy","x","y","read_enum","enum_table","get_bits_read","SizeHeader","stream","ysize","xsize","small","ratio","get_small","get_ysize","get_xsize","get_ratio","ENUM_COLOR_SPACE","ENUM_WHITE_POINT","ENUM_PRIMARIES","ENUM_TRANSFER_FUNCTION","ENUM_RENDERING_INTENT","ColorEncoding","received_icc","opaque_icc","white_point","primaries","have_gamma","gamma","transfer_function","rendering_intent","all_default","white","red","green","blue","ImageMetadata","have_icc","bits_per_sample","color_encoding","alpha_bits","target_nits","m2","JXLInfoProvider","bit_stream","size_header","ISOBMFFAtom","tag","block","content","subarray","BLOCK_TYPES","UnknownAtom","NullAtom","ISOBMFFBlock","_buffer","_offset","_children","children","readBlocks","bytesProcessed","blocksTillMax","RootBlock","majorBrand","readBrand","minorVersion","compatibleBrands","numberOfCompatBrands","unknown","bitsPerChannel","UNKNOWN_BITS","AVIFInfoProvider","ispeAtom","meta","iprp","ipco","ispe","root","pixi","ftyp","FTYP_START","first_magic","type_magic","RIFFIdentifier","get_type_tag","riff_magic","XMLIdentifier","get_root_element","toLowerCase","includes","Linter","finder","disable_color","calculate_optimial_size","bpp","describe_file","file","logger","options","Promise","resolve","reject","identifier","from_extension","file_buffer","mismatch","candidate","all_providers","found_extension","ProviderClass","lint","folder","linter","handler","hasher","allowed_color_spaces","spaces","get_log","error_handler","err","loader","load","duplicate","min_bpp","min_savings","byte_savings","size_difference","toFixed","get_files","defaults","BlobLoader","_path","getPath","blob","_blob","async","arrbuf","arrayBuffer","components","GithubButton","Object","assign","split","version","description","href","type","option","step","min","multiple","available","open","extensions","mimes","initial_items","is_image_extension","ext","indexOf","is_image_mime","initial_files","_search","get_all_extensions","get_all_mimes","results","files_old","result_list","immediate","has_finished","has_error","has_results","reformat_log","trim","map","line","join","result","body","document","rootEl","createElement","appendChild","component","mount"],"sourceRoot":""}