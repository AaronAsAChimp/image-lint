{"version":3,"file":"js/main.88bcf705c1a56bd03647.js","mappings":"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","sources":["webpack:///./web/js/index.js","webpack:///../image-lint/lib/api.js","webpack:///../image-lint/lib/args-helper.js","webpack:///../image-lint/lib/finder.js","webpack:///../image-lint/lib/finder/buffer.js","webpack:///../image-lint/lib/hasher.js","webpack:///../image-lint/lib/ident.js","webpack:///../image-lint/lib/ident/bmp-ident.js","webpack:///../image-lint/lib/ident/gif-ident.js","webpack:///../image-lint/lib/ident/html-ident.js","webpack:///../image-lint/lib/ident/ico-ident.js","webpack:///../image-lint/lib/ident/jpg-ident.js","webpack:///../image-lint/lib/ident/jxl-ident.js","webpack:///../image-lint/lib/ident/magic-number-ident.js","webpack:///../image-lint/lib/ident/png-ident.js","webpack:///../image-lint/lib/ident/psd-ident.js","webpack:///../image-lint/lib/ident/riff-ident.js","webpack:///../image-lint/lib/ident/svg-ident.js","webpack:///../image-lint/lib/ident/tiff-ident.js","webpack:///../image-lint/lib/ident/webp-ident.js","webpack:///../image-lint/lib/ident/xml-ident.js","webpack:///../image-lint/lib/image-info.js","webpack:///../image-lint/lib/image/gif-info.js","webpack:///../image-lint/lib/image/jpg-info.js","webpack:///../image-lint/lib/image/jxl-info.js","webpack:///../image-lint/lib/image/jxl/bit-stream.js","webpack:///../image-lint/lib/image/jxl/color-encoding.js","webpack:///../image-lint/lib/image/jxl/image-metadata.js","webpack:///../image-lint/lib/image/jxl/size-header.js","webpack:///../image-lint/lib/image/png-info.js","webpack:///../image-lint/lib/linter.js","webpack:///../image-lint/lib/loader.js","webpack:///../image-lint/lib/loader/blob.js","webpack:///../image-lint/lib/logger.js","webpack:///../image-lint/lib/pixel-format.js","webpack:///../image-lint/lib/work-handler.js"],"sourcesContent":["import ImageLint from 'image-lint';\nimport {createApp, reactive} from 'vue';\nimport Multiselect from 'vue-multiselect';\nimport GithubButton from 'vue-github-button';\n\nimport 'vue-multiselect/dist/vue-multiselect.css';\nimport '../css/site.css';\n\n\nconst body = document.body;\nconst rootEl = document.createElement('div');\nconst appEl = document.createElement('image-lint-app');\n\nrootEl.appendChild(appEl);\nbody.appendChild(rootEl);\n\nconst app = createApp({});\n\n\napp.component('vue-multiselect', Multiselect);\napp.component('dropzone', {\n\t'props': {\n\t\t'modelValue': Array\n\t},\n\t'template': '<div class=\"drop-target\" ref=\"dropzone\" @drop=\"drop\" @dragover=\"dragover\" @dragenter=\"dragenter\" @dragleave=\"dragleave\"><slot>Drop files here</slot></div>',\n\t'methods': {\n\t\t'files': function* (dt) {\n\t\t\tlet files = [];\n\n\t\t\tif (dt.items) {\n\t\t\t\tfor (let i of dt.items) {\n\t\t\t\t\tyield i.getAsFile();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield* dt.files;\n\t\t\t}\n\t\t},\n\t\t'drop': function (e) {\n\t\t\te.preventDefault();\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\n\t\t\tconst files = Array.from(this.files(e.dataTransfer));\n\n\t\t\tthis.$emit('update:modelValue', files);\n\t\t},\n\t\t'dragenter': function () {\n\t\t\tthis.$refs.dropzone.classList.add('active');\n\t\t},\n\t\t'dragleave': function () {\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\t\t},\n\t\t'dragover': function (e) {\n\t\t\te.preventDefault();\n\t\t}\n\t}\n});\n\nconst finder = new ImageLint.BufferArrayFinder(ImageLint.ImageIdentifier.get_all_extensions(), ImageLint.ImageIdentifier.get_all_mimes());\n\nclass ImageContainer {\n\tconstructor(file) {\n\t\tthis.file = file;\n\t\tthis.xhr = null\n\t\tthis.results = null;\n\t\tthis.error = null;\n\t}\n\n\tasync check(options) {\n\t\tlet files = [this.file],\n\t\t\tresults = null,\n\t\t\tlinter = new ImageLint.Linter(finder);\n\n\t\toptions.mismatch = options.mismatch === 'true';\n\t\toptions.duplicate = options.duplicate === 'true';\n\n\t\ttry {\n\t\t\tresults = await (new Promise((resolve, reject) => {\n\t\t\t\tlet result_list = [];\n\n\t\t\t\tlinter.lint(files, options)\n\t\t\t\t\t.on('file.completed', (logger) => {\n\t\t\t\t\t\tresult_list.push(logger);\n\t\t\t\t\t})\n\t\t\t\t\t.on('linter.completed', () => {\n\t\t\t\t\t\tresolve(result_list);\n\t\t\t\t\t});\n\t\t\t}));\n\t\t} catch (e) {\n\t\t\tthis.error = e;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.results = results[0];\n\n\t\tthis.results.log = this._reformat_log(this.results.log);\n\t}\n\n\thas_finished() {\n\t\treturn this.results !== null || this.error !== null;\n\t}\n\n\thas_error() {\n\t\treturn this.error !== null;\n\t}\n\n\thas_results() {\n\t\treturn this.results !== null;\n\t}\n\n\t_form(options) {\n\t\tlet form = new FormData()\n\n\t\tform.append('file', this.file);\n\n\t\tfor (let name in options) {\n\t\t\tlet value = options[name];\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue = value.join(',');\n\t\t\t}\n\t\t\t\n\t\t\tform.append(name, value);\n\t\t}\n\n\t\treturn form;\n\t}\n\n\t_reformat_log(log) {\n\t\tlet log_parts = log.trim().split('\\n');\n\n\t\treturn log_parts.map((line) => {\n\t\t\treturn line.trim();\n\t\t}).join('\\n');\n\t}\n}\n\napp.component('image-lint-app', {\n\tcomponents: {\n\t\tGithubButton\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t'support': {},\n\t\t\t'available': {\n\t\t\t\t'color_space': ['G', 'RGB', 'CMYK', 'YCbCr', 'YCCK', 'LAB', 'HSV']\n\t\t\t},\n\t\t\t'option': {\n\t\t\t\t'mismatch': true,\n\t\t\t\t'duplicate': true,\n\t\t\t\t'bytes_per_pixel': 3,\n\t\t\t\t'byte_savings': 500,\n\t\t\t\t'color_space': ['G', 'RGB']\n\t\t\t},\n\t\t\t'new_files': [],\n\t\t\t'files': []\n\t\t};\n\t},\n\t'template': `\n<div>\n\t<header class=\"lint-header\">\n\t\t<h1 class=\"lint-title\">image-lint</h1>\n\t\t<h2 class=\"lint-subtitle\">Find broken or poorly compressed images.</h2>\n\n\t\t<github-button href=\"https://github.com/aaronasachimp/image-lint\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star aaronasachimp/image-lint on GitHub\">Star</github-button>\n\t</header>\n\t<form class=\"image-lint-app\">\n\t\t<div class=\"pane pane-options\">\n\t\t\t<h3 class=\"lint-options-title\">Options</h3>\n\n\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t<input type=\"checkbox\" v-model=\"option.mismatch\" />\n\t\t\t\tFind mismatches between file type and file extension.\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t<input type=\"checkbox\" v-model=\"option.duplicate\" />\n\t\t\t\tFind files that have been copied.\n\t\t\t</label>\n\t\t\t\n\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\tSet the maximum bytes per pixel before giving a warning.\n\t\t\t\t<input type=\"number\" v-model=\"option.bytes_per_pixel\" step=\"0.1\" min=\"0\" />\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\tSet the minimum byte savings before giving a warning.\n\t\t\t\t<input type=\"number\" v-model=\"option.byte_savings\" min=\"0\" />\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-array\">\n\t\t\t\tSet the allowed color spaces.\n\n\t\t\t\t<vue-multiselect v-model=\"option.color_space\" :multiple=\"true\" :options=\"available.color_space\" />\n\t\t\t</label>\n\t\t</div>\n\t\t<div class=\"pane pane-dropzone\">\n\t\t\t<dropzone v-model=\"new_files\" :class=\"{ empty: files.length == 0 }\">\n\t\t\t\t<div v-if=\"files.length\">\n\t\t\t\t\t<button type=\"button\" v-on:click=\"clear_finished\">Clear Results</button>\n\t\t\t\t\t<ul class=\"lint-results\">\n\t\t\t\t\t\t<li v-for=\"image in files\" class=\"lint-result\" v-bind:class=\"{ 'has-error': image.has_error(), 'has-results': image.has_results() }\">\n\t\t\t\t\t\t\t<details open>\n\t\t\t\t\t\t\t\t<summary class=\"lint-result-summary\" v-bind:class=\"{ 'lint-error': image.results && image.results.count.error, 'lint-warn': image.results && image.results.count.warn }\">\n\t\t\t\t\t\t\t\t\t{{ image.file.name }}\n\t\t\t\t\t\t\t\t\t<span v-if=\"image.has_results()\"> - \n\t\t\t\t\t\t\t\t\t\t<span v-if=\"image.results.count.info\">Info: {{ image.results.count.info }}<span v-if=\"image.results.count.warn || image.results.count.error\">,</span></span>\n\t\t\t\t\t\t\t\t\t\t<span v-if=\"image.results.count.warn\">Warnings: {{ image.results.count.warn }}<span v-if=\"image.results.count.error\">,</span></span>\n\t\t\t\t\t\t\t\t\t\t<span v-if=\"image.results.count.error\">Errors: {{ image.results.count.error }}</span>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</summary>\n\t\t\t\t\t\t\t\t<output class=\"lint-result-output\" v-if=\"image.has_results()\" v-html=\"image.results.log\"></output>\n\t\t\t\t\t\t\t</details>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</dropzone>\n\t\t</div>\n\t</form>\n</div>\n`,\n\t'watch': {\n\t\tnew_files: {\n\t\t\tdeep: true,\n\t\t\thandler(files) {\n\t\t\t\twhile (files.length) {\n\t\t\t\t\tlet file = files.shift();\n\n\t\t\t\t\t// If the file doesn't have a type its probably a folder.\n\t\t\t\t\tif (file.type) {\n\t\t\t\t\t\tconst container = reactive(new ImageContainer(file));\n\n\t\t\t\t\t\tthis.files.push(container);\n\n\t\t\t\t\t\tcontainer.check(this.option);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'methods': {\n\t\t'clear_finished': function () {\n\t\t\tthis.files = this.files.filter((image) => {\n\t\t\t\treturn !image.has_finished();\n\t\t\t});\n\t\t},\n\t}\n})\n\napp.mount(rootEl);\n","/* @flow */\n\nconst linter = require('./linter');\nconst argshelper = require('./args-helper');\nconst InfoProvider = require('./image-info');\nconst ImageIdentifier = require('./ident');\nconst BufferArrayFinder = require('./finder/buffer');\n\nexports.Linter = linter.default;\nexports.ArgsHelper = argshelper.default;\nexports.InfoProvider = InfoProvider;\nexports.ImageIdentifier = ImageIdentifier;\nexports.BufferArrayFinder = BufferArrayFinder;\n","/* @flow */\n\n/*::\nimport type {minimistOptions, minimistOutput} from 'minimist';\n\nexport type ExtendedOptions = {\n\t...minimistOptions,\n\t'-help-usage': string,\n\t'-help-options': {\n\t\t[name: string]: string\n\t},\n}\n*/\n\n/**\n * A helper class for command line arguments.\n */\nclass ArgsHelper {\n\t/**\n\t * Process the arguments to handle the standard arguments like help\n\t * and version.\n\t *\n\t * @param  { ExtendedOptions } config The minimist config\n\t * @param  { object } args            The parsed arguments from minimist.\n\t * @return { boolean }                Returns true if the process should exit.\n\t */\n\tstatic argv(config/*: ExtendedOptions */, args/*: minimistOutput */)/*: boolean */ {\n\t\tif (args.help) {\n\t\t\treturn this.help(config);\n\t\t}\n\n\t\tif (args.version) {\n\t\t\treturn this.version(config);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Load the package info JSON file.\n\t *\n\t * @return {any} The package JSON.\n\t */\n\tstatic load_package_info()/*: any */ {\n\t\treturn require('../package.json');\n\t}\n\n\t/**\n\t * Print an option for display purposes.\n\t *\n\t * @param  {ExtendedOptions} config  The argument configuration.\n\t * @param  {string} name             The name of the option.\n\t * @param  {string} description      A description of the option.\n\t */\n\tstatic print_option(config/*: ExtendedOptions */, name/*: string */, description/*: string */) {\n\t\tlet aliases = [name];\n\t\tlet options = '';\n\t\tlet default_value = '';\n\n\t\tif (config.alias && name in config.alias) {\n\t\t\tconst alias = config.alias[name];\n\n\t\t\tif (!Array.isArray(alias)) {\n\t\t\t\taliases.push(alias);\n\t\t\t} else {\n\t\t\t\taliases = aliases.concat(alias);\n\t\t\t}\n\t\t}\n\n\t\toptions = aliases.map((alias) => {\n\t\t\tlet option = '';\n\n\t\t\t// if the alias has zero length skip it.\n\t\t\tif (alias.length > 1) {\n\t\t\t\toption += '--' + alias;\n\t\t\t} else if (alias.length == 1) {\n\t\t\t\toption += '-' + alias;\n\t\t\t}\n\n\t\t\treturn option;\n\t\t}).join(', ');\n\n\t\tif (config.default && name in config.default) {\n\t\t\tdefault_value = ' Default: ' + config.default[name].toString();\n\t\t}\n\n\t\tconsole.log('  ' + options + '\\t' + description + default_value);\n\t}\n\n\t/**\n\t * Add the help option to the configuration.\n\t *\n\t * @param  {any} config The argument configuration.\n\t * @return {boolean}    True if the process should exit.\n\t */\n\tstatic help(config/*: ExtendedOptions */)/*: boolean */ {\n\t\tconst info = this.load_package_info();\n\n\t\tconsole.log(`${ info.name } - ${ info.description }`);\n\t\tconsole.log(`\\nUsage: ${ config['-help-usage'] }`);\n\t\tconsole.log('\\nOptions: ');\n\n\t\tif ('-help-options' in config) {\n\t\t\tfor (const option in config['-help-options']) {\n\t\t\t\tif (config['-help-options'].hasOwnProperty(option)) {\n\t\t\t\t\tconst description = config['-help-options'][option];\n\n\t\t\t\t\tthis.print_option(config, option, description);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add the version option to the configuration.\n\t *\n\t * @param  {minimistOptions} config The argument configuration.\n\t * @return {boolean}                True if the process should exit.\n\t */\n\tstatic version(config/*: minimistOptions */)/*: boolean */ {\n\t\tconst info = this.load_package_info();\n\n\t\tconsole.log(info.name + ' v' + info.version);\n\n\t\treturn true;\n\t}\n}\n\n\nmodule.exports = {\n\t'default': ArgsHelper,\n};\n","'use strict';\n/* @flow */\n\nconst EventEmitter = require('events');\n\n/*::\nimport type Loader from './loader';\n\nexport interface FileDescriptor {\n\tpath: string;\n\textension: string;\n\tloader: Loader;\n}\n */\n\n/**\n * A base class for finding files in different mediums.\n */\nclass Finder {\n\t/*::\n\textensions: string[];\n\tmimes: string[];\n\t */\n\n\t/**\n\t * Construct a new Finder\n\t * @param  {string[]} extensions The list of extensions to look for.\n\t * @param  {string[]} mimes      The list of MIME types to look for.\n\t */\n\tconstructor(extensions/*: string[] */, mimes/*: string[]*/) {\n\t\tthis.extensions = extensions;\n\t\tthis.mimes = mimes;\n\t}\n\n\t/**\n\t * Get an iterator of unresolved file descriptors.\n\t *\n\t * @param {string[]} initial_items The initial set of items to be searched for.\n\t */\n\tget_files(initial_items/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the provided extension is an image extension (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  ext The extension to check.\n\t * @return {boolean}    True if it is an image extension, false otherwise.\n\t */\n\tis_image_extension(ext/*: string */)/*: boolean */ {\n\t\treturn this.extensions.indexOf(ext) >= 0;\n\t}\n\n\t/**\n\t * Determine if the provided MIME type is an image MIME type (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  mime The MIME type to check.\n\t * @return {boolean}     True if it is an image MIME type, false otherwise.\n\t */\n\tis_image_mime(mime/*: string */)/*: boolean */ {\n\t\treturn this.mimes.indexOf(mime) >= 0;\n\t}\n}\n\nmodule.exports = Finder;\n","/* @flow */\n\nconst Finder = require('../finder'),\n\t  BlobLoader = require('../loader/blob'),\n\t  path = require('path');\n\n/*::\nimport type { FileDescriptor } from '../finder';\n */\n\n/**\n * Finds files in a Browser Blob object.\n */\nclass BufferArrayFinder extends Finder {\n\t/*::\n\tfilename: string;\n\tpath: string;\n\tbuffer: Buffer;\n\t*/\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_files(initial_files/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\treturn Promise.resolve(this._search.bind(this, initial_files));\n\t}\n\n\t/**\n\t * Traverse the file system yielding any files it finds.\n\t *\n\t * @param {Blob[]} files  The initial queue items.\n\t */\n\t* _search(files/*: Blob[] */)/*: Generator<FileDescriptor, *, *> */ {\n\t\tfor (const file of files) {\n\t\t\tconst extension = path.extname(file.name);\n\n\t\t\tyield {\n\t\t\t\t'path': '',\n\t\t\t\t'extension': extension,\n\t\t\t\t'loader': new BlobLoader(file),\n\t\t\t};\n\t\t}\n\t}\n}\n\nmodule.exports = BufferArrayFinder;\n","/* @flow */\n'use strict';\n\nconst TRIE_DEPTH = 3;\nconst HASH_TYPE = 'sha1';\nconst crypto = require('crypto');\n\n/*::\nconst Finder = require('./finder');\n\nimport type { FileDescriptor } from './finder';\n\ntype Trie = Map<string, Map<string, Map<string, Trie>>>;\n*/\n\n/**\n * Find duplicate files.\n */\nclass Hasher {\n\t/*::\n\ttrie: Trie;\n\t*/\n\n\t/**\n\t * Construct a new Hasher.\n\t */\n\tconstructor() {\n\t\tthis.trie = new Map();\n\t}\n\n\t/**\n\t * Retrive the branch of the Trie that would contain the given digest.\n\t * @param  {string} digest A unique hash.\n\t * @return {Trie}          The sub Trie.w\n\t */\n\tfind(digest/*: string */)/*: Trie */ {\n\t\tlet current = this.trie;\n\t\tlet depth = 0;\n\n\t\t// Descend down the trie to find the leaf that contains this digest.\n\t\twhile (depth <= TRIE_DEPTH) {\n\t\t\tconst previous = current;\n\t\t\tconst byte = digest[depth];\n\n\t\t\tcurrent = current.get(byte);\n\n\t\t\tif (!current) {\n\t\t\t\tcurrent = new Map();\n\t\t\t\tprevious.set(byte, current);\n\t\t\t}\n\n\t\t\tdepth++;\n\t\t}\n\n\t\treturn current;\n\t}\n\n\t/**\n\t * Determine if the given buffer has already been seen. If not the hash and\n\t * path will be added to the Trie.\n\t * @param  {string} path    The path to the file.\n\t * @param  {Buffer} buffer  The file's content\n\t * @return {boolean}        The path of the existing file with the\n\t *                          same contents.\n\t */\n\tcontains(path/*: string */, buffer/*: Buffer */)/*: ?string */ {\n\t\t// The leaf should contain a map of digests to file names.\n\t\tconst hash = crypto.createHash(HASH_TYPE);\n\n\t\thash.update(buffer);\n\n\t\tconst digest = hash.digest('binary');\n\t\tconst hashes = this.find(digest);\n\t\tconst found_name = hashes.get(digest);\n\n\t\tif (!found_name) {\n\t\t\thashes.set(digest, path);\n\t\t}\n\n\t\treturn found_name;\n\t}\n}\n\nmodule.exports = Hasher;\n","/* @flow */\n\n/*::\nimport InfoProvider from \"./image-info.js\";\n*/\n\n/**\n * Abstract class to identify the type of images.\n */\nclass ImageIdentifier {\n\t/*::\n\t_info_provider: InfoProvider | null\n\n\tstatic _extension_registry: Map<string, ImageIdentifier>;\n\tstatic _mime_registry: Map<string, ImageIdentifier>;\n\tstatic _image_extensions: string[];\n\tstatic _all_extensions: string[];\n\tstatic _all_mimes: string[];\n\tstatic _all_providers: ImageIdentifier[];\n\t*/\n\n\t/**\n\t * Construct an InfoProvider\n\t */\n\tconstructor() {\n\t\tthis._info_provider = null;\n\t}\n\n\t/**\n\t * Determine if this file type is identify-only or if there is an associated\n\t * information provider.\n\t *\n\t * @return {boolean} True if the file type is identify-only.\n\t */\n\tidentify_only()/*: boolean */ {\n\t\treturn !this.get_info_provider();\n\t}\n\n\t/**\n\t * Determine if the file is of the file type.\n\t *\n\t * @param  {Buffer}  buffer The image buffer.\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common extension for this type of file.\n\t *\n\t * @return {String} containing the extension '.jpg', '.png', etc.\n\t */\n\tget_extension()/*: string */ {\n\t\treturn this.get_extensions()[0];\n\t}\n\n\t/**\n\t * Get the possible file extensions for this type of file having the\n\t * canonical extension as the first element.\n\t */\n\tget_extensions()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common mime for this type of file.\n\t *\n\t * @return {String} containing the mime type 'image/jpeg', 'image/png', etc.\n\t */\n\tget_mime()/*: string */ {\n\t\treturn this.get_mimes()[0];\n\t}\n\n\t/**\n\t * Get the possible MIME types for this type of file having the canonical\n\t * MIME type as the first element.\n\t */\n\tget_mimes()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the buffer contains enough information to be validated.\n\t *\n\t * @param  {Buffer} buffer The image buffer.\n\t * @return {boolean} True if the image can be validated.\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get an instance of the info provider for this file type.\n\t *\n\t * @return {InfoProvider} The info provider.\n\t */\n\tget_info_provider()/*: Class<InfoProvider> | null */ {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Add an image identifier to the registry.\n\t * @param  {function} Constructor The constructor of the identifier.\n\t */\n\tstatic register(Constructor/*: Class<ImageIdentifier> */) {\n\t\tconst provider = new Constructor();\n\t\tconst is_identify_only = provider.identify_only();\n\n\t\tfor (const extension of provider.get_extensions()) {\n\t\t\tthis._extension_registry.set(extension, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_extensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tfor (const mime of provider.get_mimes()) {\n\t\t\tthis._mime_registry.set(mime, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_mimes.push(mime);\n\t\t\t}\n\t\t}\n\n\t\tthis._all_providers.push(provider);\n\t}\n\n\t/**\n\t * Clear the registered identifiers.\n\t */\n\tstatic clear_registry() {\n\t\tthis._extension_registry.clear();\n\t\tthis._all_extensions.length = 0;\n\n\t\tthis._mime_registry.clear();\n\t\tthis._all_mimes.length = 0;\n\n\t\tthis._all_providers.length = 0;\n\t}\n\n\t/**\n\t * Get all of the know file extensions.\n\t *\n\t * @return {string[]} An array of file extension.\n\t */\n\tstatic get_all_extensions()/*: string[] */ {\n\t\treturn ImageIdentifier._all_extensions;\n\t}\n\n\t/**\n\t * Get all of the known MIME types.\n\t *\n\t * @return {string[]} An array of MIME types.\n\t */\n\tstatic get_all_mimes()/*: string[] */ {\n\t\treturn ImageIdentifier._all_mimes;\n\t}\n\n\t/**\n\t * Construct a new identifier using the file extension.\n\t *\n\t * @param {string} extension   The file extension of the.\n\t * @return {ImageIdentifier}  The new image identifier.\n\t */\n\tstatic from_extension(extension/*: string */)/*: ?ImageIdentifier */ {\n\t\treturn ImageIdentifier._extension_registry.get(extension);\n\t}\n\n\t/**\n\t * Iterate all of the registered providers.\n\t */\n\tstatic* all_providers()/*: Generator<ImageIdentifier, void, void>*/ {\n\t\tyield* ImageIdentifier._all_providers;\n\t}\n}\n\nImageIdentifier._extension_registry = new Map();\nImageIdentifier._mime_registry = new Map();\nImageIdentifier._all_providers = [];\nImageIdentifier._all_extensions = [];\nImageIdentifier._all_mimes = [];\n\nmodule.exports = ImageIdentifier;\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\n\n/**\n * An image identifier that identifies BMP images.\n *\n * https://en.wikipedia.org/wiki/BMP_file_format\n */\nclass BMPIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('424D', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.bmp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/bmp',\n\t\t\t'image/x-bmp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(BMPIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\nconst GIFInfoProvider = require('../image/gif-info.js');\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass GIFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('GIF');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn GIFInfoProvider;\n\t}\n}\n\nImageIdentifier.register(GIFIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst XMLIdentifier = require('./xml-ident.js');\n\n/**\n * An image identifier that identifies HTML files.\n */\nclass HTMLIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'html';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.html',\n\t\t\t'.htm',\n\t\t\t'.xhtml',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'text/html',\n\t\t\t'application/xhtml+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(HTMLIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst FIRST_BYTE = 0;\nconst ICO_MAGIC = 1;\nconst CUR_MAGIC = 2;\nconst MINIMUM_SIZE = 4; // 4 == size of FIRST_BYTE + size of *_MAGIC\n\n/**\n * An image identifier that identifies ICO images.\n */\nclass IcoIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\t// ico: 0000 0001\n\t\t// cur: 0000 0002\n\t\tconst first_magic = buffer.readUInt16LE(0);\n\t\tconst type_magic = buffer.readUInt16LE(2);\n\n\t\treturn first_magic === FIRST_BYTE &&\n\t\t\t(type_magic === ICO_MAGIC || type_magic === CUR_MAGIC);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.ico',\n\t\t\t'.cur',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/x-icon',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(IcoIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\nconst JPGInfoProvider = require('../image/jpg-info.js');\n\n/**\n * An image identifier that identifies JPEG images.\n */\nclass JPGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ffd8ff', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jpg',\n\t\t\t'.jpeg',\n\t\t\t'.jpe',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jpeg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JPGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JPGIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\nconst JXLInfoProvider = require('../image/jxl-info.js');\n\n/**\n * An image identifier that identifies GIF images.\n */\nclass JXLIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ff0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jxl',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jxl',\n\t\t];\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JXLInfoProvider;\n\t}\n}\n\nImageIdentifier.register(JXLIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\n\n/**\n * An image identifier that uses a magic number to identify the format.\n */\nclass MagicNumberIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the magic number for this file type\n\t */\n\tget_magic()/*: Buffer */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\t\tconst buffer_magic = buffer.slice(0, magic.length);\n\n\t\t// console.log('Validating magic: ' + this.magic.toString('hex') + ' === ' + buffer_magic.toString('hex'));\n\n\t\treturn Buffer.compare(magic, buffer_magic) === 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\n\t\treturn buffer.length >= magic.length;\n\t}\n}\n\nmodule.exports = MagicNumberIdentifier;\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\nconst PNGInfoProvider = require('../image/png-info.js');\n\n/**\n * An image identifier that identifies PNG images.\n */\nclass PNGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('89504e470d0a1a0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn PNGInfoProvider;\n\t}\n}\n\nImageIdentifier.register(PNGIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\n\n/**\n * An image identifier that identifies PSD images.\n */\nclass PSDIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('38425053', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.psd',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/photoshop',\n\t\t\t'image/x-photoshop',\n\t\t\t'image/psd',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(PSDIdentifier);\n","/* @flow */\n'use strict';\n\nconst ImageIdentifier = require('../ident.js');\nconst RIFF_TAG = 0x52494646;\nconst MINIMUM_SIZE = 12; // 12 == size of RIFF_TAG + skipped bytes + size of this.type_tag\n\n/**\n * An image identifier that identifies RIFF based files.\n */\nclass RIFFInfoProvider extends ImageIdentifier {\n\t/**\n\t * Get the type tag of this type of file.\n\t */\n\tget_type_tag()/*: number */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst riff_magic = buffer.readUInt32BE(0);\n\t\tconst type_magic = buffer.readUInt32BE(8);\n\n\t\treturn riff_magic === RIFF_TAG && type_magic === this.get_type_tag();\n\t}\n}\n\nmodule.exports = RIFFInfoProvider;\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst XMLIdentifier = require('./xml-ident.js');\n\n/**\n * An image identifier that identifies SVG images.\n */\nclass SVGIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'svg';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.svg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/svg+xml',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(SVGIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\nconst MagicNumberIdentifier = require('./magic-number-ident.js');\nconst TIFF_TAG = 0x49492A00;\n\n/**\n * An image identifier that identifies TIFF images.\n */\nclass TIFFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from([0x49, 0x49, 0x2A, 0x00]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.tif',\n\t\t\t'.tiff',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/tiff',\n\t\t\t'image/tiff-fx',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(TIFFIdentifier);\n","/* @flow */\n'use strict';\n\nconst ImageIdentifier = require('../ident.js');\nconst RIFFIdentifier = require('./riff-ident.js');\nconst WEBP_TYPE_TAG = 0x57454250;\n\n/**\n * An image identifier that identifies WebP images.\n */\nclass WebPIdentifier extends RIFFIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_type_tag() {\n\t\treturn WEBP_TYPE_TAG;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.webp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/webp',\n\t\t];\n\t}\n}\n\nImageIdentifier.register(WebPIdentifier);\n","/* @flow */\n\nconst ImageIdentifier = require('../ident.js');\n\n/**\n * An image identifier that can identify XML files.\n */\nclass XMLIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the name of the root element of this type of XML file.\n\t */\n\tget_root_element()/*: string */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\t// Only check the first part of the file.\n\t\tconst small_buffer = buffer.slice(0, 512).toString().toLowerCase();\n\n\t\treturn small_buffer.includes('<' + this.get_root_element());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn true;\n\t}\n}\n\nmodule.exports = XMLIdentifier;\n","/* @flow */\n'use strict';\n\n/*::\nimport type { Log } from './logger.js';\nimport type { FileDescriptor } from './finder.js';\nimport type { LinterOptions } from './linter.js';\nimport type { PixelFormat } from './pixel-format.js';\n\nexport\ninterface Dimensions {\n\twidth: number;\n\theight: number;\n\tframes: number;\n}\n\nexport interface ImageInfo {\n\ttruncated: boolean;\n\tdimensions?: Dimensions;\n\tsize?: number;\n\tpixel_format?: PixelFormat;\n\tbytes_per_pixel?: number;\n}\n*/\n\n/**\n * Gather information about an image file.\n */\nclass InfoProvider {\n\t/**\n\t * Calculate the number of bytes per pixel in the image.\n\t *\n\t * @param  {Dimensions} dims The dimensions of the image.\n\t * @param  {number} size     The file size of the image.\n\t * @return {number}          The number of bytes per pixel.\n\t */\n\tcalculate_bpp(dims/*: Dimensions */, size/*: number */)/*: number */ {\n\t\treturn (size - this.get_overhead()) / (dims.width * dims.height * dims.frames);\n\t}\n\n\t/**\n\t * Get the number of bytes of overhead of this file format.\n\t *\n\t * @return {number} The number in bytes.\n\t */\n\tget_overhead()/*: number */ {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Get the dimensions of the image.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the pixel format of the image.\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * The the information for this file.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @return {ImageInfo}     This image information.\n\t */\n\tget_info(buffer/*: Buffer */)/*: ImageInfo */ {\n\t\tconst info/*: ImageInfo */ = {\n\t\t\t'truncated': this.is_truncated(buffer),\n\t\t};\n\n\t\tif (!info.truncated) {\n\t\t\tconst dims = this.get_dimensions(buffer);\n\n\t\t\tinfo.dimensions = dims;\n\t\t\tinfo.size = buffer.length;\n\t\t\tinfo.pixel_format = this.get_pixel_format(buffer);\n\t\t\tinfo.bytes_per_pixel = this.calculate_bpp(dims, buffer.length);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Is the file truncated.\n\t *\n\t * @param  {Buffer}    buffer A buffer containing a compressed image.\n\t * @return {Boolean}   True if the file is invalid due to it being truncated.\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n}\n\nmodule.exports = InfoProvider;\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nconst InfoProvider = require('../image-info.js'),\n\t  pf = require('../pixel-format');\n\nconst PixelFormat = pf.PixelFormat;\nconst ColorSpace = pf.ColorSpace;\n\nconst VERSION_OFFSET = 0x3;\nconst HEIGHT_OFFSET = 0x6;\nconst WIDTH_OFFSET = 0x8;\nconst SETTINGS_OFFSET = 0xA;\nconst COLOR_TABLE_OFFSET = 0xD;\nconst COLOR_TABLE_AVAILABLE_MASK = 0x80;\nconst COLOR_TABLE_LENGTH_MASK = 0x7;\nconst IMAGE_DESCRIPTOR_OFFSET = 9; // a relative offset from the separator (0x2c)\nconst FILE_TRAILER = 0x3B; // A semicolon;\n\n/**\n * A JPEG info provider.\n */\nclass GIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible GIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 35;\n\t}\n\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The offset of the next chunk.\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst block_length = 2 + buffer.readUInt8(offset + 2);\n\n\t\t// console.log('block_length', block_length);\n\n\t\treturn offset + block_length + this.get_sub_block_length(buffer, offset + block_length + 1) + 1;\n\t}\n\n\t/**\n\t * Get the length of the sub-block.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the sub-block.\n\t */\n\tget_sub_block_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tlet sub_block_length = 0;\n\t\tlet size_byte = buffer.readUInt8(offset);\n\n\t\t// console.log('starting searching for sub-blocks, initial sub-block size', size_byte.toString(16));\n\t\t// if the initial size_byte is 0x00 then we are dealing with a non-data chunk.\n\t\tif (size_byte !== 0) {\n\t\t\twhile (size_byte !== 0) {\n\t\t\t\tsize_byte = buffer.readUInt8(offset + sub_block_length);\n\t\t\t\t// console.log(size_byte);\n\t\t\t\tsub_block_length += size_byte + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tsub_block_length = 1;\n\t\t}\n\n\t\t// console.log('finished searching for sub-blocks, total length is', sub_block_length + 1);\n\n\t\treturn sub_block_length;\n\t}\n\n\t/**\n\t * Get the length of the color table.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the color table.\n\t */\n\tget_color_table_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst color_table_bits = buffer.readUInt8(offset) & COLOR_TABLE_LENGTH_MASK;\n\n\t\t// console.log('color table bits', color_table_bits.toString(16));\n\n\t\treturn 3 * Math.pow(2, color_table_bits + 1);\n\t}\n\n\t/**\n\t * Determine if a color table exists.\n\t *\n\t * @param  {Buffer}  buffer The file buffer.\n\t * @param  {number}  offset The offset in buffer.\n\t * @return {boolean}        True if the file has a color table.\n\t */\n\thas_color_table(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\t// console.log('has color table', !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK));\n\t\treturn !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK);\n\t}\n\n\t/**\n\t * Get the version string.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @return {string}        The version string.\n\t */\n\tget_version(buffer/*: Buffer */)/*: string */ {\n\t\treturn buffer.toString('ascii', VERSION_OFFSET, HEIGHT_OFFSET);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet frame_count = 0;\n\t\tlet found = false;\n\t\tlet offset = 0;\n\n\t\tif (this.has_color_table(buffer, SETTINGS_OFFSET)) {\n\t\t\tconst color_table_length = this.get_color_table_length(buffer, SETTINGS_OFFSET);\n\t\t\toffset = COLOR_TABLE_OFFSET + color_table_length;\n\t\t} else {\n\t\t\toffset = SETTINGS_OFFSET + 3;\n\t\t}\n\n\t\t// console.log(offset);\n\n\t\twhile (!found) {\n\t\t\tlet block_header = buffer.readUInt8(offset);\n\n\t\t\t// console.log('Offset of block', offset);\n\t\t\t// console.log('block header (should be 0x21)', block_header.toString(16));\n\t\t\t// console.log('block label', buffer.readUInt8(offset + 1).toString(16));\n\n\t\t\tif (block_header === 0x2c) {\n\t\t\t\tframe_count++;\n\t\t\t\t// console.log(buffer.readUInt8(offset).toString(16));\n\t\t\t\toffset += IMAGE_DESCRIPTOR_OFFSET;\n\t\t\t\t// Skip the color table, if present\n\n\t\t\t\t// console.log('color table return', this.has_color_table(buffer, offset));\n\t\t\t\tif (this.has_color_table(buffer, offset)) {\n\t\t\t\t\t// console.log('has local color table');\n\t\t\t\t\toffset += this.get_color_table_length(buffer, offset);\n\t\t\t\t}\n\t\t\t\t// Skip the Packed values byte and the \"LZW Minimum Code Size\" byte.\n\t\t\t\toffset += 2;\n\t\t\t\t// Skip the image data\n\t\t\t\toffset += this.get_sub_block_length(buffer, offset);\n\t\t\t\t// console.log('offset', offset);\n\t\t\t\t// console.log('this should be a block header', buffer.readUInt8(offset).toString(16));\n\t\t\t}\n\n\t\t\t// console.log('near the end', offset, buffer.length);\n\n\t\t\tif (offset + 1 >= buffer.length) {\n\t\t\t\t// Normal Termination\n\t\t\t\t// We've reached the end of the file\n\t\t\t\tfound = true;\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tblock_header = buffer.readUInt8(offset);\n\n\t\t\t\tif (block_header !== 0x21 && block_header !== 0x2c) {\n\t\t\t\t\t// Abnormal Termination\n\t\t\t\t\t// There is either junk at the end of the file or its corrupted\n\t\t\t\t\t// (or the programmer made a mistake).\n\t\t\t\t\tfound = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset);\n\t\t}\n\n\t\t// console.log('gif version', this.get_version(buffer));\n\t\t// console.log('number of frames', frame_count);\n\n\t\treturn {\n\t\t\t'width': buffer.readUInt16LE(HEIGHT_OFFSET),\n\t\t\t'height': buffer.readUInt16LE(WIDTH_OFFSET),\n\t\t\t'frames': frame_count,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format()/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tformat.indexed = true;\n\t\tformat.bit_depth.R = 8;\n\t\tformat.bit_depth.G = 8;\n\t\tformat.bit_depth.B = 8;\n\n\t\t// TODO: handle this properly\n\t\tformat.bit_depth.alpha = 1;\n\n\t\treturn format;\n\t}\n}\n\nmodule.exports = GIFInfoProvider;\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nconst InfoProvider = require('../image-info.js'),\n\t  pf = require('../pixel-format');\n\nconst PixelFormat = pf.PixelFormat;\nconst ColorSpace = pf.ColorSpace;\n\nconst MARKER_LENGTH = 2;\nconst CHUNKS_WITH_DIMS = 0xF0;\nconst HEIGHT_OFFSET = 5;\nconst WIDTH_OFFSET = 7;\nconst CHANNELS_OFFSET = 9;\nconst FILE_TRAILER = 0xFFD9;\n\n// https://www.w3.org/Graphics/JPEG/jfif3.pdf\n// http://www.itu.int/rec/T-REC-T.871-201105-I/en\n\n/**\n * A JPEG info provider.\n */\nclass JPGInfoProvider extends InfoProvider {\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param {Buffer} buffer  The file buffer.\n\t * @param {number} offset  The offset of the current chunk.\n\t * @return {number} the offset of the next chunk\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\treturn offset + MARKER_LENGTH + buffer.readUInt16BE(offset + 2); // this.calculate_chunk_length(s1, s2);\n\t}\n\n\t/**\n\t * Determines if this chunk is a SOFn chunk that may conatain matadata for\n\t * this image.\n\t *\n\t * @param  {Buffer}  buffer The buffer source of the image.\n\t * @param  {number}  offset The offset of the start of the chunk\n\t * @return {Boolean}        Returns true if it is a SOFn chunk.\n\t */\n\tis_sof_chunk(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\tconst sof_byte = buffer.readUInt8(offset + 1);\n\n\t\treturn (sof_byte & CHUNKS_WITH_DIMS) === 0xC0 && sof_byte !== 0xC4 && sof_byte !== 0xC8 && sof_byte !== 0xCC;\n\t}\n\n\t/**\n\t * Iterate all the chunks in the file.\n\t *\n\t * @param {Buffer} buffer The buffer to scan through looking for chunks.\n\t * @yields {number} The offset of the next chunk.\n\t */\n\t* chunks(buffer/*: Buffer */)/*: Generator<number, void, number> */ {\n\t\tlet offset = this.next_chunk(buffer, MARKER_LENGTH);\n\t\tlet found = false;\n\n\t\twhile (!found) {\n\t\t\tyield offset;\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset, buffer.length);\n\n\t\t\tif (offset > buffer.length) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt16BE(buffer.length - 2) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet width = null;\n\t\tlet height = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\t// console.log('Reading header');\n\n\t\t\t\twidth = buffer.readUInt16BE(offset + WIDTH_OFFSET);\n\t\t\t\theight = buffer.readUInt16BE(offset + HEIGHT_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!width || !height) {\n\t\t\tthrow new Error('Dimensions not found');\n\t\t}\n\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tlet channels = null;\n\n\t\tfor (const offset of this.chunks(buffer)) {\n\t\t\tif (this.is_sof_chunk(buffer, offset)) {\n\t\t\t\tchannels = buffer.readUInt8(offset + CHANNELS_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (channels === 1) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t} else if (channels === 3) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t} else if (channels === 4) {\n\t\t\tformat.color_space = ColorSpace.CMYK;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n\nmodule.exports = JPGInfoProvider;\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nconst InfoProvider = require('../image-info.js'),\n\t  pf = require('../pixel-format');\n\nconst PixelFormat = pf.PixelFormat;\nconst ColorSpace = pf.ColorSpace;\n\nconst {/* U32, */ BitStream} = require('./jxl/bit-stream');\nconst {SizeHeader} = require('./jxl/size-header');\nconst {ImageMetadata} = require('./jxl/image-metadata');\nconst {COLOR_SPACE} = require('./jxl/color-encoding');\n\n// const CONTAINER_HEADER_SIZE = 48;\n// const MAX_CODESTREAM_BASIC_INFO_SIZE = 50;\n// const MAX_BASIC_INFO_SIZE = CONTAINER_HEADER_SIZE + MAX_CODESTREAM_BASIC_INFO_SIZE;\n\n// https://gitlab.com/wg1/jpeg-xl/-/blob/master/lib/jxl/decode.cc\n// https://arxiv.org/ftp/arxiv/papers/1908/1908.03565.pdf\n\n// signature: Signature\n// size: SizeHeader\n// metadata: ImageMetadata\n\n/**\n * A JPEG XL info provider.\n */\nclass JXLInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== 0x00;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\tconst size_header = new SizeHeader(bit_stream);\n\n\t\treturn {\n\t\t\twidth: size_header.get_xsize(),\n\t\t\theight: size_header.get_ysize(),\n\t\t\tframes: 1, // TODO: read this from ImageMetadata2\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\t// const size_header = new SizeHeader(bit_stream);\n\t\tconst image_metadata = new ImageMetadata(bit_stream);\n\t\tconst color_encoding = image_metadata.color_encoding;\n\n\t\tconst format = new PixelFormat();\n\n\t\tif (color_encoding) {\n\t\t\tif (color_encoding.color_space === COLOR_SPACE.K_GREY) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_RGB) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYZ) {\n\t\t\t\tformat.color_space = ColorSpace.XYZ;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYB) {\n\t\t\t\tformat.color_space = ColorSpace.XYB;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown color space.');\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t}\n}\n\nmodule.exports = JXLInfoProvider;\n","/* @flow */\n\nconst U32_MAX = 0xFFFFFFFF;\n\nconst VAL = 0;\nconst BITS = 1;\nconst BITS_OFFSET = 2;\n\nconst WORD_SIZE = 8;\nconst QUAD_WORD_SIZE = WORD_SIZE * 4;\n\n/*::\ntype Distribution =\n\t[0, number] |\n\t[1, number] |\n\t[2, number, number];\n\ntype Distribution32 = [\n\tDistribution,\n\tDistribution,\n\tDistribution,\n\tDistribution\n];\n\nexport type CustomXY = {\n\tx: number,\n\ty: number\n};\n\ntype EnumTable = Set<number>;\n*/\n\nfunction dbg_byte(bits) {\n\treturn ('00000000' + bits.toString(2)).slice(-8);\n}\n\nclass IllformedStreamError extends Error {\n\n}\n\n/**\n * The JXL bitstream.\n */\nclass BitStream {\n\t/*::\n\tbuffer: Buffer;\n\toffset: number;\n\tsub_bit: number;\n\tcurrent_byte: number;\n\t*/\n\tconstructor(buffer/*: Buffer */, offset/*: number */ = 0) {\n\t\tthis.buffer = buffer;\n\t\tthis.offset = offset;\n\t\tthis.sub_bit = 0;\n\t\tthis.current_byte = buffer.readUInt8(offset);\n\t}\n\n\tread_from_byte(byte/*: number */, offset/*: number */, bits/*: number */)/*: number */ {\n\t\tlet value = byte;\n\n\t\t// This builds the mask with the correct number of '1'. For example:\n\t\t//\n\t\t// | Bits | Mask     |\n\t\t// | ---- | -------- |\n\t\t// |    1 | 00000001 |\n\t\t// |    2 | 00000011 |\n\t\t// |  ... |    ...   |\n\t\t// |    8 | 11111111 |\n\t\tlet mask = (1 << bits) - 1;\n\n\t\t// console.log('mask: ', mask.toString(2));\n\t\t// console.log('mask sub_bit:', this.sub_bit, '- mask bits: ', bits);\n\n\t\t// This positions the mask in the correct spot...\n\t\t//\n\t\t// | sub_bit | Bits | Mask     |\n\t\t// | ------- | ---- | -------- |\n\t\t// |       1 |    2 | 00000011 |\n\t\t// |       2 |    2 | 00000110 |\n\t\t// |   ...   |  ... |    ...   |\n\t\t// |       8 |    2 | 10000000 | (and one from the next byte).\n\t\tmask = (mask << offset) >>> 0;\n\n\t\t// console.log('mask:', mask.toString(2), '- value:', value.toString(2));\n\t\t// console.log('value: ', (value & mask).toString(2));\n\n\t\tvalue = (value & mask) >>> offset;\n\n\t\treturn value;\n\t}\n\n\tread_bits(bits/*: number */)/*: number */ {\n\t\tif (bits > QUAD_WORD_SIZE) {\n\t\t\tthrow new Error(`Can not read more than ${ QUAD_WORD_SIZE } bits at a time. Attempting to read ${ bits }`);\n\t\t}\n\n\t\tif (bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet leftovers = 0;\n\t\tlet shift = 0;\n\t\tconst start_bits = WORD_SIZE - this.sub_bit;\n\n\t\t// console.log('start_bits', start_bits);\n\n\t\t// Read whats leftover from the previous byte. So from here on its whole\n\t\t// bytes only.\n\t\tif (this.sub_bit > 0 && bits > start_bits) {\n\t\t\t// console.log('bits needed from previous byte', start_bits);\n\t\t\tbits -= start_bits\n\t\t\tleftovers = this.read_from_byte(this.current_byte, this.sub_bit, start_bits);\n\t\t\tshift = start_bits;\n\n\t\t\tthis.offset += 1;\n\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\tconst bytes = Math.floor(bits / WORD_SIZE);\n\t\tlet value = leftovers;\n\n\t\t// Read whole bytes\n\t\tif (bytes > 0) {\n\t\t\tfor (let byte = 0; byte < bytes; byte++) {\n\t\t\t\tlet read = this.read_from_byte(this.current_byte, 0, WORD_SIZE);\n\n\t\t\t\t// console.log(`byte ${byte}: `, dbg_byte(read));\n\n\t\t\t\tif (shift) {\n\t\t\t\t\tread = read << shift;\n\t\t\t\t}\n\n\t\t\t\t// console.log('value: ', value.toString(2));\n\n\t\t\t\tthis.offset += 1;\n\t\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\n\t\t\t\tshift += WORD_SIZE;\n\n\t\t\t\tvalue = value | read;\n\t\t\t}\n\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\t// There may still be a couple of bits left to read.\n\t\tbits = bits - (bytes * WORD_SIZE);\n\n\t\tif (bits > 0) {\n\t\t\tlet read = this.read_from_byte(this.current_byte, this.sub_bit, bits);\n\n\t\t\t// console.log(`byte last: `, dbg_byte(read));\n\n\t\t\tif (shift) {\n\t\t\t\tread = read << shift;\n\t\t\t}\n\n\t\t\tvalue = value | read;\n\n\t\t\tthis.sub_bit += bits;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tread_boolean()/*: boolean */ {\n\t\treturn !!this.read_bits(1);\n\t}\n\n\tread_u32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tif (distributions.length > 4) {\n\t\t\tthrow new Error('U32: A u32 takes only 4 distributions.');\n\t\t}\n\n\t\tconst u = this.read_bits(2);\n\t\tconst dist = distributions[u];\n\n\t\t// console.log('distribution', u.toString(2));\n\n\t\tif (dist[0] === VAL) {\n\t\t\treturn dist[1];\n\t\t} else if (dist[0] === BITS) {\n\t\t\treturn this.read_bits(dist[1]);\n\t\t} else if (dist[0] === BITS_OFFSET) {\n\t\t\tif (dist.length !== 3) {\n\t\t\t\tthrow new Error('U32: incorrect number of parameters for BitsOffset distribution.');\n\t\t\t}\n\t\t\treturn (dist[2] + this.read_bits(dist[1])) % U32_MAX;\n\t\t} else {\n\t\t\tthrow new Error('U32: Unknown distribution.')\n\t\t}\n\t}\n\n\tread_s32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tlet v = this.read_u32(...distributions);\n\n\t\tif (v % 2 === 0) {\n\t\t\treturn v >> 1;\n\t\t} else if (v === U32_MAX) {\n\t\t\treturn 0x80000000;\n\t\t} else {\n\t\t\treturn -(v >> 1);\n\t\t}\n\t}\n\n\tread_f16()/*: number */ {\n\t\tconst bits16 = this.read_bits(16);\n\t\tconst sign = bits16 >> 15;\n\t\tconst biased_exp = ( bits16 >> 10 ) & 0x1F;\n\t\tconst mantissa = bits16 & 0x3FF;\n\t\tlet value;\n\n\t\tif (biased_exp === 31) {\n\t\t\tthrow new IllformedStreamError('F16: Invalid biased exponent.');\n\t\t}\n\n\t\tif ( biased_exp == 0 ) {\n\t\t\tvalue = mantissa / ( 1 << 24 );\n\t\t} else {\n\t\t\tconst biased_exp32 = biased_exp + ( 127 - 15 );\n\t\t\tconst mantissa32 = mantissa << ( 23 - 10 );\n\t\t\tconst buffer = new ArrayBuffer(4);\n\t\t\t(new Uint32Array(buffer))[0] = ( sign << 31 ) | ( biased_exp32 << 23 ) | mantissa32;\n\t\t\tvalue = (new Float32Array(buffer))[0];\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tread_customxy()/*: CustomXY */ {\n\t\treturn {\n\t\t\tx: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152]\n\t\t\t),\n\t\t\ty: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152]\n\t\t\t)\n\t\t};\n\t}\n\n\tread_enum(enum_table/*: EnumTable */)/*: number */ {\n\t\tconst value = this.read_u32(\n\t\t\t[VAL, 0],\n\t\t\t[VAL, 1],\n\t\t\t[BITS_OFFSET, 4, 2],\n\t\t\t[BITS_OFFSET, 6, 18]\n\t\t);\n\n\t\tif (value > 63) {\n\t\t\tthrow new IllformedStreamError(`Enum: Invalid value: ${ value }`);\n\t\t} else if (!enum_table.has(value)) {\n\t\t\tthrow new IllformedStreamError(`Enum: Unknown value: ${ value }`);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tget_bits_read()/*: number */ {\n\t\treturn (this.offset * 8) + this.sub_bit;\n\t}\n}\n\nmodule.exports = {\n\tBitStream,\n\tIllformedStreamError,\n\tU32: {\n\t\tVAL,\n\t\tBITS,\n\t\tBITS_OFFSET,\n\t}\n};\n","/* @flow */\n\n/*::\nimport type {BitStream, CustomXY} from './bit-stream';\n*/\n\n/**\n * Color Space enumeration.\n *\n * @type {Object}\n */\nconst COLOR_SPACE = {\n\tK_RGB: 0,\n\tK_GREY: 1,\n\tK_XYB: 2,\n\tK_UNKNOWN: 3,\n\tK_XYZ: 4,\n};\nconst ENUM_COLOR_SPACE = new Set();\n\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_RGB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_GREY);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_UNKNOWN);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYZ);\n\n/**\n * White Point enumeration.\n * @type {Object}\n */\nconst WHITE_POINT = {\n\tK_D65: 1,\n\tK_CUSTOM: 2,\n\tK_E: 10,\n\tK_DCI: 11,\n};\n\nconst ENUM_WHITE_POINT = new Set();\n\nENUM_WHITE_POINT.add(WHITE_POINT.K_D65);\nENUM_WHITE_POINT.add(WHITE_POINT.K_CUSTOM);\nENUM_WHITE_POINT.add(WHITE_POINT.K_E);\nENUM_WHITE_POINT.add(WHITE_POINT.K_DCI);\n\n/**\n * Primaries enumeration.\n * @type {Object}\n */\nconst PRIMARIES = {\n\tK_SRGB: 1,\n\tK_CUSTOM: 2,\n\tK_2100: 9,\n\tK_P3: 11,\n};\nconst ENUM_PRIMARIES = new Set();\n\nENUM_PRIMARIES.add(PRIMARIES.K_SRGB);\nENUM_PRIMARIES.add(PRIMARIES.K_CUSTOM);\nENUM_PRIMARIES.add(PRIMARIES.K_2100);\nENUM_PRIMARIES.add(PRIMARIES.K_P3);\n\n/**\n * Transfer function enumeration.\n * @type {Object}\n */\nconst TRANSFER_FUNCTION = {\n\tK_709: 1,\n\tK_UNKNOWN: 2,\n\tK_LINEAR: 8,\n\tK_SRGB: 13,\n\tK_PQ: 16,\n\tK_DCI: 17,\n\tK_HLG: 18,\n};\nconst ENUM_TRANSFER_FUNCTION = new Set();\n\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_709);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_UNKNOWN);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_LINEAR);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_SRGB);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_PQ);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_DCI);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_HLG);\n\n\n/**\n * Rendering intent enumeration.\n * @type {Object}\n */\nconst RENDERING_INTENT = {\n\tK_PERCEPTUAL: 0,\n\tK_RELATIVE: 1,\n\tK_SATURATION: 2,\n\tK_ABSOLUTE: 3,\n};\nconst ENUM_RENDERING_INTENT = new Set();\n\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_PERCEPTUAL);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_RELATIVE);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_SATURATION);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_ABSOLUTE);\n\n/**\n * The JXL color encoding header.\n */\nclass ColorEncoding {\n\t/*::\n\treceived_icc: boolean;\n\topaque_icc: boolean;\n\tcolor_space: number;\n\twhite_point: number;\n\twhite: CustomXY;\n\tprimaries: number;\n\tred: CustomXY | null;\n\tgreen: CustomXY | null;\n\tblue: CustomXY | null;\n\thave_gamma: boolean;\n\tgamma: number;\n\ttransfer_function: number;\n\trendering_intent: number;\n\t*/\n\tconstructor(stream/*: ?BitStream */) {\n\n\t\tthis.received_icc = false;\n\t\tthis.opaque_icc = false;\n\t\tthis.color_space = COLOR_SPACE.K_RGB;\n\t\tthis.white_point = WHITE_POINT.K_D65;\n\t\tthis.primaries = PRIMARIES.K_SRGB;\n\t\tthis.have_gamma = false;\n\t\tthis.gamma = 0;\n\t\tthis.transfer_function = TRANSFER_FUNCTION.K_SRGB;\n\t\tthis.rendering_intent = RENDERING_INTENT.K_RELATIVE;\n\n\t\tif (stream) {\n\t\t\tconst all_default = stream.read_boolean();\n\n\t\t\tif (!all_default) {\n\t\t\t\tthis.received_icc = stream.read_boolean();\n\n\t\t\t\tif (this.received_icc) {\n\t\t\t\t\tthis.opaque_icc = stream.read_boolean();\n\t\t\t\t} else {\n\t\t\t\t\tthis.opaque_icc = false;\n\t\t\t\t}\n\n\t\t\t\tconst use_desc = !all_default && !this.opaque_icc;\n\n\t\t\t\tif (use_desc) {\n\t\t\t\t\tthis.color_space = stream.read_enum(ENUM_COLOR_SPACE);\n\n\t\t\t\t\tconst not_xy = this.color_space !== COLOR_SPACE.K_XYB && this.color_space !== COLOR_SPACE.K_XYZ;\n\n\t\t\t\t\tif (not_xy) {\n\t\t\t\t\t\tthis.white_point = stream.read_enum(ENUM_WHITE_POINT);\n\n\t\t\t\t\t\tif (this.white_point === WHITE_POINT.K_CUSTOM) {\n\t\t\t\t\t\t\tthis.white = stream.read_customxy();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.primaries = stream.read_enum(ENUM_PRIMARIES);\n\n\t\t\t\t\t\t\tif (this.primaries === PRIMARIES.K_CUSTOM) {\n\t\t\t\t\t\t\t\tthis.red = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.green = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.blue = stream.read_customxy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.have_gamma = stream.read_boolean();\n\n\t\t\t\t\t\tif (this.have_gamma) {\n\t\t\t\t\t\t\tthis.gamma = stream.read_bits(24);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.transfer_function = stream.read_enum(ENUM_TRANSFER_FUNCTION);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.rendering_intent = stream.read_enum(ENUM_RENDERING_INTENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = {\n\tColorEncoding,\n\tCOLOR_SPACE,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nconst {U32} = require('./bit-stream');\nconst {ColorEncoding} = require('./color-encoding');\n\n/*::\nimport type {ImageMetadata2} from './image-metadata2.js';\n*/\n\n/**\n * The JXL image metadata header.\n */\nclass ImageMetadata {\n\t/*::\n\thave_icc: boolean;\n\tbits_per_sample: number;\n\tcolor_encoding: ColorEncoding | null;\n\talpha_bits: number;\n\ttarget_nits: number;\n\tm2: ImageMetadata2 | null;\n\t*/\n\tconstructor(stream/*: BitStream */) {\n\t\tconst all_default = stream.read_boolean();\n\n\t\tif (!all_default) {\n\t\t\tthis.have_icc = stream.read_boolean();\n\t\t\tthis.bits_per_sample = stream.read_u32(\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.VAL, 32],\n\t\t\t\t[U32.BITS, 5]\n\t\t\t);\n\t\t\tthis.color_encoding = new ColorEncoding(stream);\n\t\t\tthis.alpha_bits = stream.read_u32(\n\t\t\t\t[U32.VAL, 0],\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.BITS, 4]\n\t\t\t);\n\t\t\tthis.target_nits = stream.read_u32(\n\t\t\t\t[U32.VAL, 5],\n\t\t\t\t[U32.VAL, 20],\n\t\t\t\t[U32.VAL, 80],\n\t\t\t\t[U32.BITS_OFFSET, 10, 1]\n\t\t\t);\n\t\t\tthis.m2 = null;\n\t\t} else {\n\t\t\tthis.have_icc = false;\n\t\t\tthis.bits_per_sample = 8;\n\t\t\tthis.color_encoding = new ColorEncoding();\n\t\t\tthis.alpha_bits = 0;\n\t\t\tthis.target_nits = 5 * 50;\n\t\t\tthis.m2 = null;\n\t\t}\n\t}\n}\n\nmodule.exports = {\n\tImageMetadata,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nconst {U32} = require('./bit-stream.js');\n\nconst XSIZE_SEPARATE = 0; // xsize coded separately\nconst XSIZE_IS_YSIZE = 1; // xsize = ysize\nconst XSIZE_RATIO_12X10 = 2; // xsize = floor( ysize × 12 / 10)\nconst XSIZE_RATIO_4X3 = 3; // xsize = floor( ysize × 4 / 3)\nconst XSIZE_RATIO_3X2 = 4; // xsize = floor( ysize × 3 / 2)\nconst XSIZE_RATIO_16X9 = 5; // xsize = floor( ysize × 16 / 9)\nconst XSIZE_RATIO_5X4 = 6; // xsize = floor( ysize × 5 / 4)\nconst XSIZE_RATIO_2X1 = 7; // xsize = floor( ysize × 2 / 1)\n\n/**\n * The JXL size header\n */\nclass SizeHeader {\n\t/*::\n\tsmall: boolean;\n\tysize: number;\n\txsize: number;\n\tratio: number;\n\t*/\n\tconstructor(stream/*: BitStream */) {\n\t\tlet ysize;\n\t\tlet xsize;\n\t\tthis.small = stream.read_boolean();\n\n\t\tif (this.small) {\n\t\t\tysize = (stream.read_bits(5) + 1) * 8;\n\t\t} else {\n\t\t\tysize = stream.read_u32(\n\t\t\t\t[U32.BITS, 9],\n\t\t\t\t[U32.BITS, 13],\n\t\t\t\t[U32.BITS, 18],\n\t\t\t\t[U32.BITS, 30]\n\t\t\t) + 1;\n\t\t}\n\n\t\tthis.ratio = stream.read_bits(3);\n\n\t\tif (this.ratio === XSIZE_SEPARATE) {\n\t\t\tif (this.small) {\n\t\t\t\txsize = (stream.read_bits(5) + 1) * 8;\n\t\t\t} else {\n\t\t\t\txsize = stream.read_u32(\n\t\t\t\t\t[U32.BITS, 9],\n\t\t\t\t\t[U32.BITS, 13],\n\t\t\t\t\t[U32.BITS, 18],\n\t\t\t\t\t[U32.BITS, 30]\n\t\t\t\t) + 1;\n\t\t\t}\n\t\t} else if (this.ratio === XSIZE_IS_YSIZE) {\n\t\t\txsize = ysize;\n\t\t} else if (this.ratio === XSIZE_RATIO_12X10) {\n\t\t\txsize = Math.floor(ysize * 12 / 10);\n\t\t} else if (this.ratio === XSIZE_RATIO_4X3) {\n\t\t\txsize = Math.floor(ysize * 4 / 3);\n\t\t} else if (this.ratio === XSIZE_RATIO_3X2) {\n\t\t\txsize = Math.floor(ysize * 3 / 2);\n\t\t} else if (this.ratio === XSIZE_RATIO_16X9) {\n\t\t\txsize = Math.floor(ysize * 16 / 9);\n\t\t} else if (this.ratio === XSIZE_RATIO_5X4) {\n\t\t\txsize = Math.floor(ysize * 5 / 4);\n\t\t} else if (this.ratio === XSIZE_RATIO_2X1) {\n\t\t\txsize = Math.floor(ysize * 2 / 1);\n\t\t} else {\n\t\t\tthrow new Error('SizeHeader: unknown aspect ratio.');\n\t\t}\n\n\t\tthis.ysize = ysize;\n\t\tthis.xsize = xsize;\n\t}\n\n\tget_small()/*: boolean */ {\n\t\treturn this.small;\n\t}\n\n\tget_ysize()/*: number */{\n\t\treturn this.ysize;\n\t}\n\n\tget_xsize()/*: number */{\n\t\treturn this.xsize;\n\t}\n\n\tget_ratio()/*: number */{\n\t\treturn this.ratio;\n\t}\n}\n\nmodule.exports = {\n\tSizeHeader,\n\tRatio: {\n\t\tXSIZE_SEPARATE,\n\t\tXSIZE_IS_YSIZE,\n\t\tXSIZE_RATIO_12X10,\n\t\tXSIZE_RATIO_4X3,\n\t\tXSIZE_RATIO_3X2,\n\t\tXSIZE_RATIO_16X9,\n\t\tXSIZE_RATIO_5X4,\n\t\tXSIZE_RATIO_2X1,\n\t},\n};\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nconst crc = require('crc'),\n\t  InfoProvider = require('../image-info'),\n\t  pf = require('../pixel-format');\n\nconst PixelFormat = pf.PixelFormat;\nconst ColorSpace = pf.ColorSpace;\n\nconst IHDR_OFFSET = 0xC;\nconst SECTION_HEADER_WIDTH = 4;\nconst SECTION_LENGTH_WIDTH = 4;\nconst CRC_WIDTH = 4;\n\nconst WIDTH_OFFSET = IHDR_OFFSET + SECTION_HEADER_WIDTH;\nconst HEIGHT_OFFSET = WIDTH_OFFSET + 4;\nconst BIT_DEPTH_OFFSET = HEIGHT_OFFSET + 4;\nconst COLOR_TYPE_OFFSET = BIT_DEPTH_OFFSET + 1;\n\nconst CHUNK_TYPE_IEND = 0x49454E44;\n\n// const IEND_CRC = 0xAE426082;\nconst IEND_LENGTH = SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + CRC_WIDTH;\n\nconst GRAYSCALE_TYPES = new Set([0, 4]);\nconst RGB_TYPES = new Set([2, 3, 6]);\nconst ALPHA_TYPES = new Set([4, 6]);\nconst INDEXED_TYPES = new Set([4]);\n\n// http://www.libpng.org/pub/png/spec/1.2/\n\n/**\n * A PNG chunk.\n */\nclass PNGChunk {\n\t/*::\n\tlength: number;\n\theader: number;\n\tdata: Buffer;\n\tcrc32: number;\n\t*/\n\n\t/**\n\t * Construct a new PNG chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */) {\n\t\tthis.length = buffer.readUInt32BE(offset);\n\t\tthis.header = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH);\n\t\tthis.data = buffer.slice(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH, this.length);\n\t\tthis.crc32 = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + this.length);\n\t}\n\n\t/**\n\t * Verify the CRC in the chunk.\n\t *\n\t * @return {boolean} True if its a valid chunk.\n\t */\n\tverify()/*: boolean */ {\n\t\tconst header = Buffer.alloc(4);\n\t\tlet check = null;\n\n\t\theader.writeUInt32BE(this.header, 0);\n\n\t\tcheck = crc.crc32(header);\n\t\tcheck = crc.crc32(this.data, check);\n\n\t\treturn check === this.crc32;\n\t}\n}\n\n/**\n * A PNG info provider.\n */\nclass PNGInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible PNG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 67;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tlet end_chunk = null;\n\n\t\ttry {\n\t\t\tend_chunk = new PNGChunk(buffer, buffer.length - IEND_LENGTH);\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn end_chunk.header === CHUNK_TYPE_IEND && !end_chunk.verify();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\treturn {\n\t\t\twidth: buffer.readUInt32BE(WIDTH_OFFSET),\n\t\t\theight: buffer.readUInt32BE(HEIGHT_OFFSET),\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tconst bit_depth = buffer.readInt8(BIT_DEPTH_OFFSET);\n\t\tconst color_type = buffer.readInt8(COLOR_TYPE_OFFSET);\n\n\t\t// Determine the color space\n\t\tif (RGB_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\tformat.bit_depth.R = bit_depth;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t\tformat.bit_depth.B = bit_depth;\n\t\t} else if (GRAYSCALE_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t} else {\n\t\t\tthrow new Error('Unknown color type ' + color_type);\n\t\t}\n\n\t\t// Determine the alpha channel\n\t\tif (ALPHA_TYPES.has(color_type)) {\n\t\t\tformat.alpha = true;\n\t\t\tformat.bit_depth.alpha = bit_depth;\n\t\t}\n\n\t\t// Determine if it is indexed.\n\t\tif (INDEXED_TYPES.has(color_type)) {\n\t\t\tformat.indexed = true;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n\nmodule.exports = PNGInfoProvider;\n","/* @flow */\n\nconst WorkHandler = require('./work-handler');\nconst Hasher = require('./hasher');\nconst pf = require('./pixel-format');\nconst ColorSpace = pf.ColorSpace;\nconst LoggerFactory = require('./logger').LoggerFactory;\nconst EventEmitter = require('events');\nconst ImageIdentifier = require('./ident.js');\n\n/*::\nimport type { Dimensions, ImageInfo } from './image-info';\nimport type Finder from './finder';\nimport type {FileDescriptor} from './finder';\nimport type {Log} from './logger';\n\nexport type LinterOptions = {\n\tcolor_space: string[],\n\tduplicate: boolean,\n\tbytes_per_pixel: number,\n\tbyte_savings: number,\n\tmismatch: boolean,\n\thelp: boolean,\n\tversion: boolean\n};\n */\n\nrequire('./ident/png-ident.js');\nrequire('./ident/gif-ident.js');\nrequire('./ident/jpg-ident.js');\nrequire('./ident/jxl-ident.js');\n\n// Identify only\nrequire('./ident/bmp-ident.js');\nrequire('./ident/psd-ident.js');\nrequire('./ident/ico-ident.js');\nrequire('./ident/tiff-ident.js');\nrequire('./ident/webp-ident.js');\nrequire('./ident/svg-ident.js');\nrequire('./ident/html-ident.js');\n\n/**\n * The image linter.\n */\nclass Linter extends EventEmitter {\n\t/*::\n\tfinder: Finder;\n\tdisable_color: boolean;\n\t */\n\n\t/**\n\t * Construct a new Linter\n\t * @param  {Finder} finder The finder to use to locate the images.\n\t */\n\tconstructor(finder/*: Finder */) {\n\t\tsuper();\n\n\t\tthis.finder = finder;\n\t\tthis.disable_color = false;\n\t}\n\n\t/**\n\t * Calculate the optimal size of the image.\n\t *\n\t * @param  {Dimensions} dims   The dimensions of the image.\n\t * @param  {number}     bpp    The bytes per pixel of the image.\n\t * @return {number}            The optimial size of the image.\n\t */\n\tcalculate_optimial_size(dims/*: Dimensions */, bpp/*: number */)/*: number */ {\n\t\treturn ((dims.width * dims.height * dims.frames) * bpp);\n\t}\n\n\t/**\n\t * Construct a description of an image file.\n\t *\n\t * @param  {Dimensions} dims    The dimensions of the image.\n\t * @return {string}             The description of the image.\n\t */\n\tdescribe_file(dims/*: Dimensions */)/*: string */ {\n\t\treturn 'File properties: ' + dims.width + 'x' + dims.height + (dims.frames !== 1 ? ', ' + dims.frames + ' frames' : '');\n\t}\n\n\t/**\n\t * Get the information for the file.\n\t *\n\t * @param  {FileDescriptor} file    The file descriptor.\n\t * @param  {Buffer} buffer          The file buffer.\n\t * @param  {Log} logger             The logger for printing errors.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Promise<ImageInfo>}     The image info.\n\t */\n\tget_info(file/*: FileDescriptor */, buffer/*: Buffer */, logger/*: Log */, options/*: LinterOptions */)/*: Promise<ImageInfo> */ {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst extension = file.extension.toLowerCase();\n\t\t\tlet identifier = ImageIdentifier.from_extension(extension);\n\t\t\tlet file_buffer/*: ?Buffer */ = null;\n\t\t\tlet is_of_file_type = false;\n\n\t\t\tif (buffer instanceof Buffer) {\n\t\t\t\tfile_buffer = buffer;\n\t\t\t} else {\n\t\t\t\treject('Image buffer is missing, this is a bug.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tis_of_file_type = identifier.is_of_file_type(file_buffer);\n\t\t\t} else {\n\t\t\t\tlogger.warn('There is no information provider for \"' + extension + '\" files.');\n\t\t\t}\n\n\t\t\t// Attenpt to find the correct file type.\n\t\t\tif (!identifier || !is_of_file_type) {\n\t\t\t\tlogger.info('This file is not what it seems, attempting brute force discovery of file type.');\n\n\t\t\t\tidentifier = null;\n\n\t\t\t\tfor (const candidate of ImageIdentifier.all_providers()) {\n\t\t\t\t\tif (candidate.can_validate(file_buffer) && candidate.is_of_file_type(file_buffer)) {\n\t\t\t\t\t\tidentifier = candidate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!is_of_file_type) {\n\t\t\t\tlet found_extension = 'unknown';\n\n\t\t\t\tif (identifier) {\n\t\t\t\t\tfound_extension = identifier.get_extension();\n\t\t\t\t}\n\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.warn('There is a mismatch between the file extension (' + extension + ') and the file contents (' + found_extension + ')');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tconst ProviderClass = identifier.get_info_provider();\n\n\t\t\t\tif (!ProviderClass) {\n\t\t\t\t\treject('Unsupported file type');\n\t\t\t\t} else {\n\t\t\t\t\tconst provider = new ProviderClass();\n\n\t\t\t\t\tresolve(provider.get_info(file_buffer));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treject('Unknown file type');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Run the linter\n\t * @param  {string[]} folder        A list of folders to look for images in.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Linter}                 The linter for chaining.\n\t */\n\tlint(folder/*: string[] */, options/*: LinterOptions */)/*: Linter */ {\n\t\tconst linter = this;\n\t\tconst handler = new WorkHandler();\n\t\tconst hasher = new Hasher();\n\t\tlet allowed_color_spaces/*: Set<ColorSpace> | null */ = null;\n\n\t\t// Prepare the allowed color spaces.\n\t\tif (options.color_space) {\n\t\t\tconst spaces = options.color_space;\n\n\t\t\tallowed_color_spaces = new Set();\n\n\t\t\tfor (let space of spaces) {\n\t\t\t\tspace = ColorSpace.from(space);\n\n\t\t\t\tif (space) {\n\t\t\t\t\tallowed_color_spaces.add(space);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thandler.on('next', (file/*: FileDescriptor */, done/*: () => void */) => {\n\t\t\tconst logger = LoggerFactory.get_log(file.path);\n\n\t\t\t/**\n\t\t\t * Handler an error from the loader\n\t\t\t * @param  {Error} err An error.\n\t\t\t */\n\t\t\tfunction error_handler(err/*: Error */) {\n\t\t\t\tif (err.stack) {\n\t\t\t\t\tlogger.error(err.message + ': ' + err.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(err);\n\t\t\t\t}\n\n\t\t\t\tlinter.emit('file.completed', logger);\n\n\t\t\t\tdone();\n\t\t\t}\n\n\t\t\t// console.log(file.path);\n\n\t\t\tfile.loader.load()\n\t\t\t\t.then((buffer) => {\n\t\t\t\t\t// Check for empty files and exit early to prevent unnecessary work.\n\t\t\t\t\tif (buffer.length === 0) {\n\t\t\t\t\t\tthrow 'This is an empty file, further analysis is not possible.';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.duplicate === true) {\n\t\t\t\t\t\tconst found = hasher.contains(file.path, buffer);\n\n\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\tlogger.warn('This file is a duplicate of: ' + found);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.get_info(file, buffer, logger, options);\n\t\t\t\t})\n\t\t\t\t.then((info/*: ImageInfo */) => {\n\t\t\t\t\tif (!info.truncated) {\n\t\t\t\t\t\tconst color_space = info.pixel_format.color_space;\n\t\t\t\t\t\tconst min_bpp = options.bytes_per_pixel;\n\t\t\t\t\t\tconst min_savings = options.byte_savings;\n\t\t\t\t\t\tconst size_difference = info.size - this.calculate_optimial_size(info.dimensions, min_bpp);\n\n\t\t\t\t\t\tlogger.info(this.describe_file(info.dimensions));\n\n\t\t\t\t\t\tif (info.bytes_per_pixel >= min_bpp && (size_difference > min_savings)) {\n\t\t\t\t\t\t\tlogger.warn('The bytes per pixel (' + info.bytes_per_pixel.toFixed(2) + ') exceeds the minimum (' + min_bpp + ').');\n\t\t\t\t\t\t\tlogger.info('You can acheive a minimum savings of ' + size_difference + ' bytes by meeting this threshold.');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (allowed_color_spaces && allowed_color_spaces.size && !allowed_color_spaces.has(color_space)) {\n\t\t\t\t\t\t\t// console.log('Color Space', color_space);\n\t\t\t\t\t\t\tlogger.warn(`The color space of this image is ${ color_space.name }. It must be one of ${ options.color_space }.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error('This image is truncated, further analysis is not possible.');\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit('file.completed', logger);\n\n\t\t\t\t\tdone();\n\t\t\t\t}, error_handler)\n\t\t\t\t.catch(error_handler);\n\t\t});\n\n\t\thandler.on('end', () => {\n\t\t\tthis.emit('linter.completed');\n\t\t});\n\n\t\thandler.start(this.finder.get_files(folder));\n\n\t\treturn this;\n\t}\n}\n\nmodule.exports.default = Linter;\n","/* @flow */\n\n/**\n * A base class for loader instances.\n */\nclass Loader {\n\t/*::\n\t_path: string;\n\t*/\n\n\t/**\n\t * Construct a new loader instance.\n\t *\n\t * @param  {string} path The path to use for loading files.\n\t */\n\tconstructor(path/*: string */) {\n\t\tthis._path = path;\n\t}\n\n\t/**\n\t * The path.\n\t * @return {string} The path.\n\t */\n\tgetPath()/*: string */ {\n\t\treturn this._path;\n\t}\n\n\t/**\n\t * Load the file at the provided path.\n\t *\n\t * @return {Promise<Buffer>}  An image file.\n\t */\n\tload()/*: Promise<Buffer> */ {\n\t\treturn Promise.reject('Not Implemented!');\n\t}\n}\n\nmodule.exports = Loader;\n","/* @flow */\nconst Loader = require('../loader');\n\n/**\n * Load files from a web browser Blob object.\n */\nclass BlobLoader extends Loader {\n\t/*::\n\t_blob: Blob\n\t*/\n\n\t/**\n\t * Construct a new BlobLoader.\n\t *\n\t * @param  {Blob} blob  A web browser Blob object\n\t */\n\tconstructor(blob/*: Blob */) {\n\t\tsuper('');\n\n\t\tthis._blob = blob;\n\t}\n\n\t/**\n\t * Load the file.\n\t * @return {Promise<Buffer>}  The loaded file.\n\t */\n\tasync load()/*: Promise<Buffer> */ {\n\t\tconst arrbuf = await this._blob.arrayBuffer();\n\n\t\treturn Buffer.from(arrbuf);\n\t}\n}\n\nmodule.exports = BlobLoader;\n","/* @flow */\n'use strict';\n\nconst chalk = require('chalk');\n\n/*::\ninterface LogCounts {\n\tinfo: number;\n\twarn: number;\n\terror: number;\n}\n*/\n\n/**\n * A logger for writing the output to a string.\n */\nclass Log {\n\t/*::\n\tfilename: string;\n\tlog: string;\n\tcount: LogCounts;\n\t*/\n\n\t/**\n\t * Construct a new logger, generally you should use the logger factory\n\t * instead of directly constructing this object.\n\t *\n\t * @param  {string} filename The name of the file that is being linted.\n\t */\n\tconstructor(filename/*: string */) {\n\t\tthis.filename = filename;\n\t\tthis.log = '';\n\t\tthis.count = {\n\t\t\t'info': 0,\n\t\t\t'warn': 0,\n\t\t\t'error': 0,\n\t\t};\n\t}\n\n\t/**\n\t * Determine if this should be printed.\n\t * @return {boolean} true if the log should be printed.\n\t */\n\tis_printable()/*: boolean */ {\n\t\treturn this.count.warn > 0 || this.count.error > 0;\n\t}\n\n\t/**\n\t * Log a message at the 'info' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\tinfo(message/*: string */) {\n\t\tthis.count.info++;\n\t\tthis.log += '\\n  INFO:  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'warn' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\twarn(message/*: string */) {\n\t\tthis.count.warn++;\n\t\tthis.log += '\\n  ' + chalk.yellow('WARN:') + '  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'error' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\terror(message/*: string */) {\n\t\tthis.count.error++;\n\t\tthis.log += '\\n  ' + chalk.red('ERROR:') + '  ' + message;\n\t}\n\n\t/**\n\t * Convert this log to a string.\n\t * @return {string} The log output.\n\t */\n\ttoString()/*: string */ {\n\t\tlet warn_count = this.count.warn.toString();\n\t\tlet error_count = this.count.error.toString();\n\n\t\tif (this.count.warn) {\n\t\t\twarn_count = chalk.yellow(warn_count);\n\t\t}\n\n\t\tif (this.count.error) {\n\t\t\terror_count = chalk.red(error_count);\n\t\t}\n\n\t\treturn this.filename + this.log + '\\n' +\n\t\t\twarn_count + ' warnings. ' +\n\t\t\terror_count + ' errors.';\n\t}\n}\n\n/**\n * A factory for creating new logs.\n */\nclass LoggerFactory {\n\t/**\n\t * Get a new instance of a logger.\n\t *\n\t * @param {string} filename The filename of the file being linted.\n\t * @return {Log}            The new logging instance.\n\t */\n\tstatic get_log(filename/*: string */)/*: Log */ {\n\t\treturn new Log(filename);\n\t}\n}\n\nexports.LoggerFactory = LoggerFactory;\nexports.Log = Log;\n","/* @flow */\n'use strict';\n\n/**\n * An enumeration of all of the color spaces\n */\nclass ColorSpace {\n\t/*::\n\tstatic G: ColorSpace;\n\tstatic RGB: ColorSpace;\n\tstatic YCbCr: ColorSpace;\n\tstatic YCCK: ColorSpace;\n\tstatic LAB: ColorSpace;\n\tstatic HSV: ColorSpace;\n\tstatic CMYK: ColorSpace;\n\tstatic XYZ: ColorSpace;\n\tstatic XYB: ColorSpace;\n\n\tstatic all_names: Set<string>;\n\n\tname: string;\n\tchannels: number;\n\n\t*/\n\n\t/**\n\t * Construct a new ColorSpace.\n\t * @param  {string} name     The name of the color space.\n\t * @param  {number} channels The number of channels for this color space.\n\t */\n\tconstructor(name/*: string */, channels/*: number */) {\n\t\tthis.name = name;\n\t\tthis.channels = channels;\n\n\t\tColorSpace.all_names.add(name);\n\t}\n\n\t/**\n\t * Get an existing color space with the given name.\n\t * @param  {string} id   The name of the color space.\n\t * @return {ColorSpace}  The color space or null if no color space exists\n\t *                       with that name.\n\t */\n\tstatic from(id/*: string*/)/*: ColorSpace | null */ {\n\t\tlet space/*: ColorSpace | null */ = null;\n\n\t\tif (this.all_names.has(id)) {\n\t\t\tspace = (ColorSpace/*: any */)[id];\n\t\t}\n\n\t\treturn space;\n\t}\n}\n\nColorSpace.all_names = new Set();\n\nColorSpace.G = new ColorSpace('G', 1);\nColorSpace.RGB = new ColorSpace('RGB', 3);\nColorSpace.YCbCr = new ColorSpace('YCbCr', 3);\nColorSpace.YCCK = new ColorSpace('YCCK', 4);\nColorSpace.LAB = new ColorSpace('LAB', 3);\nColorSpace.HSV = new ColorSpace('HSV', 3);\nColorSpace.CMYK = new ColorSpace('CMYK', 4);\nColorSpace.XYZ = new ColorSpace('XYZ', 3);\nColorSpace.XYB = new ColorSpace('XYB', 3);\n\n/**\n * The pixel format of an image.\n */\nclass PixelFormat {\n\t/*::\n\tcolor_space: ColorSpace;\n\tindexed: boolean;\n\talpha: boolean;\n\tbit_depth: { [channel: string]: number};\n\t*/\n\n\t/**\n\t * Construct a new PixelFormat\n\t */\n\tconstructor() {\n\t\tthis.indexed = false;\n\t\tthis.alpha = false;\n\t\tthis.bit_depth = {};\n\t}\n}\n\nmodule.exports = {\n\t'ColorSpace': ColorSpace,\n\t'PixelFormat': PixelFormat,\n};\n","/* @flow */\n'use strict';\n\nconst EventEmitter = require('events');\n\n// const MAX_ACTIVE_HANDLERS = 1;\nconst MAX_ACTIVE_HANDLERS = 10;\n\n/**\n * Manage workloads so the async queue doesn't get filled before any work can\n * be done. An iterable is provided to the the start method each item will be\n * emitted for processing with the 'next' event.\n *\n * The 'next' event handler will be provided two parameter, the next item in the\n * iterable and a 'done' function to be called to release the work handler back\n * to the pool.\n */\nclass WorkHandler /*:: <T> */ extends EventEmitter {\n\t/*::\n\t_active_handlers: number;\n\t_active_processes: number;\n\t_done_proxy: () => void;\n\t_iterator: Iterator<T> | null;\n\t*/\n\n\t/**\n\t * Construct a new WorkHandler\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._active_handlers = 0;\n\t\tthis._active_processes = 0;\n\t\tthis._done_proxy = this._done.bind(this);\n\t\tthis._iterator = null;\n\n\t\tthis.on('handler.available', this._handler_available.bind(this));\n\t}\n\n\t/**\n\t * Kick off the next element in the iterable.\n\t */\n\t_handler_available() {\n\t\tif (this._iterator) {\n\t\t\tconst next = this._iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\tthis._iterator = null;\n\t\t\t} else {\n\t\t\t\tthis.emit('next', next.value, this._done_proxy);\n\t\t\t\tthis._active_handlers++;\n\t\t\t\tthis._active_processes++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Release the work handler to the pool.\n\t */\n\t_done() {\n\t\tthis._active_handlers--;\n\t\tthis._active_processes--;\n\n\t\t// console.log('handlers', this._active_handlers);\n\t\t// console.log('processes', this._active_processes);\n\n\t\tif (this._active_handlers >= 0) {\n\t\t\tthis.emit('handler.available');\n\t\t} else {\n\t\t\tthrow new Error('No handlers available, did you call done?');\n\t\t}\n\n\t\tif (this._active_processes <= 0) {\n\t\t\tthis.emit('end');\n\t\t}\n\t}\n\n\t/**\n\t * Start the work handler.\n\t * @param  {Promise<Iterable<T>>} promise An iterable of items that will\n\t *                                        be processed.\n\t */\n\tstart(promise/*: Promise<Iterable<T>> */) {\n\t\tif (this._iterator) {\n\t\t\tthrow new Error('Work is in progress');\n\t\t}\n\n\t\tthis._active_handlers = 0;\n\n\t\tpromise\n\t\t\t.then((iterator) => {\n\t\t\t\tthis._iterator = iterator();\n\n\t\t\t\twhile (this._active_handlers < MAX_ACTIVE_HANDLERS) {\n\t\t\t\t\tthis.emit('handler.available');\n\t\t\t\t\tthis._active_handlers++;\n\t\t\t\t}\n\t\t\t}, (e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n\nmodule.exports = WorkHandler;\n"],"names":["body","document","rootEl","createElement","appEl","appendChild","app","component","Array","dt","items","i","getAsFile","files","e","preventDefault","this","$refs","dropzone","classList","remove","from","dataTransfer","$emit","add","finder","ImageContainer","constructor","file","xhr","results","error","async","options","linter","mismatch","duplicate","Promise","resolve","reject","result_list","lint","on","logger","push","log","_reformat_log","has_finished","has_error","has_results","_form","form","FormData","append","name","value","isArray","join","trim","split","map","line","components","GithubButton","data","new_files","deep","handler","length","shift","type","container","check","option","filter","image","mount","argshelper","ImageIdentifier","BufferArrayFinder","exports","default","module","static","config","args","help","version","description","aliases","default_value","alias","concat","toString","console","info","load_package_info","hasOwnProperty","print_option","extensions","mimes","get_files","initial_items","Error","is_image_extension","ext","indexOf","is_image_mime","mime","Finder","BlobLoader","path","initial_files","_search","bind","extension","extname","crypto","trie","Map","find","digest","current","depth","previous","byte","get","set","contains","buffer","hash","createHash","update","hashes","found_name","_info_provider","identify_only","get_info_provider","is_of_file_type","get_extension","get_extensions","get_mime","get_mimes","can_validate","Constructor","provider","is_identify_only","_extension_registry","_all_extensions","_mime_registry","_all_mimes","_all_providers","clear","MagicNumberIdentifier","register","get_magic","Buffer","GIFInfoProvider","XMLIdentifier","get_root_element","first_magic","readUInt16LE","type_magic","JPGInfoProvider","JXLInfoProvider","magic","buffer_magic","slice","compare","PNGInfoProvider","get_type_tag","riff_magic","readUInt32BE","RIFFIdentifier","toLowerCase","includes","calculate_bpp","dims","size","get_overhead","width","height","frames","get_dimensions","get_pixel_format","get_info","is_truncated","truncated","dimensions","pixel_format","bytes_per_pixel","InfoProvider","pf","PixelFormat","ColorSpace","next_chunk","offset","block_length","readUInt8","get_sub_block_length","sub_block_length","size_byte","get_color_table_length","color_table_bits","Math","pow","has_color_table","get_version","frame_count","found","SETTINGS_OFFSET","block_header","format","color_space","RGB","indexed","bit_depth","R","G","B","alpha","readUInt16BE","is_sof_chunk","sof_byte","chunks","channels","CMYK","BitStream","SizeHeader","ImageMetadata","COLOR_SPACE","bit_stream","size_header","get_xsize","get_ysize","color_encoding","K_GREY","K_RGB","K_XYZ","XYZ","K_XYB","XYB","U32_MAX","IllformedStreamError","sub_bit","current_byte","read_from_byte","bits","mask","read_bits","WORD_SIZE","leftovers","start_bits","bytes","floor","read","read_boolean","read_u32","distributions","dist","read_s32","v","read_f16","bits16","sign","biased_exp","mantissa","biased_exp32","mantissa32","ArrayBuffer","Uint32Array","Float32Array","read_customxy","x","y","read_enum","enum_table","has","get_bits_read","U32","VAL","BITS","BITS_OFFSET","K_UNKNOWN","ENUM_COLOR_SPACE","Set","ENUM_WHITE_POINT","ENUM_PRIMARIES","ENUM_TRANSFER_FUNCTION","ENUM_RENDERING_INTENT","ColorEncoding","stream","received_icc","opaque_icc","white_point","primaries","have_gamma","gamma","transfer_function","rendering_intent","all_default","white","red","green","blue","have_icc","bits_per_sample","alpha_bits","target_nits","m2","ysize","xsize","small","ratio","get_small","get_ratio","Ratio","XSIZE_SEPARATE","XSIZE_IS_YSIZE","XSIZE_RATIO_12X10","XSIZE_RATIO_4X3","XSIZE_RATIO_3X2","XSIZE_RATIO_16X9","XSIZE_RATIO_5X4","XSIZE_RATIO_2X1","crc","GRAYSCALE_TYPES","RGB_TYPES","ALPHA_TYPES","INDEXED_TYPES","PNGChunk","header","crc32","verify","alloc","writeUInt32BE","end_chunk","SECTION_LENGTH_WIDTH","IHDR_OFFSET","WIDTH_OFFSET","readInt8","HEIGHT_OFFSET","color_type","BIT_DEPTH_OFFSET","WorkHandler","Hasher","LoggerFactory","EventEmitter","super","disable_color","calculate_optimial_size","bpp","describe_file","identifier","from_extension","file_buffer","warn","candidate","all_providers","found_extension","ProviderClass","folder","hasher","allowed_color_spaces","spaces","space","done","get_log","error_handler","err","stack","message","emit","loader","load","then","min_bpp","min_savings","byte_savings","size_difference","toFixed","catch","start","_path","getPath","Loader","blob","_blob","arrbuf","arrayBuffer","chalk","Log","filename","count","is_printable","yellow","warn_count","error_count","all_names","id","YCbCr","YCCK","LAB","HSV","_active_handlers","_active_processes","_done_proxy","_done","_iterator","_handler_available","next","promise","iterator"],"sourceRoot":""}