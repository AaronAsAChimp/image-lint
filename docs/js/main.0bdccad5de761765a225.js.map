{"version":3,"file":"js/main.0bdccad5de761765a225.js","mappings":"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","sources":["webpack://image-lint-web/./web/components/app.vue","webpack://image-lint-web/./web/components/app.vue?955b","webpack://image-lint-web/./web/components/page-try-it.vue","webpack://image-lint-web/../image-lint/lib/work-handler.js","webpack://image-lint-web/../image-lint/lib/hasher.js","webpack://image-lint-web/../image-lint/lib/pixel-format.js","webpack://image-lint-web/../image-lint/lib/logger.js","webpack://image-lint-web/../image-lint/lib/ident.js","webpack://image-lint-web/../image-lint/lib/ident/magic-number-ident.js","webpack://image-lint-web/../image-lint/lib/image-info.js","webpack://image-lint-web/../image-lint/lib/image/png/chunk.js","webpack://image-lint-web/../image-lint/lib/image/png-info.js","webpack://image-lint-web/../image-lint/lib/image-linter.js","webpack://image-lint-web/../image-lint/lib/linter/png-linter.js","webpack://image-lint-web/../image-lint/lib/image/gif-info.js","webpack://image-lint-web/../image-lint/lib/image/jpg/chunk-names.js","webpack://image-lint-web/../image-lint/lib/image/jpg/chunk.js","webpack://image-lint-web/../image-lint/lib/image/jpg-info.js","webpack://image-lint-web/../image-lint/lib/linter/jpg-linter.js","webpack://image-lint-web/../image-lint/lib/image/bitstream/bitstream.js","webpack://image-lint-web/../image-lint/lib/image/jxl/bit-stream.js","webpack://image-lint-web/../image-lint/lib/image/jxl/size-header.js","webpack://image-lint-web/../image-lint/lib/image/jxl/color-encoding.js","webpack://image-lint-web/../image-lint/lib/image/jxl/image-metadata.js","webpack://image-lint-web/../image-lint/lib/image/jxl-info.js","webpack://image-lint-web/../image-lint/lib/image/isobmff/isobmff.js","webpack://image-lint-web/../image-lint/lib/image/avif-info.js","webpack://image-lint-web/../image-lint/lib/ident/riff-ident.js","webpack://image-lint-web/../image-lint/lib/image/riff/reader.js","webpack://image-lint-web/../image-lint/lib/image/riff/chunk.js","webpack://image-lint-web/../image-lint/lib/image/vp8/vp8.js","webpack://image-lint-web/../image-lint/lib/image/webp-info.js","webpack://image-lint-web/../image-lint/lib/ident/xml-ident.js","webpack://image-lint-web/../image-lint/lib/ident-registry.js","webpack://image-lint-web/../image-lint/lib/ident/png-ident.js","webpack://image-lint-web/../image-lint/lib/ident/gif-ident.js","webpack://image-lint-web/../image-lint/lib/ident/jpg-ident.js","webpack://image-lint-web/../image-lint/lib/ident/jxl-ident.js","webpack://image-lint-web/../image-lint/lib/ident/avif-ident.js","webpack://image-lint-web/../image-lint/lib/ident/bmp-ident.js","webpack://image-lint-web/../image-lint/lib/ident/psd-ident.js","webpack://image-lint-web/../image-lint/lib/ident/ico-ident.js","webpack://image-lint-web/../image-lint/lib/ident/tiff-ident.js","webpack://image-lint-web/../image-lint/lib/ident/webp-ident.js","webpack://image-lint-web/../image-lint/lib/ident/svg-ident.js","webpack://image-lint-web/../image-lint/lib/ident/html-ident.js","webpack://image-lint-web/../image-lint/lib/linter.js","webpack://image-lint-web/../image-lint/lib/defaults.js","webpack://image-lint-web/../image-lint/lib/finder.js","webpack://image-lint-web/../image-lint/lib/loader.js","webpack://image-lint-web/../image-lint/lib/loader/blob.js","webpack://image-lint-web/./web/components/page-try-it.vue?c287","webpack://image-lint-web/./web/md/docs.md","webpack://image-lint-web/./web/md/docs.md?fc55","webpack://image-lint-web/./web/md/getting-started.md","webpack://image-lint-web/./web/md/getting-started.md?acdb","webpack://image-lint-web/./web/components/iml-image-collection.vue","webpack://image-lint-web/../image-lint/lib/finder/buffer.js","webpack://image-lint-web/./web/components/iml-image-collection.vue?514d","webpack://image-lint-web/./web/components/iml-dropzone.vue","webpack://image-lint-web/./web/components/iml-dropzone.vue?0c56","webpack://image-lint-web/./web/js/index.js"],"sourcesContent":["<script>\nimport GithubButton from 'vue-github-button';\nimport packageJson from '../../../image-lint/package.json';\n\nexport default {\n\t'components': {\n\t\tGithubButton,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t'name': packageJson.name,\n\t\t\t'version': packageJson.version,\n\t\t\t'description': packageJson.description,\n\t\t};\n\t},\n};\n</script>\n\n<template>\n\t<div>\n\t\t<header class=\"lint-header\">\n\t\t\t<h1 class=\"lint-title\">\n\t\t\t\t{{ name }}\n\t\t\t</h1>\n\t\t\t<span class=\"lint-version\">v{{ version }}</span>\n\n\t\t\t<nav class=\"lint-nav\">\n\t\t\t\t<router-link to=\"/\">\n\t\t\t\t\tHome\n\t\t\t\t</router-link>\n\t\t\t\t<router-link to=\"/getting-started\">\n\t\t\t\t\tGetting Started\n\t\t\t\t</router-link>\n\t\t\t\t<router-link to=\"/docs\">\n\t\t\t\t\tDocs\n\t\t\t\t</router-link>\n\t\t\t</nav>\n\n\t\t\t<github-button\n\t\t\t\tclass=\"github-button\"\n\t\t\t\thref=\"https://github.com/aaronasachimp/image-lint\"\n\t\t\t\tdata-size=\"large\"\n\t\t\t\tdata-show-count=\"true\"\n\t\t\t\taria-label=\"Star aaronasachimp/image-lint on GitHub\"\n\t\t\t>\n\t\t\t\tStar\n\t\t\t</github-button>\n\t\t</header>\n\t\t<router-view />\n\t</div>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.lint-header {\n\tbackground: var(--color-status-good);\n\tcolor: var(--color-status-good-contrast);\n\tpadding: 20px;\n}\n\n.lint-header {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr auto;\n\tgrid-template-rows: auto 1fr;\n\tgrid-template-areas:\n\t\t\"title   nav button\"\n\t\t\"version nav button\";\n\talign-items: baseline;\n}\n\n.lint-title {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 36px;\n\tmargin: 0;\n\tgrid-area: title;\n}\n\n.lint-nav {\n\tdisplay: inline-block;\n\tfont-weight: 300;\n\tfont-size: 18px;\n\tmargin: 0 0 0 15px;\n\tgrid-area: nav;\n}\n\n.lint-nav a {\n\tcolor: inherit;\n\ttext-decoration: none;\n\tpadding: 0.6em 0.8rem;\n\tborder-radius: 0.2em;\n\ttransition: background 0.4s;\n}\n\n.lint-nav a:hover {\n\tbackground: var(--color-bg-contrast-layer);\n}\n\n.lint-nav a:visited {\n\tcolor: inherit;\n}\n\n.lint-version {\n\tfont-size: 0.8em;\n\tgrid-area: version;\n\tjustify-self: end;\n}\n\n.github-button {\n\tgrid-area: button;\n\talign-self: center;\n}\n</style>\n","import { render } from \"./app.vue?vue&type=template&id=76892fa8\"\nimport script from \"./app.vue?vue&type=script&lang=js\"\nexport * from \"./app.vue?vue&type=script&lang=js\"\n\nimport \"./app.vue?vue&type=style&index=0&id=76892fa8&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport {defaults} from 'image-lint';\n\nimport 'vue-multiselect/dist/vue-multiselect.css';\n\nexport default {\n\t'components': {\n\t},\n\tdata() {\n\t\tconst options = Object.assign({}, defaults);\n\n\t\toptions.color_space = options.color_space.split(',');\n\n\t\treturn {\n\t\t\t'support': {},\n\t\t\t'available': {\n\t\t\t\t'color_space': ['G', 'RGB', 'CMYK', 'YCbCr', 'YCCK', 'LAB', 'HSV'],\n\t\t\t},\n\t\t\t'option': options,\n\t\t\t'files': [],\n\t\t};\n\t},\n\t'methods': {\n\t\t'clear': function() {\n\t\t\tthis.files.length = 0;\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<form class=\"image-lint-app\">\n\t\t<div class=\"pane pane-options\">\n\t\t\t<h3 class=\"lint-options-title\">\n\t\t\t\tOptions\n\t\t\t</h3>\n\n\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t<input v-model=\"option.mismatch\" type=\"checkbox\">\n\t\t\t\tFind mismatches between file type and file extension.\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-check\">\n\t\t\t\t<input v-model=\"option.duplicate\" type=\"checkbox\">\n\t\t\t\tFind files that have been copied.\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\tSet the maximum bytes per pixel before giving a warning.\n\t\t\t\t<input\n\t\t\t\t\tv-model=\"option.bytes_per_pixel\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tstep=\"0.1\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t>\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-number\">\n\t\t\t\tSet the minimum byte savings before giving a warning.\n\t\t\t\t<input v-model=\"option.byte_savings\" type=\"number\" min=\"0\">\n\t\t\t</label>\n\n\t\t\t<label class=\"lint-option lint-option-array\">\n\t\t\t\tSet the allowed color spaces.\n\n\t\t\t\t<vue-multiselect v-model=\"option.color_space\" :multiple=\"true\" :options=\"available.color_space\" />\n\t\t\t</label>\n\t\t</div>\n\t\t<div class=\"pane pane-dropzone\">\n\t\t\t<iml-dropzone v-model=\"files\" :class=\"{ empty: files.length == 0 }\">\n\t\t\t\t<div v-if=\"files.length\">\n\t\t\t\t\t<button type=\"button\" @click=\"clear\">\n\t\t\t\t\t\tClear Results\n\t\t\t\t\t</button>\n\t\t\t\t\t<iml-image-collection :options=\"option\" :files=\"files\" />\n\t\t\t\t</div>\n\t\t\t</iml-dropzone>\n\t\t</div>\n\t</form>\n</template>\n\n<style>\n\n@import \"../css/variables.css\";\n\n.image-lint-app {\n\tdisplay: grid;\n\tgrid-template-columns: 16em 1fr;\n}\n\n.pane {\n\tpadding: 20px;\n}\n\n.pane-options {\n\tbackground: var(--color-layer-bg);\n\tmax-width: 450px;\n}\n\n.lint-options-title {\n\tmargin-top: 0;\n}\n\n.lint-option {\n\tdisplay: block;\n\tmargin: 1.1em 0;\n\tline-height: 1.3;\n}\n\n.lint-option-check {\n\tdisplay:  grid;\n\tgrid-template-columns: 1.4em auto;\n\tgap: 0.4em;\n}\n\n.lint-option-check [type=checkbox] {\n\talign-self: start;\n\theight: 1.4em;\n}\n\n.lint-option-number,\n.lint-option-array {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.lint-option-number [type=number],\n.lint-option-array .multiselect {\n\tmargin-top: 0.4em;\n\tfont-size:  1em;\n\tpadding:  0.2em;\n}\n\n</style>\n","/* @flow */\n'use strict';\n\nimport {EventEmitter} from 'events';\n\n// const MAX_ACTIVE_HANDLERS = 1;\nconst MAX_ACTIVE_HANDLERS = 10;\n\n/**\n * Manage workloads so the async queue doesn't get filled before any work can\n * be done. An iterable is provided to the the start method each item will be\n * emitted for processing with the 'next' event.\n *\n * The 'next' event handler will be provided two parameter, the next item in the\n * iterable and a 'done' function to be called to release the work handler back\n * to the pool.\n */\nexport class WorkHandler /*:: <T> */ extends EventEmitter {\n\t/*::\n\t_active_handlers: number;\n\t_active_processes: number;\n\t_done_proxy: () => void;\n\t_iterator: Iterator<T> | null;\n\t*/\n\n\t/**\n\t * Construct a new WorkHandler\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._active_handlers = 0;\n\t\tthis._active_processes = 0;\n\t\tthis._done_proxy = this._done.bind(this);\n\t\tthis._iterator = null;\n\t\tthis._stopped = false;\n\n\t\tthis.on('handler.available', this._handler_available.bind(this));\n\t}\n\n\t/**\n\t * Kick off the next element in the iterable.\n\t */\n\t_handler_available() {\n\t\tif (this._iterator) {\n\t\t\tconst next = this._iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\tthis._iterator = null;\n\t\t\t} else {\n\t\t\t\tthis.emit('next', next.value, this._done_proxy);\n\t\t\t\tthis._active_handlers++;\n\t\t\t\tthis._active_processes++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Release the work handler to the pool.\n\t */\n\t_done() {\n\t\tthis._active_handlers--;\n\t\tthis._active_processes--;\n\n\t\t// console.log('handlers', this._active_handlers);\n\t\t// console.log('processes', this._active_processes);\n\n\t\tif (!this._stopped) {\n\t\t\tif (this._active_handlers >= 0 && !this._stopped) {\n\t\t\t\tthis.emit('handler.available');\n\t\t\t} else {\n\t\t\t\tthrow new Error('No handlers available, did you call done?');\n\t\t\t}\n\t\t}\n\n\t\tif (this._active_processes <= 0) {\n\t\t\tthis.emit('end');\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the work handler is stopped.\n\t * @return {boolean} true if the work handler is stopped.\n\t */\n\tis_stopped() {\n\t\treturn this._stopped;\n\t}\n\n\t/**\n\t * Start the work handler.\n\t * @param  {Promise<Iterable<T>>} promise An iterable of items that will\n\t *                                        be processed.\n\t */\n\tstart(promise/*: Promise<Iterable<T>> */) {\n\t\tif (this._iterator) {\n\t\t\tthrow new Error('Work is in progress');\n\t\t}\n\n\t\tthis._active_handlers = 0;\n\n\t\tpromise\n\t\t\t.then((iterator) => {\n\t\t\t\tthis._iterator = iterator();\n\n\t\t\t\twhile (this._active_handlers < MAX_ACTIVE_HANDLERS) {\n\t\t\t\t\tthis.emit('handler.available');\n\t\t\t\t\tthis._active_handlers++;\n\t\t\t\t}\n\t\t\t}, (e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e/*: Error */) => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tconsole.error(`${ e.name }: ${ e.message } \\n`, e);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Error', e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Stop the work handler before it has reached the end of the iterator. Any\n\t * currently running processes will be allowed to complete, but no new\n\t * proesses will be started.\n\t */\n\tstop() {\n\t\tthis._stopped = true;\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport crypto from 'crypto';\n\nconst TRIE_DEPTH = 3;\nconst HASH_TYPE = 'sha1';\n\n/*::\nconst Finder = require('./finder');\n\nimport type { FileDescriptor } from './finder';\n\ntype Trie = Map<string, Map<string, Map<string, Trie>>>;\n*/\n\n/**\n * Find duplicate files.\n */\nexport class Hasher {\n\t/*::\n\ttrie: Trie;\n\t*/\n\n\t/**\n\t * Construct a new Hasher.\n\t */\n\tconstructor() {\n\t\tthis.trie = new Map();\n\t}\n\n\t/**\n\t * Retrive the branch of the Trie that would contain the given digest.\n\t * @param  {string} digest A unique hash.\n\t * @return {Trie}          The sub Trie.w\n\t */\n\tfind(digest/*: string */)/*: Trie */ {\n\t\tlet current = this.trie;\n\t\tlet depth = 0;\n\n\t\t// Descend down the trie to find the leaf that contains this digest.\n\t\twhile (depth <= TRIE_DEPTH) {\n\t\t\tconst previous = current;\n\t\t\tconst byte = digest[depth];\n\n\t\t\tcurrent = current.get(byte);\n\n\t\t\tif (!current) {\n\t\t\t\tcurrent = new Map();\n\t\t\t\tprevious.set(byte, current);\n\t\t\t}\n\n\t\t\tdepth++;\n\t\t}\n\n\t\treturn current;\n\t}\n\n\t/**\n\t * Determine if the given buffer has already been seen. If not the hash and\n\t * path will be added to the Trie.\n\t * @param  {string} path    The path to the file.\n\t * @param  {Buffer} buffer  The file's content\n\t * @return {boolean}        The path of the existing file with the\n\t *                          same contents.\n\t */\n\tcontains(path/*: string */, buffer/*: Buffer */)/*: ?string */ {\n\t\t// The leaf should contain a map of digests to file names.\n\t\tconst hash = crypto.createHash(HASH_TYPE);\n\n\t\thash.update(buffer);\n\n\t\tconst digest = hash.digest('binary');\n\t\tconst hashes = this.find(digest);\n\t\tconst found_name = hashes.get(digest);\n\n\t\tif (!found_name) {\n\t\t\thashes.set(digest, path);\n\t\t}\n\n\t\treturn found_name;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/**\n * An enumeration of all of the color spaces\n */\nexport class ColorSpace {\n\t/*::\n\tstatic G: ColorSpace;\n\tstatic RGB: ColorSpace;\n\tstatic YCbCr: ColorSpace;\n\tstatic YCCK: ColorSpace;\n\tstatic LAB: ColorSpace;\n\tstatic HSV: ColorSpace;\n\tstatic CMYK: ColorSpace;\n\tstatic XYZ: ColorSpace;\n\tstatic XYB: ColorSpace;\n\n\tstatic all_names: Set<string>;\n\n\tname: string;\n\tchannels: number;\n\tunk_format: string | null;\n\t*/\n\n\t/**\n\t * Construct a new ColorSpace.\n\t * @param  {string} name     The name of the color space.\n\t * @param  {number} channels The number of channels for this color space.\n\t */\n\tconstructor(name/*: string */, channels/*: number */) {\n\t\tthis.name = name;\n\t\tthis.channels = channels;\n\t\tthis.unk_format = null;\n\n\t\tColorSpace.all_names.add(name);\n\t}\n\n\t/**\n\t * If this is 'ColorSpace.UNK' return the name of the color format that\n\t * was unknown.\n\t *\n\t * @return {String} The unknown format.\n\t */\n\tgetUnkFormat() {\n\t\treturn this.unk_format;\n\t}\n\n\t/**\n\t * Get an existing color space with the given name.\n\t * @param  {string} id   The name of the color space.\n\t * @return {ColorSpace}  The color space or null if no color space exists\n\t *                       with that name.\n\t */\n\tstatic from(id/*: string*/)/*: ColorSpace | null */ {\n\t\tlet space/*: ColorSpace | null */ = null;\n\n\t\tif (this.all_names.has(id)) {\n\t\t\tspace = (ColorSpace/*: any */)[id];\n\t\t}\n\n\t\treturn space;\n\t}\n\n\t/**\n\t * Construct a marker for an unknown color space.\n\t *\n\t * @param  {string} format      The name of the color space that was unknown.\n\t * @param  {number} [channels]  The number of channels.\n\t * @return {ColorSpace}         The unknown color space.\n\t */\n\tstatic unkownFormat(format, channels=-1) {\n\t\tconst color_space = new ColorSpace('UNK', channels);\n\n\t\tcolor_space.unk_format = format;\n\n\t\treturn color_space;\n\t}\n}\n\nColorSpace.all_names = new Set();\n\nColorSpace.G = new ColorSpace('G', 1);\nColorSpace.RGB = new ColorSpace('RGB', 3);\nColorSpace.YCbCr = new ColorSpace('YCbCr', 3);\nColorSpace.YCCK = new ColorSpace('YCCK', 4);\nColorSpace.LAB = new ColorSpace('LAB', 3);\nColorSpace.HSV = new ColorSpace('HSV', 3);\nColorSpace.CMYK = new ColorSpace('CMYK', 4);\nColorSpace.XYZ = new ColorSpace('XYZ', 3);\nColorSpace.XYB = new ColorSpace('XYB', 3);\n\n/**\n * The pixel format of an image.\n */\nexport class PixelFormat {\n\t/*::\n\tcolor_space: ColorSpace;\n\tindexed: boolean;\n\talpha: boolean;\n\tbit_depth: { [channel: string]: number};\n\t*/\n\n\t/**\n\t * Construct a new PixelFormat\n\t */\n\tconstructor() {\n\t\tthis.indexed = false;\n\t\tthis.alpha = false;\n\t\tthis.bit_depth = {};\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport chalk from 'chalk';\n\n/**\n * @typedef {Object} LogCounts\n * @property {number} info The count of the info logs\n * @property {number} warn The count of the warning logs\n * @property {number} error The count of the error logs.\n */\n\n/**\n * @typedef {keyof LogCounts} LogTypes\n */\n\n/**\n * A logger for writing the output to a string.\n */\nexport class Log {\n\t/*::\n\tfilename: string;\n\tlog: string;\n\tcount: LogCounts;\n\t*/\n\n\t/**\n\t * Construct a new logger, generally you should use the logger factory\n\t * instead of directly constructing this object.\n\t *\n\t * @param  {string | null} filename The name of the file that is being linted.\n\t * @param  {Log | null} parent The parent logger.\n\t */\n\tconstructor(filename=null/*: string */, parent=null) {\n\t\t/**\n\t\t * The name of the associated file if any,\n\t\t * @type {string}\n\t\t */\n\t\tthis.filename = filename;\n\n\t\t/**\n\t\t * The parent logger if any.\n\t\t * @type {Log | null}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The log messages.\n\t\t * @type {string}\n\t\t */\n\t\tthis.log = '';\n\n\t\tthis._muted = false;\n\n\t\t/**\n\t\t * The log counts by type.\n\t\t * @type {LogCounts}\n\t\t */\n\t\tthis.count = {\n\t\t\t'info': 0,\n\t\t\t'warn': 0,\n\t\t\t'error': 0,\n\t\t};\n\t}\n\n\t/**\n\t * Increment the count for the givent type of log.\n\t *\n\t * @param  {LogTypes} type [description]\n\t */\n\t_increment_count(type) {\n\t\tthis.count[type]++;\n\n\t\tif (this.parent) {\n\t\t\tthis.parent._increment_count(type);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if this should be printed.\n\t * @return {boolean} true if the log should be printed.\n\t */\n\tis_printable()/*: boolean */ {\n\t\treturn this.count.warn > 0 || this.count.error > 0;\n\t}\n\n\t/**\n\t * Stop printing new message to the log.\n\t */\n\tmute() {\n\t\tthis._muted = true;\n\t}\n\n\t/**\n\t * Log a message at the 'info' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\tinfo(message/*: string */) {\n\t\tthis._increment_count('info');\n\t\tthis.log += '\\n  INFO:  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'warn' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\twarn(message/*: string */) {\n\t\tthis._increment_count('warn');\n\t\tthis.log += '\\n  ' + chalk.yellow('WARN:') + '  ' + message;\n\t}\n\n\t/**\n\t * Log a message at the 'error' level.\n\t *\n\t * @param  {string} message The message to be logged.\n\t */\n\terror(message/*: string */) {\n\t\tthis._increment_count('error');\n\t\tthis.log += '\\n  ' + chalk.red('ERROR:') + '  ' + message;\n\t}\n\n\t/**\n\t * Get the number of errors that have been logged.\n\t * @return {number} The number of errors.\n\t */\n\tget_error_count() {\n\t\treturn this.count.error;\n\t}\n\n\t/**\n\t * Get the number of warnings that have been logged.\n\t * @return {number} The number of warnings.\n\t */\n\tget_warning_count() {\n\t\treturn this.count.warn;\n\t}\n\n\t/**\n\t * Get a new child logger.\n\t * @param  {string} filename The name of the file being linted.\n\t * @return {Log}          \t The new logger.\n\t */\n\tget_logger(filename) {\n\t\treturn new Log(filename, this);\n\t}\n\n\t/**\n\t * Convert this log to a string.\n\t * @return {string} The log output.\n\t */\n\ttoString()/*: string */ {\n\t\tlet warn_count = this.count.warn.toString();\n\t\tlet error_count = this.count.error.toString();\n\n\t\tif (this.count.warn) {\n\t\t\twarn_count = chalk.yellow(warn_count);\n\t\t}\n\n\t\tif (this.count.error) {\n\t\t\terror_count = chalk.red(error_count);\n\t\t}\n\n\t\treturn this.filename + this.log + '\\n' +\n\t\t\twarn_count + ' warnings. ' +\n\t\t\terror_count + ' errors.';\n\t}\n}\n\n/**\n * A factory for creating new logs.\n */\nexport class LoggerFactory {\n\t/**\n\t * Get a new instance of a logger.\n\t *\n\t * @param {string} filename The filename of the file being linted.\n\t * @return {Log}            The new logging instance.\n\t */\n\tstatic get_log(filename/*: string */)/*: Log */ {\n\t\treturn new Log(filename);\n\t}\n}\n\nexport const ROOT_LOGGER = new Log();\n","/* @flow */\n\n/**\n * @typedef {import('stream').Writable} Writable\n */\n\n/*::\nimport {InfoProvider} from \"./image-info.js\";\n*/\n\n/**\n * Abstract class to identify the type of images.\n */\nexport class ImageIdentifier {\n\t/*::\n\t_info_provider: InfoProvider | null\n\n\tstatic _extension_registry: Map<string, ImageIdentifier>;\n\tstatic _mime_registry: Map<string, ImageIdentifier>;\n\tstatic _image_extensions: string[];\n\tstatic _all_extensions: string[];\n\tstatic _all_mimes: string[];\n\tstatic _all_providers: ImageIdentifier[];\n\t*/\n\n\t/**\n\t * Construct an InfoProvider\n\t */\n\tconstructor() {\n\t\tthis._info_provider = null;\n\t}\n\n\t/**\n\t * Determine if this file type is identify-only or if there is an associated\n\t * information provider.\n\t *\n\t * @return {boolean} True if the file type is identify-only.\n\t */\n\tidentify_only()/*: boolean */ {\n\t\treturn !this.get_info_provider();\n\t}\n\n\t/**\n\t * Determine if the file is of the file type.\n\t *\n\t * @abstract\n\t * @param  {Buffer}  buffer The image buffer.\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common extension for this type of file.\n\t *\n\t * @return {String} containing the extension '.jpg', '.png', etc.\n\t */\n\tget_extension()/*: string */ {\n\t\treturn this.get_extensions()[0];\n\t}\n\n\t/**\n\t * Get the possible file extensions for this type of file having the\n\t * canonical extension as the first element.\n\t */\n\tget_extensions()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the most common mime for this type of file.\n\t *\n\t * @return {String} containing the mime type 'image/jpeg', 'image/png', etc.\n\t */\n\tget_mime()/*: string */ {\n\t\treturn this.get_mimes()[0];\n\t}\n\n\t/**\n\t * Get the possible MIME types for this type of file having the canonical\n\t * MIME type as the first element.\n\t */\n\tget_mimes()/*: string[] */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the buffer contains enough information to be validated.\n\t *\n\t * @param  {Buffer} buffer The image buffer.\n\t * @return {boolean} True if the image can be validated.\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get an instance of the info provider for this file type.\n\t *\n\t * @return {InfoProvider} The info provider.\n\t */\n\tget_info_provider()/*: Class<InfoProvider> | null */ {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Print debugging information for this type of file.\n\t * @param  {Buffer} buffer       The image buffer.\n\t * @param  {Writable} write_stream Where to write the debugging\n\t *                                        output to.\n\t */\n\tdebug_print(buffer, write_stream) {\n\t\twrite_stream.write('There is no debugging information available.\\n');\n\t}\n\n\t/**\n\t * Get an instance of the linter for specialized linting for this type\n\t * of file. Not all formats have additional linting.\n\t * @param {Buffer} buffer The image bufer.\n\t * @return {ImageLinter} The linter.\n\t */\n\tget_linter(buffer) {\n\t\treturn null;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that uses a magic number to identify the format.\n */\nexport class MagicNumberIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the magic number for this file type\n\t */\n\tget_magic()/*: Buffer */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\t\tconst buffer_magic = buffer.slice(0, magic.length);\n\n\t\t// console.log('Validating magic: ' + this.magic.toString('hex') + ' === ' + buffer_magic.toString('hex'));\n\n\t\treturn Buffer.compare(magic, buffer_magic) === 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst magic = this.get_magic();\n\n\t\treturn buffer.length >= magic.length;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type { Log } from './logger.js';\nimport type { FileDescriptor } from './finder.js';\nimport type { LinterOptions } from './linter.js';\nimport type { PixelFormat } from './pixel-format.js';\n\nexport\ninterface Dimensions {\n\twidth: number;\n\theight: number;\n\tframes: number;\n}\n\nexport interface ImageInfo {\n\ttruncated: boolean;\n\tdimensions?: Dimensions;\n\tsize?: number;\n\tpixel_format?: PixelFormat;\n\tbytes_per_pixel?: number;\n}\n*/\n\n/**\n * Gather information about an image file.\n */\nexport class InfoProvider {\n\t/**\n\t * Calculate the number of bytes per pixel in the image.\n\t *\n\t * @param  {Dimensions} dims The dimensions of the image.\n\t * @param  {number} size     The file size of the image.\n\t * @return {number}          The number of bytes per pixel.\n\t */\n\tcalculate_bpp(dims/*: Dimensions */, size/*: number */)/*: number */ {\n\t\treturn (size - this.get_overhead()) / (dims.width * dims.height * dims.frames);\n\t}\n\n\t/**\n\t * Get the number of bytes of overhead of this file format.\n\t *\n\t * @return {number} The number in bytes.\n\t */\n\tget_overhead()/*: number */ {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Get the dimensions of the image.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Get the pixel format of the image.\n\t * @param  {Buffer} buffer The file buffer.\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * The the information for this file.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @return {ImageInfo}     This image information.\n\t */\n\tget_info(buffer/*: Buffer */)/*: ImageInfo */ {\n\t\tconst info/*: ImageInfo */ = {\n\t\t\t'truncated': this.is_truncated(buffer),\n\t\t};\n\n\t\tif (!info.truncated) {\n\t\t\tconst dims = this.get_dimensions(buffer);\n\n\t\t\tinfo.dimensions = dims;\n\t\t\tinfo.size = buffer.length;\n\t\t\tinfo.pixel_format = this.get_pixel_format(buffer);\n\t\t\tinfo.bytes_per_pixel = this.calculate_bpp(dims, buffer.length);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Is the file truncated.\n\t *\n\t * @abstract\n\t * @param  {Buffer}    buffer A buffer containing a compressed image.\n\t * @return {Boolean}   True if the file is invalid due to it being truncated.\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n}\n","import crc from 'crc';\n\nexport const SECTION_HEADER_WIDTH = 4;\nexport const SECTION_LENGTH_WIDTH = 4;\nexport const CRC_WIDTH = 4;\n\nexport const CHUNK_TYPE_IEND = 0x49454E44;\n\nexport const FIRST_CHUNK_OFFSET = 8;\nexport const IHDR_OFFSET = FIRST_CHUNK_OFFSET + SECTION_LENGTH_WIDTH;\n\n/**\n * A PNG chunk.\n */\nexport class PNGChunk {\n\t/*::\n\tlength: number;\n\theader: number;\n\tdata: Buffer;\n\tcrc32: number;\n\t*/\n\n\t/**\n\t * Construct a new PNG chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */) {\n\t\tthis.offset = offset;\n\t\tthis.length = buffer.readUInt32BE(offset);\n\t\tthis.header = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH);\n\t\tthis.data = buffer.slice(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH, this.length);\n\t\tthis.crc32 = buffer.readUInt32BE(offset + SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + this.length);\n\t}\n\n\t/**\n\t * Verify the CRC in the chunk.\n\t *\n\t * @return {boolean} True if its a valid chunk.\n\t */\n\tverify()/*: boolean */ {\n\t\tconst header = Buffer.alloc(4);\n\t\tlet check = null;\n\n\t\theader.writeUInt32BE(this.header, 0);\n\n\t\tcheck = crc.crc32(header);\n\t\tcheck = crc.crc32(this.data, check);\n\n\t\treturn check === this.crc32;\n\t}\n\n\t/**\n\t * Get the total length of the chunk. This is different from the length\n\t * property that is only the data length.\n\t * @return {number} The length of the chunks.\n\t */\n\tget_total_length() {\n\t\treturn SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + this.length + CRC_WIDTH;\n\t}\n\n\t/**\n\t * Describe this chunk.\n\t * @return {string} The description of this chunk.\n\t */\n\tdescribe() {\n\t\tconst name = Buffer.from(this.header.toString(16), 'hex');\n\n\t\treturn `${ name } (offset ${ this.offset }, length ${ this.length })`;\n\t}\n\n\t/**\n\t * Parse all of the chunks from the provided buffer.\n\t * @param  {Buffer} buffer The image buffer.\n\t * @param  {number} offset The offset of where to start parsing.\n\t * @return {PNGChunk[]}       The chunks contained in the buffer.\n\t */\n\tstatic get_chunks(buffer, offset) {\n\t\tlet current_offset = offset;\n\t\tlet is_end = false;\n\t\tconst chunks = [];\n\n\t\t// console.log(current_offset, buffer.length);\n\n\t\twhile (current_offset < buffer.length && !is_end) {\n\t\t\tconst chunk = new PNGChunk(buffer, current_offset);\n\n\t\t\tchunks.push(chunk);\n\n\t\t\t// console.log(current_offset, SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + chunk.length + CRC_WIDTH);\n\n\t\t\tcurrent_offset = current_offset + chunk.get_total_length();\n\t\t\tis_end = chunk.header === CHUNK_TYPE_IEND;\n\t\t}\n\n\t\treturn chunks;\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\nimport {PNGChunk, SECTION_LENGTH_WIDTH, SECTION_HEADER_WIDTH, CHUNK_TYPE_IEND, IHDR_OFFSET, CRC_WIDTH} from './png/chunk.js';\n\nconst WIDTH_OFFSET = IHDR_OFFSET + SECTION_HEADER_WIDTH;\nconst HEIGHT_OFFSET = WIDTH_OFFSET + 4;\nconst BIT_DEPTH_OFFSET = HEIGHT_OFFSET + 4;\nconst COLOR_TYPE_OFFSET = BIT_DEPTH_OFFSET + 1;\n\n// const IEND_CRC = 0xAE426082;\nconst IEND_LENGTH = SECTION_LENGTH_WIDTH + SECTION_HEADER_WIDTH + CRC_WIDTH;\n\nconst GRAYSCALE_TYPES = new Set([0, 4]);\nconst RGB_TYPES = new Set([2, 3, 6]);\nconst ALPHA_TYPES = new Set([4, 6]);\nconst INDEXED_TYPES = new Set([4]);\n\n// http://www.libpng.org/pub/png/spec/1.2/\n\n/**\n * A PNG info provider.\n */\nexport class PNGInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible PNG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 67;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\tlet end_chunk = null;\n\n\t\ttry {\n\t\t\tend_chunk = new PNGChunk(buffer, buffer.length - IEND_LENGTH);\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn end_chunk.header === CHUNK_TYPE_IEND && !end_chunk.verify();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\treturn {\n\t\t\twidth: buffer.readUInt32BE(WIDTH_OFFSET),\n\t\t\theight: buffer.readUInt32BE(HEIGHT_OFFSET),\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tconst bit_depth = buffer.readInt8(BIT_DEPTH_OFFSET);\n\t\tconst color_type = buffer.readInt8(COLOR_TYPE_OFFSET);\n\n\t\t// Determine the color space\n\t\tif (RGB_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\tformat.bit_depth.R = bit_depth;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t\tformat.bit_depth.B = bit_depth;\n\t\t} else if (GRAYSCALE_TYPES.has(color_type)) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t\tformat.bit_depth.G = bit_depth;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat(color_type);\n\t\t}\n\n\t\t// Determine the alpha channel\n\t\tif (ALPHA_TYPES.has(color_type)) {\n\t\t\tformat.alpha = true;\n\t\t\tformat.bit_depth.alpha = bit_depth;\n\t\t}\n\n\t\t// Determine if it is indexed.\n\t\tif (INDEXED_TYPES.has(color_type)) {\n\t\t\tformat.indexed = true;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/**\n * A class for implementing specialized linting for an image format. This goes\n * above an beyond the general purpose linting provided by the InfoProvider.\n *\n * This class is expected to parse the file once and run multiple lint rules\n * against it.\n *\n * @abstract\n */\nexport class ImageLinter {\n\t/**\n\t * Run the linter and log all linter errors and warnings to the provided logger.\n\t *\n\t * @param {Log} logger The logger to write the results to\n\t */\n\tlint(logger) {\n\t\tthrow new Error('Not Implemented!');\n\t}\n}\n","import {ImageLinter} from '../image-linter.js';\nimport {PNGChunk, FIRST_CHUNK_OFFSET} from '../image/png/chunk.js';\n\n/**\n * Specialized linting for PNG files.\n */\nexport class PNGImageLinter extends ImageLinter {\n\t/**\n\t * Create a new PNGImageLinter\n\t * @param  {Buffer} buffer The image buffer\n\t */\n\tconstructor(buffer) {\n\t\tsuper();\n\n\t\tthis.buffer = buffer;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tlint(logger) {\n\t\tconst chunks = PNGChunk.get_chunks(this.buffer, FIRST_CHUNK_OFFSET);\n\t\tconst last_chunk = chunks[chunks.length - 1];\n\n\t\t// Detect images affected by the Acropalypse vulnerability by comparing\n\t\t// the parsed length to the total length of the file.\n\t\t//\n\t\t// The doesn't guarantee that this was an affected file, but it does\n\t\t// show there is extra data after the IEND. Either way this is a\n\t\t// problem and could be a potential file savings improvement.\n\t\tif (last_chunk.offset + last_chunk.get_total_length() < this.buffer.length) {\n\t\t\tlogger.error('This file contains extra data at the end of the file.');\n\t\t}\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst VERSION_OFFSET = 0x3;\nconst HEIGHT_OFFSET = 0x6;\nconst WIDTH_OFFSET = 0x8;\nconst SETTINGS_OFFSET = 0xA;\nconst COLOR_TABLE_OFFSET = 0xD;\nconst COLOR_TABLE_AVAILABLE_MASK = 0x80;\nconst COLOR_TABLE_LENGTH_MASK = 0x7;\nconst IMAGE_DESCRIPTOR_OFFSET = 9; // a relative offset from the separator (0x2c)\nconst FILE_TRAILER = 0x3B; // A semicolon;\n\n/**\n * A JPEG info provider.\n */\nexport class GIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible GIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 35;\n\t}\n\n\t/**\n\t * Get the offset of the next chunk.\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The offset of the next chunk.\n\t */\n\tnext_chunk(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst block_length = 2 + buffer.readUInt8(offset + 2);\n\n\t\t// console.log('block_length', block_length);\n\n\t\treturn offset + block_length + this.get_sub_block_length(buffer, offset + block_length + 1) + 1;\n\t}\n\n\t/**\n\t * Get the length of the sub-block.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the sub-block.\n\t */\n\tget_sub_block_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tlet sub_block_length = 0;\n\t\tlet size_byte = buffer.readUInt8(offset);\n\n\t\t// console.log('starting searching for sub-blocks, initial sub-block size', size_byte.toString(16));\n\t\t// if the initial size_byte is 0x00 then we are dealing with a non-data chunk.\n\t\tif (size_byte !== 0) {\n\t\t\twhile (size_byte !== 0) {\n\t\t\t\tsize_byte = buffer.readUInt8(offset + sub_block_length);\n\t\t\t\t// console.log(size_byte);\n\t\t\t\tsub_block_length += size_byte + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tsub_block_length = 1;\n\t\t}\n\n\t\t// console.log('finished searching for sub-blocks, total length is', sub_block_length + 1);\n\n\t\treturn sub_block_length;\n\t}\n\n\t/**\n\t * Get the length of the color table.\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset in the buffer.\n\t * @return {number}        The length of the color table.\n\t */\n\tget_color_table_length(buffer/*: Buffer */, offset/*: number */)/*: number */ {\n\t\tconst color_table_bits = buffer.readUInt8(offset) & COLOR_TABLE_LENGTH_MASK;\n\n\t\t// console.log('color table bits', color_table_bits.toString(16));\n\n\t\treturn 3 * Math.pow(2, color_table_bits + 1);\n\t}\n\n\t/**\n\t * Determine if a color table exists.\n\t *\n\t * @param  {Buffer}  buffer The file buffer.\n\t * @param  {number}  offset The offset in buffer.\n\t * @return {boolean}        True if the file has a color table.\n\t */\n\thas_color_table(buffer/*: Buffer */, offset/*: number */)/*: boolean */ {\n\t\t// console.log('has color table', !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK));\n\t\treturn !!(buffer.readUInt8(offset) & COLOR_TABLE_AVAILABLE_MASK);\n\t}\n\n\t/**\n\t * Get the version string.\n\t *\n\t * @param  {Buffer} buffer The file buffer\n\t * @return {string}        The version string.\n\t */\n\tget_version(buffer/*: Buffer */)/*: string */ {\n\t\treturn buffer.toString('ascii', VERSION_OFFSET, HEIGHT_OFFSET);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet frame_count = 0;\n\t\tlet found = false;\n\t\tlet offset = 0;\n\n\t\tif (this.has_color_table(buffer, SETTINGS_OFFSET)) {\n\t\t\tconst color_table_length = this.get_color_table_length(buffer, SETTINGS_OFFSET);\n\t\t\toffset = COLOR_TABLE_OFFSET + color_table_length;\n\t\t} else {\n\t\t\toffset = SETTINGS_OFFSET + 3;\n\t\t}\n\n\t\t// console.log(offset);\n\n\t\twhile (!found) {\n\t\t\tlet block_header = buffer.readUInt8(offset);\n\n\t\t\t// console.log('Offset of block', offset);\n\t\t\t// console.log('block header (should be 0x21)', block_header.toString(16));\n\t\t\t// console.log('block label', buffer.readUInt8(offset + 1).toString(16));\n\n\t\t\tif (block_header === 0x2c) {\n\t\t\t\tframe_count++;\n\t\t\t\t// console.log(buffer.readUInt8(offset).toString(16));\n\t\t\t\toffset += IMAGE_DESCRIPTOR_OFFSET;\n\t\t\t\t// Skip the color table, if present\n\n\t\t\t\t// console.log('color table return', this.has_color_table(buffer, offset));\n\t\t\t\tif (this.has_color_table(buffer, offset)) {\n\t\t\t\t\t// console.log('has local color table');\n\t\t\t\t\toffset += this.get_color_table_length(buffer, offset);\n\t\t\t\t}\n\t\t\t\t// Skip the Packed values byte and the \"LZW Minimum Code Size\" byte.\n\t\t\t\toffset += 2;\n\t\t\t\t// Skip the image data\n\t\t\t\toffset += this.get_sub_block_length(buffer, offset);\n\t\t\t\t// console.log('offset', offset);\n\t\t\t\t// console.log('this should be a block header', buffer.readUInt8(offset).toString(16));\n\t\t\t}\n\n\t\t\t// console.log('near the end', offset, buffer.length);\n\n\t\t\tif (offset + 1 >= buffer.length) {\n\t\t\t\t// Normal Termination\n\t\t\t\t// We've reached the end of the file\n\t\t\t\tfound = true;\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tblock_header = buffer.readUInt8(offset);\n\n\t\t\t\tif (block_header !== 0x21 && block_header !== 0x2c) {\n\t\t\t\t\t// Abnormal Termination\n\t\t\t\t\t// There is either junk at the end of the file or its corrupted\n\t\t\t\t\t// (or the programmer made a mistake).\n\t\t\t\t\tfound = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = this.next_chunk(buffer, offset);\n\n\t\t\t// console.log(offset);\n\t\t}\n\n\t\t// console.log('gif version', this.get_version(buffer));\n\t\t// console.log('number of frames', frame_count);\n\n\t\treturn {\n\t\t\t'width': buffer.readUInt16LE(HEIGHT_OFFSET),\n\t\t\t'height': buffer.readUInt16LE(WIDTH_OFFSET),\n\t\t\t'frames': frame_count,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== FILE_TRAILER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format()/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tformat.indexed = true;\n\t\tformat.bit_depth.R = 8;\n\t\tformat.bit_depth.G = 8;\n\t\tformat.bit_depth.B = 8;\n\n\t\t// TODO: handle this properly\n\t\tformat.bit_depth.alpha = 1;\n\n\t\treturn format;\n\t}\n}\n","export const CHUNK_NAMES = new Map();\n\n// Start Of Frame markers, non-differential, Huffman coding\n\nCHUNK_NAMES.set(0xFFC0, 'SOF0');\nCHUNK_NAMES.set(0xFFC1, 'SOF1');\nCHUNK_NAMES.set(0xFFC2, 'SOF2');\nCHUNK_NAMES.set(0xFFC3, 'SOF3');\n\n// Start Of Frame markers, differential, Huffman coding\n\nCHUNK_NAMES.set(0xFFC5, 'SOF5');\nCHUNK_NAMES.set(0xFFC6, 'SOF6');\nCHUNK_NAMES.set(0xFFC7, 'SOF7');\n\n// Start Of Frame markers, non-differential, arithmetic coding\n\nCHUNK_NAMES.set(0xFFC8, 'JPG');\nCHUNK_NAMES.set(0xFFC9, 'SOF9');\nCHUNK_NAMES.set(0xFFCA, 'SOF10');\nCHUNK_NAMES.set(0xFFCB, 'SOF11');\n\n// Start Of Frame markers, differential, arithmetic coding\n\nCHUNK_NAMES.set(0xFFCD, 'SOF13');\nCHUNK_NAMES.set(0xFFCE, 'SOF14');\nCHUNK_NAMES.set(0xFFCF, 'SOF15');\n\n// Huffman table specification\n\nCHUNK_NAMES.set(0xFFC4, 'DHT');\n\n// Arithmetic coding conditioning specification\n\nCHUNK_NAMES.set(0xFFCC, 'DAC');\n\n// Restart interval termination\n\nCHUNK_NAMES.set(0xFFD0, 'RST1');\nCHUNK_NAMES.set(0xFFD1, 'RST2');\nCHUNK_NAMES.set(0xFFD2, 'RST3');\nCHUNK_NAMES.set(0xFFD3, 'RST4');\nCHUNK_NAMES.set(0xFFD4, 'RST5');\nCHUNK_NAMES.set(0xFFD5, 'RST6');\nCHUNK_NAMES.set(0xFFD6, 'RST7');\nCHUNK_NAMES.set(0xFFD7, 'RST8');\n\n// Other markers\n\nCHUNK_NAMES.set(0xFFD8, 'SOI');\nCHUNK_NAMES.set(0xFFD9, 'EOI');\nCHUNK_NAMES.set(0xFFDA, 'SOS');\nCHUNK_NAMES.set(0xFFDB, 'DQT');\nCHUNK_NAMES.set(0xFFDC, 'DNL');\nCHUNK_NAMES.set(0xFFDD, 'DRI');\nCHUNK_NAMES.set(0xFFDE, 'DHP');\nCHUNK_NAMES.set(0xFFDF, 'EXP');\n\nfor (let i = 0; i <= 0xF; i++) {\n\tCHUNK_NAMES.set(0xFFE0 + i, 'APP' + i);\n}\n\nfor (let i = 0; i <= 0xD; i++) {\n\tCHUNK_NAMES.set(0xFFF0 + i, 'JPG ' + i);\n}\n\nCHUNK_NAMES.set(0xFFFE, 'COM');\n\n// Reserved markers\n\nCHUNK_NAMES.set(0xFF01, 'TEM');\n\nfor (let i = 0x2; i <= 0xBF; i++) {\n\tCHUNK_NAMES.set(0xFF02 + i, 'RES');\n}\n","import {CHUNK_NAMES} from './chunk-names.js';\n\nexport const MARKER_LENGTH = 2;\nconst CHUNKS_WITH_DIMS = 0xF0;\nconst RST0_MARKER = 0xFFD0;\nconst RST7_MARKER = 0xFFD7;\n// const SOI_MARKER = 0xFFD8;\nexport const EOI_MARKER = 0xFFD9;\nconst SOS_MARKER = 0xFFDA;\n\n/**\n * A JPEG chunk\n */\nexport class JPEGChunk {\n\t/**\n\t * Describe this chunk.\n\t * @return {string} The description of this chunk.\n\t */\n\tdescribe() {\n\t\treturn 'UNK';\n\t}\n\n\t/**\n\t * Determines if this chunk is an EOI chunk that signifies the end of\n\t * the image.\n\t *\n\t * @return {boolean} True if it is an EOI chunk.\n\t */\n\tis_eoi_chunk() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determines if this chunk is a SOFn chunk that may conatain matadata for\n\t * this image.\n\t *\n\t * @param  {Buffer}  buffer The buffer source of the image.\n\t * @param  {number}  offset The offset of the start of the chunk\n\t * @return {Boolean}        Returns true if it is a SOFn chunk.\n\t */\n\tis_sof_chunk() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Parse all of the chunks from the provided buffer.\n\t * @param  {Buffer} buffer The image buffer.\n\t * @param  {number} offset The offset of where to start parsing.\n\t * @return {JPEGChunk[]}   The chunks contained in the buffer.\n\t */\n\tstatic get_chunks(buffer, offset) {\n\t\tlet found = false;\n\t\tconst result = [];\n\n\t\twhile (!found) {\n\t\t\tconst marker_code = buffer.readUInt16BE(offset);\n\t\t\tlet chunk;\n\n\t\t\tif (marker_code >= RST0_MARKER && marker_code <= EOI_MARKER) {\n\t\t\t\tchunk = new StandaloneJPEGChunk(buffer, offset);\n\t\t\t\toffset += MARKER_LENGTH;\n\n\t\t\t\t// RST markers are immediately followed by an Entropy\n\t\t\t\t// Coded Segment.\n\t\t\t\tif (offset < buffer.length && marker_code >= RST0_MARKER && marker_code <= RST7_MARKER) {\n\t\t\t\t\tresult.push(chunk);\n\n\t\t\t\t\tchunk = EntropyCodedSegment.from_buffer(buffer, offset);\n\t\t\t\t\toffset += chunk.length;\n\t\t\t\t}\n\t\t\t} else if (marker_code === SOS_MARKER) {\n\t\t\t\tchunk = new SOSChunk(buffer, offset);\n\t\t\t\toffset += MARKER_LENGTH + chunk.length;\n\n\t\t\t\tresult.push(chunk);\n\n\t\t\t\t// SOS chunks are immediately followed by an Entropy\n\t\t\t\t// Coded Segment.\n\t\t\t\tif (offset < buffer.length) {\n\t\t\t\t\tchunk = EntropyCodedSegment.from_buffer(buffer, offset);\n\t\t\t\t\toffset += chunk.length;\n\t\t\t\t}\n\t\t\t} else if (CHUNK_NAMES.has(marker_code)) {\n\t\t\t\tchunk = new DataJPEGChunk(buffer, offset);\n\t\t\t\toffset += MARKER_LENGTH + chunk.length;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unknown marker code ${ marker_code.toString(16) } at offset ${ offset }`);\n\t\t\t}\n\n\t\t\tresult.push(chunk);\n\n\t\t\t// console.log('offset', offset, 'buffer length:', buffer.length);\n\n\t\t\t// There needs to be at least two bytes left in the buffer to be\n\t\t\t// able to read the next chunk.\n\t\t\tif (offset >= buffer.length - 1 || chunk.is_eoi_chunk()) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * A JPEG chunk\n */\nexport class MarkerSegment {\n\t/**\n\t * Construct a JPEG chunk\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, offset) {\n\t\tthis.offset = offset;\n\t\tthis.marker_code = buffer.readUInt16BE(offset);\n\t}\n\n\t/**\n\t * Describe this chunk.\n\t * @return {string} The description of this chunk.\n\t */\n\tdescribe() {\n\t\tconst name = CHUNK_NAMES.get(this.marker_code) ?? 'UNK';\n\n\t\treturn `${ name } (0x${ this.marker_code.toString(16) }, offset ${ this.offset })`;\n\t}\n\n\t/**\n\t * Determines if this chunk is an EOI chunk that signifies the end of\n\t * the image.\n\t *\n\t * @return {boolean} True if it is an EOI chunk.\n\t */\n\tis_eoi_chunk() {\n\t\treturn EOI_MARKER === this.marker_code;\n\t}\n\n\t/**\n\t * Determines if this chunk is a SOFn chunk that may conatain matadata for\n\t * this image.\n\t *\n\t * @param  {Buffer}  buffer The buffer source of the image.\n\t * @param  {number}  offset The offset of the start of the chunk\n\t * @return {Boolean}        Returns true if it is a SOFn chunk.\n\t */\n\tis_sof_chunk() {\n\t\tconst sof_byte = this.marker_code;\n\n\t\treturn (sof_byte & CHUNKS_WITH_DIMS) === 0xC0 &&\n\t\t\tsof_byte !== 0xFFC4 &&\n\t\t\tsof_byte !== 0xFFC8 &&\n\t\t\tsof_byte !== 0xFFCC;\n\t}\n}\n\n/**\n * A chunk that doesn't have any data and is only a marker.\n */\nclass StandaloneJPEGChunk extends MarkerSegment {\n\n}\n\n/**\n * A chunk that contains data.\n */\nclass DataJPEGChunk extends MarkerSegment {\n\t/**\n\t * Construct a JPEG data chunk\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, offset) {\n\t\tsuper(buffer, offset);\n\n\t\tthis.length = buffer.readUInt16BE(offset + 2);\n\t\tthis.number_of_components = buffer.readUInt8(offset + 4);\n\t}\n}\n\n\n/**\n * A chunk that contains the Start of Scan data.\n */\nclass SOSChunk extends MarkerSegment {\n\t/**\n\t * Construct a SOS chunk\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, offset) {\n\t\tsuper(buffer, offset);\n\n\t\tthis.scan_header_length = buffer.readUInt16BE(offset + 2);\n\t\tthis.number_of_components = buffer.readUInt8(offset + 4);\n\t\tthis.length = this.scan_header_length + 6;\n\t}\n}\n\n/**\n * A chunk that contains entropy coded data.\n */\nclass EntropyCodedSegment extends JPEGChunk {\n\t/**\n\t * Construct a new EntropyCodedSegment\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset of the beginning of the segment.\n\t * @param  {number} length The length ofthe segment.\n\t */\n\tconstructor(buffer, offset, length) {\n\t\tsuper();\n\n\t\tthis.offset = offset;\n\t\tthis.length = length;\n\t}\n\n\t/**\n\t * Describe this chunk.\n\t * @return {string} The description of this chunk.\n\t */\n\tdescribe() {\n\t\treturn `Entropy Coded Segment (offset ${ this.offset }, length ${ this.length })`;\n\t}\n\n\t/**\n\t * Read an EC segment from a buffer.\n\t * @param  {Buffer} buffer The file buffer\n\t * @param  {number} offset The offset of the beginning of the segment.\n\t * @return {EntropyCodedSegment}   The segment read from the buffer.\n\t */\n\tstatic from_buffer(buffer, offset) {\n\t\t// The entropy coded data always follows the SOS chunk.\n\t\tlet end_of_ecs = false;\n\t\tconst ecs_start = offset;\n\t\tlet max = 10000;\n\n\t\t// Scan ahead until a 0xFF byte is found that is not followed by a\n\t\t// 0x00 byte.\n\t\twhile (!end_of_ecs && max > 0) {\n\t\t\tconst segment_start = buffer.indexOf(0xFF, offset + 1);\n\n\t\t\tif (segment_start >= 0) {\n\t\t\t\tend_of_ecs = buffer.readUInt8(segment_start + 1) !== 0x00;\n\t\t\t\toffset = segment_start;\n\t\t\t} else {\n\t\t\t\toffset = buffer.length;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmax--;\n\t\t}\n\n\t\tif (max === 0) {\n\t\t\tthrow new Error('Maximum chunk size exceeded.');\n\t\t}\n\n\t\treturn new EntropyCodedSegment(buffer, ecs_start, offset - ecs_start);\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport {JPEGChunk, EOI_MARKER} from './jpg/chunk.js';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nconst HEIGHT_OFFSET = 5;\nconst WIDTH_OFFSET = 7;\nconst CHANNELS_OFFSET = 9;\n\n// https://www.w3.org/Graphics/JPEG/jfif3.pdf\n// https://www.w3.org/Graphics/JPEG/itu-t81.pdf\n// http://www.itu.int/rec/T-REC-T.871-201105-I/en\n\n/**\n * A JPEG info provider.\n */\nexport class JPGInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt16BE(buffer.length - 2) !== EOI_MARKER;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tlet width = null;\n\t\tlet height = null;\n\t\tconst chunks = JPEGChunk.get_chunks(buffer, 0);\n\n\t\tfor (const chunk of chunks) {\n\t\t\tif (chunk.is_sof_chunk()) {\n\t\t\t\t// console.log('Reading header');\n\n\t\t\t\twidth = buffer.readUInt16BE(chunk.offset + WIDTH_OFFSET);\n\t\t\t\theight = buffer.readUInt16BE(chunk.offset + HEIGHT_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!width || !height) {\n\t\t\tthrow new Error('Dimensions not found');\n\t\t}\n\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tlet channels = null;\n\t\tconst chunks = JPEGChunk.get_chunks(buffer, 0);\n\n\t\tfor (const chunk of chunks) {\n\t\t\tif (chunk.is_sof_chunk()) {\n\t\t\t\tchannels = buffer.readUInt8(chunk.offset + CHANNELS_OFFSET);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (channels === 1) {\n\t\t\tformat.color_space = ColorSpace.G;\n\t\t} else if (channels === 3) {\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t} else if (channels === 4) {\n\t\t\tformat.color_space = ColorSpace.CMYK;\n\t\t} else {\n\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","import {ImageLinter} from '../image-linter.js';\nimport {JPEGChunk, MARKER_LENGTH} from '../image/jpg/chunk.js';\n\n/**\n * Specialized linting for PNG files.\n */\nexport class JPEGImageLinter extends ImageLinter {\n\t/**\n\t * Create a new PNGImageLinter\n\t * @param  {Buffer} buffer The image buffer\n\t */\n\tconstructor(buffer) {\n\t\tsuper();\n\n\t\tthis.buffer = buffer;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tlint(logger) {\n\t\tconst chunks = JPEGChunk.get_chunks(this.buffer, 0);\n\t\tconst last_chunk = chunks[chunks.length - 1];\n\n\t\t// console.group('file');\n\t\t// for (const chunk of chunks) {\n\t\t// \tconsole.log(chunk.describe(), chunk.length);\n\t\t// }\n\t\t// console.groupEnd('file');\n\n\t\tconst last_chunk_length = last_chunk.length ?? MARKER_LENGTH;\n\n\t\t// Detect images affected by the Acropalypse vulnerability by comparing\n\t\t// the parsed length to the total length of the file.\n\t\t//\n\t\t// The doesn't guarantee that this was an affected file, but it does\n\t\t// show there is extra data after the EOI. Either way this is a\n\t\t// problem and could be a potential file savings improvement.\n\t\tif (last_chunk.offset + last_chunk_length < this.buffer.length) {\n\t\t\tlogger.error('This file contains extra data at the end of the file.');\n\t\t}\n\t}\n}\n","/* @flow */\n\nconst WORD_SIZE = 8;\nconst QUAD_WORD_SIZE = WORD_SIZE * 4;\n\n\n/**\n * A bitstream.\n */\nexport class Bitstream {\n\t/*::\n\tbuffer: Buffer;\n\toffset: number;\n\tsub_bit: number;\n\tcurrent_byte: number;\n\t*/\n\n\t/**\n\t * Construct a new  Bitstream.\n\t * @param  {Buffer} buffer The buffer that contains the image.\n\t * @param  {number} offset The offset from beginning of the buffer.\n\t */\n\tconstructor(buffer/*: Buffer */, offset/*: number */ = 0) {\n\t\tthis.buffer = buffer;\n\t\tthis.offset = offset;\n\t\tthis.sub_bit = 0;\n\t\tthis.current_byte = buffer.readUInt8(offset);\n\t}\n\n\t/**\n\t * Read a certain number of bits from a byte.\n\t *\n\t * @param {number} byte  The byte to read from.\n\t * @param {number} offset  Which bit to start reading from.\n\t * @param {number} bits  The number of bits to read.\n\t *\n\t * @return {number} The bits that were read.\n\t */\n\tread_from_byte(byte/*: number */, offset/*: number */, bits/*: number */)/*: number */ {\n\t\tlet value = byte;\n\n\t\t// This builds the mask with the correct number of '1'. For example:\n\t\t//\n\t\t// | Bits | Mask     |\n\t\t// | ---- | -------- |\n\t\t// |    1 | 00000001 |\n\t\t// |    2 | 00000011 |\n\t\t// |  ... |    ...   |\n\t\t// |    8 | 11111111 |\n\t\tlet mask = (1 << bits) - 1;\n\n\t\t// console.log('mask: ', mask.toString(2));\n\t\t// console.log('mask sub_bit:', this.sub_bit, '- mask bits: ', bits);\n\n\t\t// This positions the mask in the correct spot...\n\t\t//\n\t\t// | sub_bit | Bits | Mask     |\n\t\t// | ------- | ---- | -------- |\n\t\t// |       1 |    2 | 00000011 |\n\t\t// |       2 |    2 | 00000110 |\n\t\t// |   ...   |  ... |    ...   |\n\t\t// |       8 |    2 | 10000000 | (and one from the next byte).\n\t\tmask = (mask << offset) >>> 0;\n\n\t\t// console.log('mask:', mask.toString(2), '- value:', value.toString(2));\n\t\t// console.log('value: ', (value & mask).toString(2));\n\n\t\tvalue = (value & mask) >>> offset;\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a certain number of bits from the stream.\n\t *\n\t * @param  {number} bits  The number of bits to read.\n\t * @return {number}       The bits read as a number.\n\t */\n\tread_bits(bits/*: number */)/*: number */ {\n\t\tif (bits > QUAD_WORD_SIZE) {\n\t\t\tthrow new Error(`Can not read more than ${ QUAD_WORD_SIZE } bits at a time. Attempting to read ${ bits }`);\n\t\t}\n\n\t\tif (bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet leftovers = 0;\n\t\tlet shift = 0;\n\t\tconst start_bits = WORD_SIZE - this.sub_bit;\n\n\t\t// console.log('start_bits', start_bits);\n\n\t\t// Read whats leftover from the previous byte. So from here on its whole\n\t\t// bytes only.\n\t\tif (this.sub_bit > 0 && bits > start_bits) {\n\t\t\t// console.log('bits needed from previous byte', start_bits);\n\t\t\tbits -= start_bits;\n\t\t\tleftovers = this.read_from_byte(this.current_byte, this.sub_bit, start_bits);\n\t\t\tshift = start_bits;\n\n\t\t\tthis.offset += 1;\n\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\tconst bytes = Math.floor(bits / WORD_SIZE);\n\t\tlet value = leftovers;\n\n\t\t// Read whole bytes\n\t\tif (bytes > 0) {\n\t\t\tfor (let byte = 0; byte < bytes; byte++) {\n\t\t\t\tlet read = this.read_from_byte(this.current_byte, 0, WORD_SIZE);\n\n\t\t\t\t// console.log(`byte ${byte}: `, dbg_byte(read));\n\n\t\t\t\tif (shift) {\n\t\t\t\t\tread = read << shift;\n\t\t\t\t}\n\n\t\t\t\t// console.log('value: ', value.toString(2));\n\n\t\t\t\tthis.offset += 1;\n\t\t\t\tthis.current_byte = this.buffer.readUInt8(this.offset);\n\n\t\t\t\tshift += WORD_SIZE;\n\n\t\t\t\tvalue = value | read;\n\t\t\t}\n\n\t\t\tthis.sub_bit = 0;\n\t\t}\n\n\t\t// There may still be a couple of bits left to read.\n\t\tbits = bits - (bytes * WORD_SIZE);\n\n\t\tif (bits > 0) {\n\t\t\tlet read = this.read_from_byte(this.current_byte, this.sub_bit, bits);\n\n\t\t\t// console.log(`byte last: `, dbg_byte(read));\n\n\t\t\tif (shift) {\n\t\t\t\tread = read << shift;\n\t\t\t}\n\n\t\t\tvalue = value | read;\n\n\t\t\tthis.sub_bit += bits;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a boolean from the stream.\n\t *\n\t * @return {boolean}  The boolean read.\n\t */\n\tread_boolean()/*: boolean */ {\n\t\treturn !!this.read_bits(1);\n\t}\n\n\t/**\n\t * Get the number of bits read from the stream.\n\t *\n\t * @return {number}  The number of bits read.\n\t */\n\tget_bits_read()/*: number */ {\n\t\treturn (this.offset * 8) + this.sub_bit;\n\t}\n}\n\n","/* @flow */\nimport {Bitstream} from '../bitstream/bitstream.js';\n\nconst U32_MAX = 0xFFFFFFFF;\n\nconst VAL = 0;\nconst BITS = 1;\nconst BITS_OFFSET = 2;\n\n/*::\ntype Distribution =\n\t[0, number] |\n\t[1, number] |\n\t[2, number, number];\n\ntype Distribution32 = [\n\tDistribution,\n\tDistribution,\n\tDistribution,\n\tDistribution\n];\n\nexport type CustomXY = {\n\tx: number,\n\ty: number\n};\n\ntype EnumTable = Set<number>;\n*/\n\n/**\n * Format a byte as a string.\n * @param  {number} bits The byte as number.\n * @return {string}      The formatted byte.\n */\n// function dbg_byte(bits) {\n// \treturn ('00000000' + bits.toString(2)).slice(-8);\n// }\n\n\n/**\n * An error that is thrown when the stream can not be parsed.\n */\nexport class IllformedStreamError extends Error {\n\n}\n\n/**\n * The JXL bitstream.\n */\nexport class BitStream extends Bitstream {\n\t/**\n\t * Read a 32bit unsigned integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}  The number read.\n\t */\n\tread_u32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tif (distributions.length > 4) {\n\t\t\tthrow new Error('U32: A u32 takes only 4 distributions.');\n\t\t}\n\n\t\tconst u = this.read_bits(2);\n\t\tconst dist = distributions[u];\n\n\t\t// console.log('distribution', u.toString(2));\n\n\t\tif (dist[0] === VAL) {\n\t\t\treturn dist[1];\n\t\t} else if (dist[0] === BITS) {\n\t\t\treturn this.read_bits(dist[1]);\n\t\t} else if (dist[0] === BITS_OFFSET) {\n\t\t\tif (dist.length !== 3) {\n\t\t\t\tthrow new Error('U32: incorrect number of parameters for BitsOffset distribution.');\n\t\t\t}\n\t\t\treturn (dist[2] + this.read_bits(dist[1])) % U32_MAX;\n\t\t} else {\n\t\t\tthrow new Error('U32: Unknown distribution.');\n\t\t}\n\t}\n\n\t/**\n\t * Read a signed 32bit integer from the stream.\n\t *\n\t * @param  {...Distribution32} distributions The distributions.\n\t * @return {number}   The number read.\n\t */\n\tread_s32(...distributions/*: Distribution32 */)/*: number */ {\n\t\tconst v = this.read_u32(...distributions);\n\n\t\tif (v % 2 === 0) {\n\t\t\treturn v >> 1;\n\t\t} else if (v === U32_MAX) {\n\t\t\treturn 0x80000000;\n\t\t} else {\n\t\t\treturn -(v >> 1);\n\t\t}\n\t}\n\n\t/**\n\t * Read a 16bit float from the stream.\n\t *\n\t * @return {number}  The number read.\n\t */\n\tread_f16()/*: number */ {\n\t\tconst bits16 = this.read_bits(16);\n\t\tconst sign = bits16 >> 15;\n\t\tconst biased_exp = ( bits16 >> 10 ) & 0x1F;\n\t\tconst mantissa = bits16 & 0x3FF;\n\t\tlet value;\n\n\t\tif (biased_exp === 31) {\n\t\t\tthrow new IllformedStreamError('F16: Invalid biased exponent.');\n\t\t}\n\n\t\tif ( biased_exp == 0 ) {\n\t\t\tvalue = mantissa / ( 1 << 24 );\n\t\t} else {\n\t\t\tconst biased_exp32 = biased_exp + ( 127 - 15 );\n\t\t\tconst mantissa32 = mantissa << ( 23 - 10 );\n\t\t\tconst buffer = new ArrayBuffer(4);\n\t\t\t(new Uint32Array(buffer))[0] = ( sign << 31 ) | ( biased_exp32 << 23 ) | mantissa32;\n\t\t\tvalue = (new Float32Array(buffer))[0];\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Read a custom X, Y from the stream.\n\t *\n\t * @return {{x: number, y: number}} The value read.\n\t */\n\tread_customxy()/*: CustomXY */ {\n\t\treturn {\n\t\t\tx: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t\ty: this.read_s32(\n\t\t\t\t[BITS, 19],\n\t\t\t\t[BITS_OFFSET, 19, 524288],\n\t\t\t\t[BITS_OFFSET, 20, 1048576],\n\t\t\t\t[BITS_OFFSET, 21, 2097152],\n\t\t\t),\n\t\t};\n\t}\n\n\t/**\n\t * Read an enumeration from the stream.\n\t *\n\t * @param  {EnumTable} enum_table The table of enum values.\n\t * @return {number}            The enum value read.\n\t */\n\tread_enum(enum_table/*: EnumTable */)/*: number */ {\n\t\tconst value = this.read_u32(\n\t\t\t[VAL, 0],\n\t\t\t[VAL, 1],\n\t\t\t[BITS_OFFSET, 4, 2],\n\t\t\t[BITS_OFFSET, 6, 18],\n\t\t);\n\n\t\tif (value > 63) {\n\t\t\tthrow new IllformedStreamError(`Enum: Invalid value: ${ value }`);\n\t\t} else if (!enum_table.has(value)) {\n\t\t\tthrow new IllformedStreamError(`Enum: Unknown value: ${ value }`);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport const U32 = {\n\tVAL,\n\tBITS,\n\tBITS_OFFSET,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\n/**\n * @typedef {import('./bit-stream.js').BitStream} BitStream\n */\n\n\nimport {U32} from './bit-stream.js';\n\nconst XSIZE_SEPARATE = 0; // xsize coded separately\nconst XSIZE_IS_YSIZE = 1; // xsize = ysize\nconst XSIZE_RATIO_12X10 = 2; // xsize = floor( ysize × 12 / 10)\nconst XSIZE_RATIO_4X3 = 3; // xsize = floor( ysize × 4 / 3)\nconst XSIZE_RATIO_3X2 = 4; // xsize = floor( ysize × 3 / 2)\nconst XSIZE_RATIO_16X9 = 5; // xsize = floor( ysize × 16 / 9)\nconst XSIZE_RATIO_5X4 = 6; // xsize = floor( ysize × 5 / 4)\nconst XSIZE_RATIO_2X1 = 7; // xsize = floor( ysize × 2 / 1)\n\n/**\n * The JXL size header\n */\nexport class SizeHeader {\n\t/*::\n\tsmall: boolean;\n\tysize: number;\n\txsize: number;\n\tratio: number;\n\t*/\n\n\t/**\n\t * Construct a new SizeHeader\n\t *\n\t * @param  {BitStream} stream The bit stream to read the SizeHeader from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tlet ysize;\n\t\tlet xsize;\n\t\tthis.small = stream.read_boolean();\n\n\t\tif (this.small) {\n\t\t\tysize = (stream.read_bits(5) + 1) * 8;\n\t\t} else {\n\t\t\tysize = stream.read_u32(\n\t\t\t\t[U32.BITS, 9],\n\t\t\t\t[U32.BITS, 13],\n\t\t\t\t[U32.BITS, 18],\n\t\t\t\t[U32.BITS, 30],\n\t\t\t) + 1;\n\t\t}\n\n\t\tthis.ratio = stream.read_bits(3);\n\n\t\tif (this.ratio === XSIZE_SEPARATE) {\n\t\t\tif (this.small) {\n\t\t\t\txsize = (stream.read_bits(5) + 1) * 8;\n\t\t\t} else {\n\t\t\t\txsize = stream.read_u32(\n\t\t\t\t\t[U32.BITS, 9],\n\t\t\t\t\t[U32.BITS, 13],\n\t\t\t\t\t[U32.BITS, 18],\n\t\t\t\t\t[U32.BITS, 30],\n\t\t\t\t) + 1;\n\t\t\t}\n\t\t} else if (this.ratio === XSIZE_IS_YSIZE) {\n\t\t\txsize = ysize;\n\t\t} else if (this.ratio === XSIZE_RATIO_12X10) {\n\t\t\txsize = Math.floor(ysize * 12 / 10);\n\t\t} else if (this.ratio === XSIZE_RATIO_4X3) {\n\t\t\txsize = Math.floor(ysize * 4 / 3);\n\t\t} else if (this.ratio === XSIZE_RATIO_3X2) {\n\t\t\txsize = Math.floor(ysize * 3 / 2);\n\t\t} else if (this.ratio === XSIZE_RATIO_16X9) {\n\t\t\txsize = Math.floor(ysize * 16 / 9);\n\t\t} else if (this.ratio === XSIZE_RATIO_5X4) {\n\t\t\txsize = Math.floor(ysize * 5 / 4);\n\t\t} else if (this.ratio === XSIZE_RATIO_2X1) {\n\t\t\txsize = Math.floor(ysize * 2 / 1);\n\t\t} else {\n\t\t\tthrow new Error('SizeHeader: unknown aspect ratio.');\n\t\t}\n\n\t\tthis.ysize = ysize;\n\t\tthis.xsize = xsize;\n\t}\n\n\t/**\n\t * Get whether or not this is a small image.\n\t * @return {boolean} True if small, false otherwise.\n\t */\n\tget_small()/*: boolean */ {\n\t\treturn this.small;\n\t}\n\n\t/**\n\t * Get the y-size of the image.\n\t *\n\t * @return {number} The y-size.\n\t */\n\tget_ysize()/*: number */ {\n\t\treturn this.ysize;\n\t}\n\n\t/**\n\t * Get the x-size of the image.\n\t * @return {number} The x-size.\n\t */\n\tget_xsize()/*: number */ {\n\t\treturn this.xsize;\n\t}\n\n\t/**\n\t * Get the aspect ratio.\n\t * @return {number} The ratio.\n\t */\n\tget_ratio()/*: number */ {\n\t\treturn this.ratio;\n\t}\n}\n\n\nexport const Ratio = {\n\tXSIZE_SEPARATE,\n\tXSIZE_IS_YSIZE,\n\tXSIZE_RATIO_12X10,\n\tXSIZE_RATIO_4X3,\n\tXSIZE_RATIO_3X2,\n\tXSIZE_RATIO_16X9,\n\tXSIZE_RATIO_5X4,\n\tXSIZE_RATIO_2X1,\n};\n","/* @flow */\n\n/*::\nimport type {BitStream, CustomXY} from './bit-stream';\n*/\n\n/**\n * Color Space enumeration.\n *\n * @type {Object}\n */\nexport const COLOR_SPACE = {\n\tK_RGB: 0,\n\tK_GREY: 1,\n\tK_XYB: 2,\n\tK_UNKNOWN: 3,\n\tK_XYZ: 4,\n};\nconst ENUM_COLOR_SPACE = new Set();\n\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_RGB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_GREY);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYB);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_UNKNOWN);\nENUM_COLOR_SPACE.add(COLOR_SPACE.K_XYZ);\n\n/**\n * White Point enumeration.\n * @type {Object}\n */\nconst WHITE_POINT = {\n\tK_D65: 1,\n\tK_CUSTOM: 2,\n\tK_E: 10,\n\tK_DCI: 11,\n};\n\nconst ENUM_WHITE_POINT = new Set();\n\nENUM_WHITE_POINT.add(WHITE_POINT.K_D65);\nENUM_WHITE_POINT.add(WHITE_POINT.K_CUSTOM);\nENUM_WHITE_POINT.add(WHITE_POINT.K_E);\nENUM_WHITE_POINT.add(WHITE_POINT.K_DCI);\n\n/**\n * Primaries enumeration.\n * @type {Object}\n */\nconst PRIMARIES = {\n\tK_SRGB: 1,\n\tK_CUSTOM: 2,\n\tK_2100: 9,\n\tK_P3: 11,\n};\nconst ENUM_PRIMARIES = new Set();\n\nENUM_PRIMARIES.add(PRIMARIES.K_SRGB);\nENUM_PRIMARIES.add(PRIMARIES.K_CUSTOM);\nENUM_PRIMARIES.add(PRIMARIES.K_2100);\nENUM_PRIMARIES.add(PRIMARIES.K_P3);\n\n/**\n * Transfer function enumeration.\n * @type {Object}\n */\nconst TRANSFER_FUNCTION = {\n\tK_709: 1,\n\tK_UNKNOWN: 2,\n\tK_LINEAR: 8,\n\tK_SRGB: 13,\n\tK_PQ: 16,\n\tK_DCI: 17,\n\tK_HLG: 18,\n};\nconst ENUM_TRANSFER_FUNCTION = new Set();\n\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_709);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_UNKNOWN);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_LINEAR);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_SRGB);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_PQ);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_DCI);\nENUM_TRANSFER_FUNCTION.add(TRANSFER_FUNCTION.K_HLG);\n\n\n/**\n * Rendering intent enumeration.\n * @type {Object}\n */\nconst RENDERING_INTENT = {\n\tK_PERCEPTUAL: 0,\n\tK_RELATIVE: 1,\n\tK_SATURATION: 2,\n\tK_ABSOLUTE: 3,\n};\nconst ENUM_RENDERING_INTENT = new Set();\n\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_PERCEPTUAL);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_RELATIVE);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_SATURATION);\nENUM_RENDERING_INTENT.add(RENDERING_INTENT.K_ABSOLUTE);\n\n/**\n * The JXL color encoding header.\n */\nexport class ColorEncoding {\n\t/*::\n\treceived_icc: boolean;\n\topaque_icc: boolean;\n\tcolor_space: number;\n\twhite_point: number;\n\twhite: CustomXY;\n\tprimaries: number;\n\tred: CustomXY | null;\n\tgreen: CustomXY | null;\n\tblue: CustomXY | null;\n\thave_gamma: boolean;\n\tgamma: number;\n\ttransfer_function: number;\n\trendering_intent: number;\n\t*/\n\n\t/**\n\t * Construct a new ColorEncoding.\n\t *\n\t * @param  {BitStream} [stream] The bit stream to read the encoding from\n\t */\n\tconstructor(stream/*: ?BitStream */) {\n\t\tthis.received_icc = false;\n\t\tthis.opaque_icc = false;\n\t\tthis.color_space = COLOR_SPACE.K_RGB;\n\t\tthis.white_point = WHITE_POINT.K_D65;\n\t\tthis.primaries = PRIMARIES.K_SRGB;\n\t\tthis.have_gamma = false;\n\t\tthis.gamma = 0;\n\t\tthis.transfer_function = TRANSFER_FUNCTION.K_SRGB;\n\t\tthis.rendering_intent = RENDERING_INTENT.K_RELATIVE;\n\n\t\tif (stream) {\n\t\t\tconst all_default = stream.read_boolean();\n\n\t\t\tif (!all_default) {\n\t\t\t\tthis.received_icc = stream.read_boolean();\n\n\t\t\t\tif (this.received_icc) {\n\t\t\t\t\tthis.opaque_icc = stream.read_boolean();\n\t\t\t\t} else {\n\t\t\t\t\tthis.opaque_icc = false;\n\t\t\t\t}\n\n\t\t\t\tconst use_desc = !all_default && !this.opaque_icc;\n\n\t\t\t\tif (use_desc) {\n\t\t\t\t\tthis.color_space = stream.read_enum(ENUM_COLOR_SPACE);\n\n\t\t\t\t\tconst not_xy = this.color_space !== COLOR_SPACE.K_XYB && this.color_space !== COLOR_SPACE.K_XYZ;\n\n\t\t\t\t\tif (not_xy) {\n\t\t\t\t\t\tthis.white_point = stream.read_enum(ENUM_WHITE_POINT);\n\n\t\t\t\t\t\tif (this.white_point === WHITE_POINT.K_CUSTOM) {\n\t\t\t\t\t\t\tthis.white = stream.read_customxy();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.primaries = stream.read_enum(ENUM_PRIMARIES);\n\n\t\t\t\t\t\t\tif (this.primaries === PRIMARIES.K_CUSTOM) {\n\t\t\t\t\t\t\t\tthis.red = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.green = stream.read_customxy();\n\t\t\t\t\t\t\t\tthis.blue = stream.read_customxy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.have_gamma = stream.read_boolean();\n\n\t\t\t\t\t\tif (this.have_gamma) {\n\t\t\t\t\t\t\tthis.gamma = stream.read_bits(24);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.transfer_function = stream.read_enum(ENUM_TRANSFER_FUNCTION);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.color_space !== COLOR_SPACE.K_GREY) {\n\t\t\t\t\t\t\tthis.rendering_intent = stream.read_enum(ENUM_RENDERING_INTENT);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/* @flow */\n\n/*::\nimport type {BitStream} from './bit-stream';\n*/\n\nimport {U32} from './bit-stream.js';\nimport {ColorEncoding} from './color-encoding.js';\n\n/*::\nimport type {ImageMetadata2} from './image-metadata2.js';\n*/\n\n/**\n * The JXL image metadata header.\n */\nexport class ImageMetadata {\n\t/*::\n\thave_icc: boolean;\n\tbits_per_sample: number;\n\tcolor_encoding: ColorEncoding | null;\n\talpha_bits: number;\n\ttarget_nits: number;\n\tm2: ImageMetadata2 | null;\n\t*/\n\n\t/**\n\t * Construct a new ImageMetadata.\n\t *\n\t * @param  {BitStream} stream The bit stream to read the ImageMetadata from.\n\t */\n\tconstructor(stream/*: BitStream */) {\n\t\tconst all_default = stream.read_boolean();\n\n\t\tif (!all_default) {\n\t\t\tthis.have_icc = stream.read_boolean();\n\t\t\tthis.bits_per_sample = stream.read_u32(\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.VAL, 32],\n\t\t\t\t[U32.BITS, 5],\n\t\t\t);\n\t\t\tthis.color_encoding = new ColorEncoding(stream);\n\t\t\tthis.alpha_bits = stream.read_u32(\n\t\t\t\t[U32.VAL, 0],\n\t\t\t\t[U32.VAL, 8],\n\t\t\t\t[U32.VAL, 16],\n\t\t\t\t[U32.BITS, 4],\n\t\t\t);\n\t\t\tthis.target_nits = stream.read_u32(\n\t\t\t\t[U32.VAL, 5],\n\t\t\t\t[U32.VAL, 20],\n\t\t\t\t[U32.VAL, 80],\n\t\t\t\t[U32.BITS_OFFSET, 10, 1],\n\t\t\t);\n\t\t\tthis.m2 = null;\n\t\t} else {\n\t\t\tthis.have_icc = false;\n\t\t\tthis.bits_per_sample = 8;\n\t\t\tthis.color_encoding = new ColorEncoding();\n\t\t\tthis.alpha_bits = 0;\n\t\t\tthis.target_nits = 5 * 50;\n\t\t\tthis.m2 = null;\n\t\t}\n\t}\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\n\nimport {/* U32, */ BitStream} from './jxl/bit-stream.js';\nimport {SizeHeader} from './jxl/size-header.js';\nimport {ImageMetadata} from './jxl/image-metadata.js';\nimport {COLOR_SPACE} from './jxl/color-encoding.js';\n\n// const CONTAINER_HEADER_SIZE = 48;\n// const MAX_CODESTREAM_BASIC_INFO_SIZE = 50;\n// const MAX_BASIC_INFO_SIZE = CONTAINER_HEADER_SIZE + MAX_CODESTREAM_BASIC_INFO_SIZE;\n\n// https://gitlab.com/wg1/jpeg-xl/-/blob/master/lib/jxl/decode.cc\n// https://arxiv.org/ftp/arxiv/papers/1908/1908.03565.pdf\n\n// signature: Signature\n// size: SizeHeader\n// metadata: ImageMetadata\n\n/**\n * A JPEG XL info provider.\n */\nexport class JXLInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible JPG, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 119;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.readUInt8(buffer.length - 1) !== 0x00;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\tconst size_header = new SizeHeader(bit_stream);\n\n\t\treturn {\n\t\t\twidth: size_header.get_xsize(),\n\t\t\theight: size_header.get_ysize(),\n\t\t\tframes: 1, // TODO: read this from ImageMetadata2\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst bit_stream = new BitStream(buffer, 0);\n\n\t\t// const size_header = new SizeHeader(bit_stream);\n\t\tconst image_metadata = new ImageMetadata(bit_stream);\n\t\tconst color_encoding = image_metadata.color_encoding;\n\n\t\tconst format = new PixelFormat();\n\n\t\tif (color_encoding) {\n\t\t\tif (color_encoding.color_space === COLOR_SPACE.K_GREY) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_RGB) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYZ) {\n\t\t\t\tformat.color_space = ColorSpace.XYZ;\n\t\t\t} else if (color_encoding.color_space === COLOR_SPACE.K_XYB) {\n\t\t\t\tformat.color_space = ColorSpace.XYB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat(color_encoding);\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","// This is what I percieve to be the ISOBMFF format. This is reverse engineered\n// from several files of different types.\n\nconst MAX_BLOCKS = 2048;\n\n\n// Root Block Tags\n//\n// MP4\n// ---\n// ftyp\n// free\n// mdat\n// moov\n//\n// AVIF\n// ----\n// ftyp\n// meta\n// mdat\n//\n// HEIC\n// ----\n// ftyp\n// meta\n// mdat\n\n\n/** @typedef {ISOBMFFAtom | ISOBMFFBlock} BlockOrAtom */\n\n/**\n * This is a block read from an ISOBMFF encoded file.\n */\nexport class ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFFBlock.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t */\n\tconstructor(length/*: number */, tag/*: string */) {\n\t\tthis.length = length;\n\t\tthis.tag = tag;\n\t}\n\n\t/**\n\t * Describe this atom.\n\t * @param {string} indent The indent to add to this description.\n\t * @return {string} The description of this atom.\n\t */\n\tdescribe(indent='') {\n\t\treturn `${ indent } ${ this.tag } (length ${ this.length })\\n`;\n\t}\n\n\t/**\n\t * Read a block from a buffer.\n\t * @param  {Buffer} buffer  The buffer object to read from.\n\t * @param  {number} offset  The offset to the beginning of the block.\n\t * @return {ISOBMFFAtom}   The block that was read.\n\t */\n\tstatic read(buffer/*: Buffer*/, offset/*: number */) {\n\t\tlet block;\n\t\tconst length = buffer.readUInt32BE(offset);\n\n\t\tif (length) {\n\t\t\tconst tag = buffer.toString('ascii', offset + 4, offset + 8);\n\t\t\tconst content = buffer.subarray(offset + 8, offset + length);\n\n\t\t\tif (tag in BLOCK_TYPES) {\n\t\t\t\tblock = new BLOCK_TYPES[tag](length, tag, content);\n\t\t\t} else {\n\t\t\t\tblock = new UnknownAtom(length, tag, content);\n\t\t\t}\n\t\t} else {\n\t\t\tblock = new NullAtom();\n\t\t}\n\n\t\treturn block;\n\t}\n}\n\n/**\n * A ISO BMFF Atom that can contains other Blocks or Atoms.\n */\nclass ISOBMFFBlock extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ISOBMFF block\n\t * @param  {number} length  The length of the block.\n\t * @param  {string} tag     The tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t * @param  {number} offset  The offset to the beginning of the container.\n\t */\n\tconstructor(length, tag, buffer, offset = 0) {\n\t\tsuper(length, tag);\n\n\t\tthis._buffer = buffer;\n\t\tthis._offset = offset;\n\t\tthis._children = null;\n\t}\n\n\t/**\n\t * Lazy load the children.\n\t * @return {{string: BlockOrAtom}} The children of this block.\n\t */\n\tget children() {\n\t\tconst buffer = this._buffer;\n\t\tconst offset = this._offset;\n\n\t\tif (!this._children) {\n\t\t\tthis._children = {};\n\n\t\t\tfor (const block of this.readBlocks(buffer, offset)) {\n\t\t\t\t// Only take the first block for a particular tag to prevent\n\t\t\t\t// appending data to overwrite content in the file. Which might be\n\t\t\t\t// a security issue.\n\t\t\t\t//\n\t\t\t\t// Also skip null blocks.\n\t\t\t\tif (block.tag !== null && !this._children[block.tag]) {\n\t\t\t\t\tthis._children[block.tag] = block;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._children;\n\t}\n\n\t/**\n\t * Read all of the blocks from this buffer starting at offset.\n\t *\n\t * @param  {Buffer} buffer The buffer object to read from\n\t * @param  {number} offset The offset to start reading from.\n\t * @yields {ISOBMFFBlock} for each block in the buffer.\n\t */\n\t* readBlocks(buffer, offset) {\n\t\tlet bytesProcessed = 0;\n\t\tlet blocksTillMax = MAX_BLOCKS;\n\n\t\twhile (bytesProcessed + offset < buffer.length && blocksTillMax) {\n\t\t\tconst block = ISOBMFFAtom.read(buffer, offset + bytesProcessed);\n\t\t\tbytesProcessed += block.length;\n\t\t\tblocksTillMax--;\n\n\t\t\tyield block;\n\t\t}\n\t}\n\n\t/**\n\t * Describe this block.\n\t * @param {string} indent The indent to add to this description.\n\t * @return {string} The description of this block.\n\t */\n\tdescribe(indent='') {\n\t\tconst desc = super.describe(indent);\n\t\tconst children = this.children;\n\t\tlet children_desc = '';\n\n\t\tif (children) {\n\t\t\tfor (const child of Object.values(children)) {\n\t\t\t\tchildren_desc += child.describe(indent + '    ');\n\t\t\t}\n\t\t}\n\n\t\treturn desc + children_desc;\n\t}\n}\n\n/**\n * A ISO BMFF block for an unidentified block.\n */\nclass UnknownAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Unknown block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.content = content;\n\t}\n}\n\n/**\n * A null atom for atoms that have zero length.\n */\nclass NullAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a null atom.\n\t */\n\tconstructor() {\n\t\tsuper(4, null);\n\t}\n}\n\n/**\n * This is the root block for all ISOBMFF block, The whole file.\n */\nexport class RootBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new root block.\n\t * @param  {Buffer} buffer The buffer that contains the file.\n\t */\n\tconstructor(buffer) {\n\t\tsuper(buffer.length, null, buffer);\n\t}\n}\n\n/**\n * A ISO BMFF block for an ftyp block.\n * ISO\n */\nclass FtypAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new Ftyp block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\n\t\tthis.majorBrand = this.readBrand(0, content);\n\t\tthis.minorVersion = content.readUInt32BE(4);\n\t\tthis.compatibleBrands = [];\n\n\t\tconst numberOfCompatBrands = (length - 16) / 4;\n\n\t\tfor (let i = 0; i < numberOfCompatBrands; i++) {\n\t\t\tthis.compatibleBrands.push(this.readBrand((i * 4) + 8, content));\n\t\t}\n\t}\n\n\t/**\n\t * Read a brand from a block.\n\t * @param  {number} offset The offset to start reading at\n\t * @param  {Buffer} buffer The buffer to read from\n\t * @return {string}        The brand.\n\t */\n\treadBrand(offset, buffer) {\n\t\treturn buffer.subarray(offset, offset + 4).toString('ascii');\n\t}\n}\n\n/**\n * The ISPE atom. Contains the image width and image height.\n */\nclass ISPEAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new ispe block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} content  The content of the block.\n\t */\n\tconstructor(length, tag, content) {\n\t\tsuper(length, tag);\n\t\tthis.unknown = content.readUInt32BE(0);\n\t\tthis.width = content.readUInt32BE(4);\n\t\tthis.height = content.readUInt32BE(8);\n\t}\n}\n\n/**\n * The PIXI atom. Contains the Pixel format.\n */\nclass PIXIAtom extends ISOBMFFAtom {\n\t/**\n\t * Construct a new pixi block.\n\t * @param  {number} length   The length of the block.\n\t * @param  {string} tag      The block tag.\n\t * @param  {Buffer} buffer  The content of the block.\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer);\n\n\t\tconst UNKNOWN_BITS = 4;\n\n\t\tthis.unknown = buffer.readUInt32BE(0);\n\t\tthis.channels = buffer.readUInt8(UNKNOWN_BITS);\n\t\tthis.bitsPerChannel = [];\n\n\t\tfor (let i = 0; i < this.channels; i++) {\n\t\t\tthis.bitsPerChannel.push(buffer.readUInt8(UNKNOWN_BITS + 1));\n\t\t}\n\t}\n}\n\n\n/**\n * A 'iinf' block.\n */\nclass IINFBlock extends ISOBMFFBlock {\n\t/**\n\t * Construct a new IINFBlock.\n\t * @param  {number} length The length of the block\n\t * @param  {string} tag    The block tag\n\t * @param  {Buffer} buffer The buffer that contains the block content\n\t */\n\tconstructor(length, tag, buffer) {\n\t\tsuper(length, tag, buffer, 6);\n\t}\n}\n\n\nconst BLOCK_TYPES = {\n\t'ftyp': FtypAtom,\n\n\t// HEIC/AVIF\n\t'meta': ISOBMFFBlock,\n\t'iprp': ISOBMFFBlock,\n\t'iinf': IINFBlock,\n\t'ipco': ISOBMFFBlock,\n\t'ispe': ISPEAtom,\n\t'pixi': PIXIAtom,\n\t// 'colr': COLRAtom, // Color Profile\n};\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\nimport {RootBlock} from '../image/isobmff/isobmff.js';\n\n\n/**\n * A AVIF info provider.\n */\nexport class AVIFInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible AVIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 333;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\t// TODO: implement\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst ispeAtom = root.children.meta.children.iprp.children.ipco.children.ispe;\n\n\t\treturn {\n\t\t\twidth: ispeAtom.width,\n\t\t\theight: ispeAtom.height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst root = new RootBlock(buffer);\n\t\tconst format = new PixelFormat();\n\t\tformat.color_space = ColorSpace.RGB;\n\t\tconst pixi = root.children.meta.children.iprp.children.ipco.children.pixi;\n\n\t\t// console.log(root.children.meta.children.iprp.children.ipco.children);\n\n\t\tif (pixi) {\n\t\t\tconst channels = pixi.channels;\n\n\t\t\tif (channels === 1) {\n\t\t\t\tformat.color_space = ColorSpace.G;\n\t\t\t} else if (channels === 3) {\n\t\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t\t} else {\n\t\t\t\tformat.color_space = ColorSpace.unkownFormat('Unknown', channels);\n\t\t\t}\n\t\t} else {\n\t\t\t// If there is no 'pixi' atom assume RGB. I don't know if this is\n\t\t\t// the correct way of handling this.\n\t\t\tformat.color_space = ColorSpace.RGB;\n\t\t}\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport {ImageIdentifier} from '../ident.js';\nconst RIFF_TAG = 0x52494646;\nconst MINIMUM_SIZE = 12; // 12 == size of RIFF_TAG + skipped bytes + size of this.type_tag\n\n/**\n * An image identifier that identifies RIFF based files.\n */\nexport class RIFFIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the type tag of this type of file.\n\t */\n\tget_type_tag()/*: number */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\tconst riff_magic = buffer.readUInt32BE(0);\n\t\tconst type_magic = buffer.readUInt32BE(8);\n\n\t\treturn riff_magic === RIFF_TAG && type_magic === this.get_type_tag();\n\t}\n}\n","import {RIFFChunk, SimpleChunk} from './chunk.js';\n\nexport const CHUNK_ID_LENGTH = 4;\nexport const CHUNK_LENGTH_LENGTH = 4;\nexport const SUBCHUNK_ID_LENGTH = 4;\n\n/**\n * Read all of the chunks in the buffer.\n * @param  {Buffer} buffer The file buffer.\n * @param  {number} offset The off of the beginning of the chunks.\n * @param  {Record<string, BaseChunk>} chunk_types The types of chunks in this RIFF file\n * @return {BaseChunk[]}   The chunks.\n */\nexport function read_chunks(buffer, offset, chunk_types) {\n\tconst chunks = [];\n\tlet current_offset = offset;\n\n\twhile (current_offset < buffer.length) {\n\t\tconst chunk_id = buffer.toString('ascii', current_offset, current_offset + CHUNK_ID_LENGTH);\n\t\tlet chunk;\n\n\t\tif (chunk_id === 'RIFF') {\n\t\t\tchunk = new RIFFChunk(buffer, chunk_id, current_offset, chunk_types);\n\t\t} else if (chunk_id in chunk_types) {\n\t\t\tchunk = new chunk_types[chunk_id](buffer, chunk_id, current_offset);\n\t\t} else {\n\t\t\t// console.warn('Unknown chunk id', chunk_id);\n\t\t\tchunk = new SimpleChunk(buffer, chunk_id, current_offset);\n\t\t}\n\n\t\tchunks.push(chunk);\n\n\t\tcurrent_offset += chunk.get_total_length();\n\t}\n\n\treturn chunks;\n}\n","import {read_chunks, CHUNK_ID_LENGTH, CHUNK_LENGTH_LENGTH, SUBCHUNK_ID_LENGTH} from './reader.js';\n\n\n/**\n * A RIFF chunk\n */\nexport class BaseChunk {\n\t/**\n\t * Construct a new base chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {string} chunk_id The id of the chunk.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, chunk_id, offset) {\n\t\tthis.offset = offset;\n\t\tthis.header = chunk_id;\n\t\tthis.length = buffer.readUInt32LE(offset + CHUNK_ID_LENGTH);\n\t\tthis.data = buffer.subarray(\n\t\t\toffset + CHUNK_ID_LENGTH + CHUNK_LENGTH_LENGTH,\n\t\t\toffset + CHUNK_ID_LENGTH + CHUNK_LENGTH_LENGTH + this.length,\n\t\t);\n\t}\n\n\t/**\n\t * Get the total length of the chunk. This is different from the length\n\t * property that is only the data length.\n\t * @return {number} The length of the chunks.\n\t */\n\tget_total_length() {\n\t\tconst padding_byte = this.length % 2;\n\n\t\treturn CHUNK_ID_LENGTH + CHUNK_LENGTH_LENGTH + this.length + padding_byte;\n\t}\n\n\t/**\n\t * Describe this chunk.\n\t * @return {string} The description of this chunk.\n\t */\n\tdescribe() {\n\t\treturn `${ this.header } (offset: ${ this.offset }, length: ${ this.length })`;\n\t}\n}\n\n/**\n * A chunk for a RIFF file that contains simple data.\n */\nexport class SimpleChunk extends BaseChunk {\n\n}\n\n/**\n * A RIFF chunk. This chunk can contain child chunks\n */\nexport class RIFFChunk extends BaseChunk {\n\t/**\n\t * Construct a RIFF chunk.\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {string} chunk_id The id of the chunk.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t * @param  {Record<string, BaseChunk>} chunk_types The acceptable types of chunks.\n\t */\n\tconstructor(buffer, chunk_id, offset, chunk_types) {\n\t\tsuper(buffer, chunk_id, offset);\n\n\t\tthis.subchunk_id = this.data.toString('ascii', offset, offset + SUBCHUNK_ID_LENGTH);\n\n\t\tthis.subchunks = read_chunks(\n\t\t\tbuffer,\n\t\t\toffset + CHUNK_ID_LENGTH + CHUNK_LENGTH_LENGTH + SUBCHUNK_ID_LENGTH,\n\t\t\tchunk_types,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdescribe() {\n\t\treturn super.describe() + `\\n\\nSubchunk Id: ${this.subchunk_id}\\nNumber of subchunks: ${ this.subchunks.length }\\n` + this.subchunks.map((chunk) => chunk.describe()).join('\\n');\n\t}\n}\n","import {Bitstream} from '../bitstream/bitstream.js';\nimport {BaseChunk, SimpleChunk} from '../riff/chunk.js';\nimport {read_chunks as riff_read_chunks} from '../riff/reader.js';\n\n/**\n * The WebP Lossless Chunk\n * https://developers.google.com/speed/webp/docs/webp_lossless_bitstream_specification\n */\nclass VP8LChunk extends BaseChunk {\n\t/**\n\t * Construct a new VP8L Chunk\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {string} chunk_id The id of the chunk.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, chunk_id, offset) {\n\t\tsuper(buffer, chunk_id, offset);\n\n\t\tconst bitstream = new Bitstream(this.data, 0);\n\t\t// compulsory byte\n\t\tthis.is_valid = bitstream.read_bits(8) === 0x2F;\n\t\tthis.width = bitstream.read_bits(14) + 1;\n\t\tthis.height = bitstream.read_bits(14) + 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdescribe() {\n\t\treturn super.describe() +\n\t\t\t'\\n  Width: ' + this.width +\n\t\t\t'\\n  Height: ' + this.height;\n\t}\n}\n\nconst VERSIONS = [\n\t'Bicubic, Normal Loop Filter',\n\t'Bilinear, Simple Loop Filter',\n\t'Bilinear, No Loop Filter',\n\t'No Reconstruction Filter, No Loop Filter',\n\t'Unknown', // Reserved for future use\n];\n\n/**\n * The WebP Lossy Chunk\n * https://datatracker.ietf.org/doc/html/rfc6386#page-30\n */\nclass VP8Chunk extends BaseChunk {\n\t/**\n\t * Construct a new VP8 Chunk\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {string} chunk_id The id of the chunk.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, chunk_id, offset) {\n\t\tsuper(buffer, chunk_id, offset);\n\n\t\tconst bitstream = new Bitstream(this.data, 0);\n\t\tthis.frame_type = bitstream.read_boolean();\n\t\tthis.version = bitstream.read_bits(3);\n\t\tthis.show_frame = bitstream.read_boolean();\n\t\tthis.data_partition_size = bitstream.read_bits(19);\n\n\t\t// compulsory bytes.\n\t\tthis.is_valid = bitstream.read_bits(8) === 0x9d &&\n\t\t\tbitstream.read_bits(8) === 0x01 &&\n\t\t\tbitstream.read_bits(8) === 0x2A;\n\n\t\tthis.width = bitstream.read_bits(14);\n\t\tthis.horz_scale = bitstream.read_bits(2);\n\t\tthis.height = bitstream.read_bits(14);\n\t\tthis.vert_scale = bitstream.read_bits(2);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdescribe() {\n\t\treturn super.describe() +\n\t\t\t'\\n  Frame Type: ' + (this.frame_type ? 'interframe' : 'keyframe') +\n\t\t\t'\\n  Version: ' + this.version + ' (' + VERSIONS[this.version] + ')' +\n\t\t\t'\\n  Show Frame: ' + this.show_frame +\n\t\t\t'\\n  Valid: ' + this.is_valid +\n\t\t\t'\\n  Width: ' + this.width +\n\t\t\t'\\n  Height: ' + this.height;\n\t}\n}\n\nconst VP8X_FLAGS_LENGTH = 4;\nconst VP8X_WIDTH_LENGTH = 3;\n\n/**\n * Read a Little-Endian 24 bit unsigned integer from a buffer\n * @param  {Buffer} buffer The buffer\n * @param  {number} offset The offset from the start of the buffer.\n * @return {number}        The 24bit integer.\n */\nfunction readUint24LE(buffer, offset) {\n\tconst low_byte = buffer.readUInt8(offset);\n\tconst middle_byte = buffer.readUInt8(offset + 1);\n\tconst high_byte = buffer.readUInt8(offset + 2);\n\n\treturn (high_byte << 16) | (middle_byte << 8) | low_byte;\n}\n\n/**\n * The WebP Lossy Chunk\n * https://developers.google.com/speed/webp/docs/riff_container#extended_file_format\n */\nclass VP8XChunk extends BaseChunk {\n\t/**\n\t * Construct a new VP8X Chunk\n\t *\n\t * @param  {Buffer} buffer The file buffer.\n\t * @param  {string} chunk_id The id of the chunk.\n\t * @param  {number} offset The offset of the beginning of the chunk.\n\t */\n\tconstructor(buffer, chunk_id, offset) {\n\t\tsuper(buffer, chunk_id, offset);\n\n\t\tthis.width = readUint24LE(this.data, VP8X_FLAGS_LENGTH) + 1;\n\t\tthis.height = readUint24LE(this.data, VP8X_FLAGS_LENGTH + VP8X_WIDTH_LENGTH) + 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdescribe() {\n\t\treturn super.describe() +\n\t\t\t'\\n  Width: ' + this.width +\n\t\t\t'\\n  Height: ' + this.height;\n\t}\n}\n\nexport const VP8_CHUNK_TYPES = {\n\t'VP8 ': VP8Chunk,\n\t'VP8L': VP8LChunk,\n\t'VP8X': VP8XChunk,\n\t'ANIM': SimpleChunk,\n\t'ANMF': SimpleChunk,\n};\n\n/**\n * Read all of the chunks in the buffer.\n * @param  {Buffer} buffer The file buffer.\n * @param  {number} offset The off of the beginning of the chunks.\n * @return {BaseChunk[]}   The chunks.\n */\nexport function read_chunks(buffer, offset) {\n\treturn riff_read_chunks(buffer, offset, VP8_CHUNK_TYPES);\n}\n","/* @flow */\n'use strict';\n\n/*::\nimport type {Dimensions} from '../image-info.js';\n*/\n\nimport {InfoProvider} from '../image-info.js';\nimport {PixelFormat, ColorSpace} from '../pixel-format.js';\nimport {RIFFChunk} from './riff/chunk.js';\nimport {read_chunks} from './vp8/vp8.js';\n\n\n/**\n * A AVIF info provider.\n */\nexport class WEBPInfoProvider extends InfoProvider {\n\t/**\n\t * @inheritdoc\n\t */\n\tget_overhead()/*: number */ {\n\t\t// This is the size of the smallest possible AVIF, I'm assuming it will\n\t\t// be mostly overhead.\n\t\treturn 333;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tis_truncated(buffer/*: Buffer */)/*: boolean */ {\n\t\t// TODO: implement\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_dimensions(buffer/*: Buffer */)/*: Dimensions */ {\n\t\tconst root = read_chunks(buffer, 0)[0];\n\t\tlet dimensions_chunk;\n\n\t\tif (root instanceof RIFFChunk) {\n\t\t\tdimensions_chunk = root.subchunks.find((chunk) => chunk.header === 'VP8X' || chunk.header === 'VP8L');\n\t\t}\n\n\t\treturn {\n\t\t\twidth: dimensions_chunk.width,\n\t\t\theight: dimensions_chunk.height,\n\t\t\tframes: 1,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_pixel_format(buffer/*: Buffer */)/*: PixelFormat */ {\n\t\tconst format = new PixelFormat();\n\t\tformat.color_space = ColorSpace.RGB;\n\n\t\treturn format;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\n\n/**\n * An image identifier that can identify XML files.\n */\nexport class XMLIdentifier extends ImageIdentifier {\n\t/**\n\t * Get the name of the root element of this type of XML file.\n\t */\n\tget_root_element()/*: string */ {\n\t\tthrow new Error('Not Implemented!');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer/*: Buffer */)/*: boolean */ {\n\t\t// Only check the first part of the file.\n\t\tconst small_buffer = buffer.slice(0, 512).toString().toLowerCase();\n\n\t\treturn small_buffer.includes('<' + this.get_root_element());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer/*: Buffer */)/*: boolean */ {\n\t\treturn true;\n\t}\n}\n","/**\n * @typedef {import('./ident.js').ImageIdentifier} ImageIdentifier\n */\n\nimport PNGIdent from './ident/png-ident.js';\nimport GIFIdent from './ident/gif-ident.js';\nimport JPGIdent from './ident/jpg-ident.js';\nimport JXLIdent from './ident/jxl-ident.js';\nimport AVIFIdent from './ident/avif-ident.js';\n\n// Identify only\nimport BMPIdent from './ident/bmp-ident.js';\nimport PSDIdent from './ident/psd-ident.js';\nimport ICOIdent from './ident/ico-ident.js';\nimport TIFFIdent from './ident/tiff-ident.js';\nimport WEBPIdent from './ident/webp-ident.js';\nimport SVGIdent from './ident/svg-ident.js';\nimport HTMLIdent from './ident/html-ident.js';\n\n/**\n * A registry for image identifiers.\n */\nexport class ImageIdentifierRegistry {\n\t/**\n\t * Add an image identifier to the registry.\n\t * @param  {function} Constructor The constructor of the identifier.\n\t */\n\tstatic register(Constructor/*: Class<ImageIdentifier> */) {\n\t\tconst provider = new Constructor();\n\t\tconst is_identify_only = provider.identify_only();\n\n\t\tfor (const extension of provider.get_extensions()) {\n\t\t\tthis._extension_registry.set(extension, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_extensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tfor (const mime of provider.get_mimes()) {\n\t\t\tthis._mime_registry.set(mime, provider);\n\n\t\t\tif (!is_identify_only) {\n\t\t\t\tthis._all_mimes.push(mime);\n\t\t\t}\n\t\t}\n\n\t\tthis._all_providers.push(provider);\n\t}\n\n\t/**\n\t * Clear the registered identifiers.\n\t */\n\tstatic clear_registry() {\n\t\tthis._extension_registry.clear();\n\t\tthis._all_extensions.length = 0;\n\n\t\tthis._mime_registry.clear();\n\t\tthis._all_mimes.length = 0;\n\n\t\tthis._all_providers.length = 0;\n\t}\n\n\t/**\n\t * Get all of the know file extensions.\n\t *\n\t * @return {string[]} An array of file extension.\n\t */\n\tstatic get_all_extensions()/*: string[] */ {\n\t\treturn ImageIdentifierRegistry._all_extensions;\n\t}\n\n\t/**\n\t * Get all of the known MIME types.\n\t *\n\t * @return {string[]} An array of MIME types.\n\t */\n\tstatic get_all_mimes()/*: string[] */ {\n\t\treturn ImageIdentifierRegistry._all_mimes;\n\t}\n\n\t/**\n\t * Construct a new identifier using the file extension.\n\t *\n\t * @param {string} extension   The file extension of the file.\n\t * @return {ImageIdentifier}  The new image identifier.\n\t */\n\tstatic from_extension(extension/*: string */)/*: ?ImageIdentifier */ {\n\t\treturn ImageIdentifierRegistry._extension_registry.get(extension);\n\t}\n\n\t/**\n\t * Construct a new identifier using the file descriptor. This doesn't load\n\t * the file and only uses the metadata provided by the file\n\t * descriptor.\n\t *\n\t * @param  {FileDescriptor} file The file descriptor.\n\t * @return {ImageIdentifier}     The new image identifier.\n\t */\n\tstatic from_file_descriptor(file) {\n\t\treturn ImageIdentifierRegistry.from_extension(file.extension);\n\t}\n\n\t/**\n\t * Iterate all of the registered providers.\n\t */\n\tstatic* all_providers()/*: Generator<ImageIdentifier, void, void>*/ {\n\t\tyield* ImageIdentifierRegistry._all_providers;\n\t}\n}\n\nImageIdentifierRegistry._extension_registry = new Map();\nImageIdentifierRegistry._mime_registry = new Map();\nImageIdentifierRegistry._all_providers = [];\nImageIdentifierRegistry._all_extensions = [];\nImageIdentifierRegistry._all_mimes = [];\n\n\nImageIdentifierRegistry.register(PNGIdent);\nImageIdentifierRegistry.register(GIFIdent);\nImageIdentifierRegistry.register(JPGIdent);\nImageIdentifierRegistry.register(JXLIdent);\nImageIdentifierRegistry.register(AVIFIdent);\nImageIdentifierRegistry.register(BMPIdent);\nImageIdentifierRegistry.register(PSDIdent);\nImageIdentifierRegistry.register(ICOIdent);\nImageIdentifierRegistry.register(TIFFIdent);\nImageIdentifierRegistry.register(WEBPIdent);\nImageIdentifierRegistry.register(SVGIdent);\nImageIdentifierRegistry.register(HTMLIdent);\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {PNGInfoProvider} from '../image/png-info.js';\nimport {PNGImageLinter} from '../linter/png-linter.js';\nimport {PNGChunk, FIRST_CHUNK_OFFSET} from '../image/png/chunk.js';\n\n/**\n * An image identifier that identifies PNG images.\n */\nexport default class PNGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('89504e470d0a1a0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/png',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn PNGInfoProvider;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_linter(buffer) {\n\t\treturn new PNGImageLinter(buffer);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdebug_print(buffer, write_stream) {\n\t\tconst chunks = PNGChunk.get_chunks(buffer, FIRST_CHUNK_OFFSET);\n\n\t\twrite_stream.write(`Number of chunks: ${chunks.length}\\n`);\n\n\t\tfor (const chunk of chunks) {\n\t\t\twrite_stream.write(chunk.describe());\n\t\t\twrite_stream.write('\\n');\n\t\t}\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {GIFInfoProvider} from '../image/gif-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nexport default class GIFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('GIF');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/gif',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn GIFInfoProvider;\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JPGInfoProvider} from '../image/jpg-info.js';\nimport {JPEGImageLinter} from '../linter/jpg-linter.js';\nimport {JPEGChunk} from '../image/jpg/chunk.js';\n\n/**\n * An image identifier that identifies JPEG images.\n */\nexport default class JPGIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ffd8ff', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jpg',\n\t\t\t'.jpeg',\n\t\t\t'.jpe',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jpeg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JPGInfoProvider;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_linter(buffer) {\n\t\treturn new JPEGImageLinter(buffer);\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdebug_print(buffer, write_stream) {\n\t\tconst chunks = JPEGChunk.get_chunks(buffer, 0);\n\n\t\twrite_stream.write(`Number of chunks: ${chunks.length}\\n`);\n\n\t\tfor (const chunk of chunks) {\n\t\t\twrite_stream.write(chunk.describe());\n\t\t\twrite_stream.write('\\n');\n\t\t}\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\nimport {JXLInfoProvider} from '../image/jxl-info.js';\n\n/**\n * An image identifier that identifies GIF images.\n */\nexport default class JXLIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('ff0a', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.jxl',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/jxl',\n\t\t];\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn JXLInfoProvider;\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nimport {AVIFInfoProvider} from '../image/avif-info.js';\nimport {RootBlock} from '../image/isobmff/isobmff.js';\n\nconst FTYP_START = 4;\nconst FTYPE_LENGTH = 8;\n\n/**\n * An image identifier that identifies AVIF images.\n */\nexport default class AVIFIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > (FTYP_START + FTYPE_LENGTH);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\tconst ftyp = buffer.subarray(FTYP_START, FTYP_START + FTYPE_LENGTH).toString('ascii');\n\n\t\treturn ftyp === 'ftypavif' || ftyp === 'ftypheic';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.avif',\n\t\t\t'.heif',\n\t\t\t'.heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/avif',\n\t\t\t'image/heif',\n\t\t\t'image/heic',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn AVIFInfoProvider;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdebug_print(buffer, write_stream) {\n\t\tconst root = new RootBlock(buffer);\n\n\t\twrite_stream.write(root.describe());\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies BMP images.\n *\n * https://en.wikipedia.org/wiki/BMP_file_format\n */\nexport default class BMPIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('424D', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.bmp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/bmp',\n\t\t\t'image/x-bmp',\n\t\t];\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies PSD images.\n */\nexport default class PSDIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from('38425053', 'hex');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.psd',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/photoshop',\n\t\t\t'image/x-photoshop',\n\t\t\t'image/psd',\n\t\t];\n\t}\n}\n","/* @flow */\n\nimport {ImageIdentifier} from '../ident.js';\nconst FIRST_BYTE = 0;\nconst ICO_MAGIC = 1;\nconst CUR_MAGIC = 2;\nconst MINIMUM_SIZE = 4; // 4 == size of FIRST_BYTE + size of *_MAGIC\n\n/**\n * An image identifier that identifies ICO images.\n */\nexport default class IcoIdentifier extends ImageIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tcan_validate(buffer) {\n\t\treturn buffer.length > MINIMUM_SIZE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis_of_file_type(buffer) {\n\t\t// ico: 0000 0001\n\t\t// cur: 0000 0002\n\t\tconst first_magic = buffer.readUInt16LE(0);\n\t\tconst type_magic = buffer.readUInt16LE(2);\n\n\t\treturn first_magic === FIRST_BYTE &&\n\t\t\t(type_magic === ICO_MAGIC || type_magic === CUR_MAGIC);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.ico',\n\t\t\t'.cur',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/x-icon',\n\t\t];\n\t}\n}\n","/* @flow */\n\nimport {MagicNumberIdentifier} from './magic-number-ident.js';\n\n/**\n * An image identifier that identifies TIFF images.\n */\nexport default class TIFFIdentifier extends MagicNumberIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_magic() {\n\t\treturn Buffer.from([0x49, 0x49, 0x2A, 0x00]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.tif',\n\t\t\t'.tiff',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/tiff',\n\t\t\t'image/tiff-fx',\n\t\t];\n\t}\n}\n","/* @flow */\n'use strict';\n\nimport {RIFFIdentifier} from './riff-ident.js';\nimport {WEBPInfoProvider} from '../image/webp-info.js';\nimport {read_chunks} from '../image/vp8/vp8.js';\n\nconst WEBP_TYPE_TAG = 0x57454250;\n\n/**\n * An image identifier that identifies WebP images.\n */\nexport default class WebPIdentifier extends RIFFIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_type_tag() {\n\t\treturn WEBP_TYPE_TAG;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.webp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/webp',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_info_provider() {\n\t\treturn WEBPInfoProvider;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdebug_print(buffer, write_stream) {\n\t\tconst chunks = read_chunks(buffer, 0);\n\n\t\twrite_stream.write(`Number of chunks: ${chunks.length}\\n`);\n\n\t\tfor (const chunk of chunks) {\n\t\t\twrite_stream.write(chunk.describe());\n\t\t\twrite_stream.write('\\n');\n\t\t}\n\t}\n}\n","/* @flow */\n\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies SVG images.\n */\nexport default class SVGIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'svg';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.svg',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'image/svg+xml',\n\t\t];\n\t}\n}\n","/* @flow */\n\nimport {XMLIdentifier} from './xml-ident.js';\n\n/**\n * An image identifier that identifies HTML files.\n */\nexport default class HTMLIdentifier extends XMLIdentifier {\n\t/**\n\t * @inheritDoc\n\t */\n\tget_root_element() {\n\t\treturn 'html';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_extensions() {\n\t\treturn [\n\t\t\t'.html',\n\t\t\t'.htm',\n\t\t\t'.xhtml',\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget_mimes() {\n\t\treturn [\n\t\t\t'text/html',\n\t\t\t'application/xhtml+xml',\n\t\t];\n\t}\n}\n","/* @flow */\n\nimport {WorkHandler} from './work-handler.js';\nimport {Hasher} from './hasher.js';\nimport {ColorSpace} from './pixel-format.js';\nimport {ROOT_LOGGER} from './logger.js';\nimport {EventEmitter} from 'events';\nimport {ImageIdentifierRegistry} from './ident-registry.js';\n\n/*::\nimport type { Dimensions, ImageInfo } from './image-info';\nimport type Finder from './finder';\nimport type {FileDescriptor} from './finder';\nimport type {Log} from './logger';\n\nexport type LinterOptions = {\n\tcolor_space: string[],\n\tduplicate: boolean,\n\tbytes_per_pixel: number,\n\tbyte_savings: number,\n\tmismatch: boolean,\n\thelp: boolean,\n\tversion: boolean\n};\n */\n\n/**\n * @typedef {import('./ident.js').ImageIdentifier} ImageIdentifier\n */\n\n\n/**\n * An unavoidable linter error that prevents the linter from continuing. This\n * is mainly marker class so we don't have to print the stack trace.\n */\nclass LinterError extends Error {\n\n}\n\n/**\n * The image linter.\n */\nexport class Linter extends EventEmitter {\n\t/*::\n\tfinder: Finder;\n\tdisable_color: boolean;\n\t */\n\n\t/**\n\t * Construct a new Linter\n\t * @param  {Finder} finder The finder to use to locate the images.\n\t */\n\tconstructor(finder/*: Finder */) {\n\t\tsuper();\n\n\t\tthis.finder = finder;\n\t\tthis.disable_color = false;\n\t}\n\n\t/**\n\t * Calculate the optimal size of the image.\n\t *\n\t * @param  {Dimensions} dims   The dimensions of the image.\n\t * @param  {number}     bpp    The bytes per pixel of the image.\n\t * @return {number}            The optimial size of the image.\n\t */\n\tcalculate_optimial_size(dims/*: Dimensions */, bpp/*: number */)/*: number */ {\n\t\treturn ((dims.width * dims.height * dims.frames) * bpp);\n\t}\n\n\t/**\n\t * Construct a description of an image file.\n\t *\n\t * @param  {Dimensions} dims    The dimensions of the image.\n\t * @return {string}             The description of the image.\n\t */\n\tdescribe_file(dims/*: Dimensions */)/*: string */ {\n\t\treturn 'File properties: ' + dims.width + 'x' + dims.height + (dims.frames !== 1 ? ', ' + dims.frames + ' frames' : '');\n\t}\n\n\t/**\n\t * Get the information for the file.\n\t *\n\t * @param  {FileDescriptor} file    The file descriptor.\n\t * @param  {Buffer} buffer          The file buffer.\n\t * @param  {Log} logger             The logger for printing errors.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Promise<ImageIdentifier>}     The image info.\n\t */\n\tget_identifier(\n\t\tfile/*: FileDescriptor */,\n\t\tbuffer/*: Buffer */,\n\t\tlogger/*: Log */,\n\t\toptions/*: LinterOptions */)/*: Promise<ImageInfo> */ {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst extension = file.extension.toLowerCase();\n\t\t\tlet identifier = ImageIdentifierRegistry.from_extension(extension);\n\t\t\tlet file_buffer/*: ?Buffer */ = null;\n\t\t\tlet is_of_file_type = false;\n\n\t\t\tif (buffer instanceof Buffer) {\n\t\t\t\tfile_buffer = buffer;\n\t\t\t} else {\n\t\t\t\treject(new LinterError('Image buffer is missing, this is a bug.'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tis_of_file_type = identifier.is_of_file_type(file_buffer);\n\t\t\t} else {\n\t\t\t\tlogger.warn('There is no information provider for \"' + extension + '\" files.');\n\t\t\t}\n\n\t\t\t// Attenpt to find the correct file type.\n\t\t\tif (!identifier || !is_of_file_type) {\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.info('This file is not what it seems, attempting brute force discovery of file type.');\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info('This file is not what it seems.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = null;\n\n\t\t\t\tfor (const candidate of ImageIdentifierRegistry.all_providers()) {\n\t\t\t\t\tif (candidate.can_validate(file_buffer) && candidate.is_of_file_type(file_buffer)) {\n\t\t\t\t\t\tidentifier = candidate;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!is_of_file_type) {\n\t\t\t\tlet found_extension = 'unknown';\n\n\t\t\t\tif (identifier) {\n\t\t\t\t\tfound_extension = identifier.get_extension();\n\t\t\t\t}\n\n\t\t\t\tif (options.mismatch === true) {\n\t\t\t\t\tlogger.warn('There is a mismatch between the file extension (' + extension + ') and the file contents (' + found_extension + ')');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (identifier) {\n\t\t\t\tresolve(identifier);\n\t\t\t} else {\n\t\t\t\treject(new LinterError('Unknown file type'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the information for the file.\n\t *\n\t * @param  {ImageIdentifier} identifier  The file identifier.\n\t * @param  {Buffer} buffer          The file buffer.\n\t * @param  {Log} logger             The logger for printing errors.\n\t * @return {ImageInfo}     The image info.\n\t */\n\tget_info(\n\t\tidentifier,\n\t\tbuffer/*: Buffer */)/*: Promise<ImageInfo> */ {\n\t\tconst ProviderClass = identifier.get_info_provider();\n\t\tlet image_info;\n\n\t\tif (ProviderClass) {\n\t\t\tconst provider = new ProviderClass();\n\n\t\t\timage_info = provider.get_info(buffer);\n\t\t} else {\n\t\t\tthrow new LinterError('Unsupported file type');\n\t\t}\n\n\t\treturn image_info;\n\t}\n\n\t/**\n\t * Run the linter\n\t * @param  {string[]} folder        A list of folders to look for images in.\n\t * @param  {LinterOptions} options  The options for the linter.\n\t * @return {Linter}                 The linter for chaining.\n\t */\n\tlint(folder/*: string[] */, options/*: LinterOptions */)/*: Linter */ {\n\t\tconst handler = new WorkHandler();\n\t\tconst hasher = new Hasher();\n\t\tlet allowed_color_spaces/*: Set<ColorSpace> | null */ = null;\n\n\t\t// Prepare the allowed color spaces.\n\t\tif (options.color_space) {\n\t\t\tconst spaces = options.color_space;\n\n\t\t\tallowed_color_spaces = new Set();\n\n\t\t\tfor (let space of spaces) {\n\t\t\t\tspace = ColorSpace.from(space);\n\n\t\t\t\tif (space) {\n\t\t\t\t\tallowed_color_spaces.add(space);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thandler.on('next', async (file/*: FileDescriptor */, done/*: () => void */) => {\n\t\t\tconst logger = ROOT_LOGGER.get_logger(file.path);\n\n\t\t\t// console.log(file.path);\n\n\t\t\ttry {\n\t\t\t\tconst buffer = await file.loader.load();\n\t\t\t\t// A file could still be loading when a fatal error occurs\n\t\t\t\t// so check the status of the handler before continuing.\n\t\t\t\tif (handler.is_stopped()) {\n\t\t\t\t\tdone();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for empty files and exit early to prevent unnecessary work.\n\t\t\t\tif (buffer.length === 0) {\n\t\t\t\t\tthrow new LinterError('This is an empty file, further analysis is not possible.');\n\t\t\t\t}\n\n\t\t\t\tif (options.duplicate === true) {\n\t\t\t\t\tconst found = hasher.contains(file.path, buffer);\n\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\tlogger.warn('This file is a duplicate of: ' + found);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst identifier = await this.get_identifier(file, buffer, logger, options);\n\n\t\t\t\tconst info = await this.get_info(identifier, buffer);\n\n\t\t\t\t// We could still be parsing a file when a fatal error\n\t\t\t\t// occurs so check the status of the handler before continuing.\n\t\t\t\tif (handler.is_stopped()) {\n\t\t\t\t\tdone();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!info.truncated) {\n\t\t\t\t\tconst color_space = info.pixel_format.color_space;\n\t\t\t\t\tconst min_bpp = options.bytes_per_pixel;\n\t\t\t\t\tconst min_savings = options.byte_savings;\n\t\t\t\t\tconst size_difference = info.size - this.calculate_optimial_size(info.dimensions, min_bpp);\n\n\t\t\t\t\tlogger.info(this.describe_file(info.dimensions));\n\n\t\t\t\t\tif (info.bytes_per_pixel >= min_bpp && (size_difference > min_savings)) {\n\t\t\t\t\t\tlogger.warn('The bytes per pixel (' + info.bytes_per_pixel.toFixed(2) + ') exceeds the minimum (' + min_bpp + ').');\n\t\t\t\t\t\tlogger.info('You can acheive a minimum savings of ' + size_difference + ' bytes by meeting this threshold.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowed_color_spaces) {\n\t\t\t\t\t\tif (color_space.name === 'UNK') {\n\t\t\t\t\t\t\tconst channels = color_space.channels > 0 ? color_space.channels : 'an unknown number of';\n\n\t\t\t\t\t\t\tlogger.error(`This image has an unknown color space ${ color_space.getUnkFormat() } with ${ channels } channels.`);\n\t\t\t\t\t\t} else if (allowed_color_spaces.size && !allowed_color_spaces.has(color_space)) {\n\t\t\t\t\t\t\t// console.log('Color Space', color_space);\n\t\t\t\t\t\t\tlogger.warn(`The color space of this image is ${ color_space.name }. It must be one of ${ options.color_space }.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst linter = identifier.get_linter(buffer);\n\n\t\t\t\t\t// Handle specialized linting logic for this type of file\n\t\t\t\t\tif (linter) {\n\t\t\t\t\t\t// console.log(file.path);\n\t\t\t\t\t\tlinter.lint(logger);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error('This image is truncated, further analysis is not possible.');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof LinterError) {\n\t\t\t\t\t// A there was a problem with the file that prevents linting\n\t\t\t\t\t// from continuing.\n\t\t\t\t\tlogger.error(err.message);\n\t\t\t\t} else if (err.stack) {\n\t\t\t\t\tlogger.error(err.message + ': ' + err.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(err);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (options.max_warnings >= 0 && ROOT_LOGGER.get_warning_count() > options.max_warnings) {\n\t\t\t\t\tif (!handler.is_stopped()) {\n\t\t\t\t\t\tlogger.error(`Too many warnings. A maximum of ${options.max_warnings} warnings are allowed.`);\n\t\t\t\t\t\thandler.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.emit('file.completed', logger);\n\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\n\t\thandler.on('end', () => {\n\t\t\tthis.emit('linter.completed');\n\t\t});\n\n\t\thandler.start(this.finder.get_files(folder));\n\n\t\treturn this;\n\t}\n}\n","const MINIMUM_BYTES_PER_PIXEL = 3;\nconst MINIMUM_BYTE_SAVINGS = 500;\nconst DEFAULT_COLOR_SPACES = 'G,RGB';\n\nexport const defaults = {\n\t'bytes_per_pixel': MINIMUM_BYTES_PER_PIXEL,\n\t'byte_savings': MINIMUM_BYTE_SAVINGS,\n\t'color_space': DEFAULT_COLOR_SPACES,\n\t'mismatch': true,\n\t'duplicate': true,\n\t'max_warnings': -1,\n};\n","'use strict';\n/* @flow */\n\n\n/*::\nimport type Loader from './loader';\n\nexport interface FileDescriptor {\n\tpath: string;\n\textension: string;\n\tloader: Loader;\n}\n */\n\n/**\n * A base class for finding files in different mediums.\n */\nexport class Finder {\n\t/*::\n\textensions: string[];\n\tmimes: string[];\n\t */\n\n\t/**\n\t * Construct a new Finder\n\t * @param  {string[]} extensions The list of extensions to look for.\n\t * @param  {string[]} mimes      The list of MIME types to look for.\n\t */\n\tconstructor(extensions/*: string[] */, mimes/*: string[]*/) {\n\t\tthis.extensions = extensions;\n\t\tthis.mimes = mimes;\n\t}\n\n\t/**\n\t * Get an iterator of unresolved file descriptors.\n\t *\n\t * @abstract\n\t * @param {Promise<Iterable<FileDescriptor>>} initial_items The initial set of items to be searched for.\n\t */\n\tget_files(initial_items/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\tthrow new Error('Not Implemented');\n\t}\n\n\t/**\n\t * Determine if the provided extension is an image extension (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  ext The extension to check.\n\t * @return {boolean}    True if it is an image extension, false otherwise.\n\t */\n\tis_image_extension(ext/*: string */)/*: boolean */ {\n\t\treturn this.extensions.indexOf(ext) >= 0;\n\t}\n\n\t/**\n\t * Determine if the provided MIME type is an image MIME type (provided in\n\t * the constructor).\n\t *\n\t * @param {string}  mime The MIME type to check.\n\t * @return {boolean}     True if it is an image MIME type, false otherwise.\n\t */\n\tis_image_mime(mime/*: string */)/*: boolean */ {\n\t\treturn this.mimes.indexOf(mime) >= 0;\n\t}\n}\n","/* @flow */\n\n/**\n * A base class for loader instances.\n */\nexport class Loader {\n\t/*::\n\t_path: string;\n\t*/\n\n\t/**\n\t * Construct a new loader instance.\n\t *\n\t * @param  {string} path The path to use for loading files.\n\t */\n\tconstructor(path/*: string */) {\n\t\tthis._path = path;\n\t}\n\n\t/**\n\t * The path.\n\t * @return {string} The path.\n\t */\n\tgetPath()/*: string */ {\n\t\treturn this._path;\n\t}\n\n\t/**\n\t * Load the file at the provided path.\n\t *\n\t * @return {Promise<Buffer>}  An image file.\n\t */\n\tload()/*: Promise<Buffer> */ {\n\t\treturn Promise.reject(new Error('Not Implemented!'));\n\t}\n}\n","/* @flow */\nimport {Loader} from '../loader.js';\n\n/**\n * Load files from a web browser Blob object.\n */\nexport class BlobLoader extends Loader {\n\t/*::\n\t_blob: Blob\n\t*/\n\n\t/**\n\t * Construct a new BlobLoader.\n\t *\n\t * @param  {Blob} blob  A web browser Blob object\n\t */\n\tconstructor(blob/*: Blob */) {\n\t\tsuper('');\n\n\t\tthis._blob = blob;\n\t}\n\n\t/**\n\t * Load the file.\n\t * @return {Promise<Buffer>}  The loaded file.\n\t */\n\tasync load()/*: Promise<Buffer> */ {\n\t\tconst arrbuf = await this._blob.arrayBuffer();\n\n\t\treturn Buffer.from(arrbuf);\n\t}\n}\n","import { render } from \"./page-try-it.vue?vue&type=template&id=7e4eb897\"\nimport script from \"./page-try-it.vue?vue&type=script&lang=js\"\nexport * from \"./page-try-it.vue?vue&type=script&lang=js\"\n\nimport \"./page-try-it.vue?vue&type=style&index=0&id=7e4eb897&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\n<script></script>\n\n<template>\n\t<div class=\"docs-page\">\n\t<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#docs\">Docs</a></li></ol></nav><h1 id=\"docs\">Docs</h1>\n<p>This is the docs for image-lint.</p>\n\t</div>\n</template>\n\n<style>\n@import \"../css/docs.css\";\n</style>\n","import { render } from \"./docs.md?vue&type=template&id=4167156a\"\nconst script = {}\n\nimport \"./docs.md?vue&type=style&index=0&id=4167156a&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\n<script></script>\n\n<template>\n\t<div class=\"docs-page\">\n\t<nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#getting-started\">Getting Started</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#prerequisites\">Prerequisites</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#running-image-lint\">Running image-lint</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#installing-image-lint-globally\">Installing image-lint globally</a></li></ol></li></ol></nav><h1 id=\"getting-started\">Getting Started</h1>\n<p>image-lint is an application for finding issues with images. Its main focus is\nhelping to reduce bandwidth utilization and detecting broken images in\nweb applications.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To use image-lint you must first install <a href=\"https://nodejs.org/\">Node.js</a> >=16.0.0.</p>\n<h2 id=\"running-image-lint\">Running image-lint</h2>\n<p>You can run image-lint without installing it using <code>npx</code>.</p>\n<pre style=\"background: #2e3440\"><code class=\"language-sh\"><span style=\"color: #D8DEE9FF\">npx image-lint images/</span>\n</code></pre>\n<h2 id=\"installing-image-lint-globally\">Installing image-lint globally</h2>\n<p>If you use image-lint a lot, it can be install using npm.</p>\n<pre style=\"background: #2e3440\"><code class=\"language-sh\"><span style=\"color: #D8DEE9FF\">npm install -g image-lint</span>\n</code></pre>\n<p>And then you can run it against your images directory:</p>\n<pre style=\"background: #2e3440\"><code class=\"language-sh\"><span style=\"color: #D8DEE9FF\">image-lint images/</span>\n</code></pre>\n\t</div>\n</template>\n\n<style>\n@import \"../css/docs.css\";\n</style>\n","import { render } from \"./getting-started.md?vue&type=template&id=9abdcf92\"\nconst script = {}\n\nimport \"./getting-started.md?vue&type=style&index=0&id=9abdcf92&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport {Linter, BufferArrayFinder, ImageIdentifierRegistry} from 'image-lint';\n\nconst finder = new BufferArrayFinder(\n\tImageIdentifierRegistry.get_all_extensions(),\n\tImageIdentifierRegistry.get_all_mimes(),\n);\n\nexport default {\n\t'props': {\n\t\t'options': {\n\t\t\t'type': Object,\n\t\t\t'required': true,\n\t\t},\n\t\t'files': {\n\t\t\t'type': Array,\n\t\t\t'required': true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tlinter: null,\n\t\t\terror: null,\n\t\t\tresults: null,\n\t\t};\n\t},\n\t'computed': {\n\t\thas_finished() {\n\t\t\treturn this.results !== null || this.error !== null;\n\t\t},\n\t\thas_error() {\n\t\t\treturn this.error !== null;\n\t\t},\n\t\thas_results() {\n\t\t\treturn this.results !== null;\n\t\t},\n\t},\n\t'watch': {\n\t\tfiles: {\n\t\t\tasync handler(files, files_old) {\n\t\t\t\tconst options = this.options;\n\t\t\t\tconst linter = new Linter(finder);\n\t\t\t\tlet results = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tresults = await (new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst result_list = [];\n\n\t\t\t\t\t\tlinter.lint(files, options)\n\t\t\t\t\t\t\t.on('file.completed', (logger) => {\n\t\t\t\t\t\t\t\tresult_list.push(logger);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.on('linter.completed', () => {\n\t\t\t\t\t\t\t\tresolve(result_list);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.error = e;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.results = results;\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\t'methods': {\n\t\treformat_log(log) {\n\t\t\tconst log_parts = log.trim().split('\\n');\n\n\t\t\treturn log_parts.map((line) => {\n\t\t\t\treturn line.trim();\n\t\t\t}).join('\\n');\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<ul class=\"lint-results\">\n\t\t<li\n\t\t\tv-for=\"result in results\"\n\t\t\t:key=\"result.filename\"\n\t\t\tclass=\"lint-result\"\n\t\t\t:class=\"{ 'has-error': has_error, 'has-results': has_results }\"\n\t\t>\n\t\t\t<details open>\n\t\t\t\t<summary\n\t\t\t\t\tclass=\"lint-result-summary\"\n\t\t\t\t\t:class=\"{ 'lint-error': result && result.count.error, 'lint-warn': result && result.count.warn }\"\n\t\t\t\t>\n\t\t\t\t\t{{ result.filename }}\n\t\t\t\t\t<span v-if=\"has_results\"> -\n\t\t\t\t\t\t<span v-if=\"result.count.info\">\n\t\t\t\t\t\t\tInfo: {{ result.count.info }}<span v-if=\"result.count.warn || result.count.error\">, </span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if=\"result.count.warn\">\n\t\t\t\t\t\t\tWarnings: {{ result.count.warn }}<span v-if=\"result.count.error\">, </span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if=\"result.count.error\">Errors: {{ result.count.error }}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</summary>\n\t\t\t\t<!-- eslint-disable vue/no-v-html -->\n\t\t\t\t<output\n\t\t\t\t\tv-if=\"has_results\"\n\t\t\t\t\tclass=\"lint-result-output\"\n\t\t\t\t\tv-html=\"reformat_log(result.log)\"\n\t\t\t\t/>\n\t\t\t\t<!-- eslint-enable -->\n\t\t\t</details>\n\t\t</li>\n\t</ul>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.lint-results {\n\tlist-style: none;\n\tpadding: 0;\n}\n\n.lint-result {\n\tmargin: 15px 0px;\n\tbackground: var(--color-layer-bg);\n\tpadding-bottom: 1px; /* Prevent margin-collapse */\n\tborder-radius: 8px;\n\toverflow: hidden;\n}\n\n.lint-result .lint-result-summary {\n\tbackground: var(--color-status-unknown);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result.has-results .lint-result-summary {\n\tbackground: var(--color-status-good);\n\tpadding: 10px 10px 10px 18px;\n}\n\n.lint-result .lint-result-summary.lint-warn {\n\tbackground: var(--color-status-warn);\n}\n\n.lint-result .lint-result-summary.lint-error {\n\tbackground: var(--color-status-failure);\n}\n\n.lint-result.has-error .lint-result-summary {\n\tbackground: var(--color-status-error);\n}\n\n.lint-result.has-error .upload-progress,\n.lint-result.has-results .upload-progress {\n\tdisplay: none;\n}\n\n.lint-result-output {\n\tfont-family: monospace;\n\twhite-space: pre-wrap;\n\tmargin: 10px 10px 10px 18px;\n\tdisplay: block;\n}\n</style>\n","/* @flow */\n\nimport {Finder} from '../finder.js';\nimport {BlobLoader} from '../loader/blob.js';\nimport path from 'path';\n\n/*::\nimport type { FileDescriptor } from '../finder';\n */\n\n/**\n * Finds files in a Browser Blob object.\n */\nexport class BufferArrayFinder extends Finder {\n\t/*::\n\tfilename: string;\n\tpath: string;\n\tbuffer: Buffer;\n\t*/\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget_files(initial_files/*: string[] */)/*: Promise<Iterable<FileDescriptor>> */ {\n\t\treturn Promise.resolve(this._search.bind(this, initial_files));\n\t}\n\n\t/**\n\t * Traverse the file system yielding any files it finds.\n\t *\n\t * @param {Blob[]} files  The initial queue items.\n\t */\n\t* _search(files/*: Blob[] */)/*: Generator<FileDescriptor, *, *> */ {\n\t\tfor (const file of files) {\n\t\t\tconst extension = path.extname(file.name);\n\n\t\t\tyield {\n\t\t\t\t'path': file.name,\n\t\t\t\t'extension': extension,\n\t\t\t\t'loader': new BlobLoader(file),\n\t\t\t};\n\t\t}\n\t}\n}\n","import { render } from \"./iml-image-collection.vue?vue&type=template&id=7c1d8c2f\"\nimport script from \"./iml-image-collection.vue?vue&type=script&lang=js\"\nexport * from \"./iml-image-collection.vue?vue&type=script&lang=js\"\n\nimport \"./iml-image-collection.vue?vue&type=style&index=0&id=7c1d8c2f&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nexport default {\n\t'props': {\n\t\t'modelValue': {\n\t\t\ttype: Array,\n\t\t\trequired: true,\n\t\t},\n\t},\n\t'emits': ['update:modelValue'],\n\t'methods': {\n\t\t'files': function* (dt) {\n\t\t\tif (dt.items) {\n\t\t\t\tfor (const i of dt.items) {\n\t\t\t\t\tyield i.getAsFile();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield* dt.files;\n\t\t\t}\n\t\t},\n\t\t'drop': function(e) {\n\t\t\te.preventDefault();\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\n\t\t\tconst files = Array.from(this.files(e.dataTransfer));\n\n\t\t\tthis.$emit('update:modelValue', files);\n\t\t},\n\t\t'dragenter': function() {\n\t\t\tthis.$refs.dropzone.classList.add('active');\n\t\t},\n\t\t'dragleave': function() {\n\t\t\tthis.$refs.dropzone.classList.remove('active');\n\t\t},\n\t\t'dragover': function(e) {\n\t\t\te.preventDefault();\n\t\t},\n\t},\n};\n</script>\n\n<template>\n\t<div\n\t\tref=\"dropzone\"\n\t\tclass=\"drop-target\"\n\t\t@drop=\"drop\"\n\t\t@dragover=\"dragover\"\n\t\t@dragenter=\"dragenter\"\n\t\t@dragleave=\"dragleave\"\n\t>\n\t\t<slot>Drop files here</slot>\n\t</div>\n</template>\n\n<style>\n@import \"../css/variables.css\";\n\n.drop-target {\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n}\n\n.drop-target.empty {\n\talign-items: center;\n}\n\n.drop-target.active {\n\tborder: 2px dashed var(--color-status-good);\n}\n</style>\n","import { render } from \"./iml-dropzone.vue?vue&type=template&id=1ea58bc0\"\nimport script from \"./iml-dropzone.vue?vue&type=script&lang=js\"\nexport * from \"./iml-dropzone.vue?vue&type=script&lang=js\"\n\nimport \"./iml-dropzone.vue?vue&type=style&index=0&id=1ea58bc0&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {createApp} from 'vue';\nimport Multiselect from 'vue-multiselect';\nimport {createRouter, createWebHistory} from 'vue-router';\n\nimport App from '../components/app.vue';\nimport PageTryIt from '../components/page-try-it.vue';\nimport PageDocs from '../md/docs.md';\nimport PageGettingStarted from '../md/getting-started.md';\nimport ImlImageCollection from '../components/iml-image-collection.vue';\nimport ImlDropzone from '../components/iml-dropzone.vue';\n\nimport '../css/index.css';\n\n\nconst body = document.body;\nconst rootEl = document.createElement('div');\n\nbody.appendChild(rootEl);\n\nconst router = createRouter({\n\thistory: createWebHistory(process.env.BASE_PATH),\n\troutes: [\n\t\t{\n\t\t\tpath: '/',\n\t\t\tcomponent: PageTryIt,\n\t\t}, {\n\t\t\tpath: '/docs',\n\t\t\tcomponent: PageDocs,\n\t\t}, {\n\t\t\tpath: '/getting-started',\n\t\t\tcomponent: PageGettingStarted,\n\t\t},\n\t],\n});\n\ncreateApp(App)\n\t.component('vue-multiselect', Multiselect)\n\t.component('iml-image-collection', ImlImageCollection)\n\t.component('iml-dropzone', ImlDropzone)\n\t.use(router)\n\t.mount(rootEl);\n\n// console.log(md);\n"],"names":["class","GithubButton","data","name","version","to","href","WorkHandler","EventEmitter","constructor","super","this","_active_handlers","_active_processes","_done_proxy","_done","bind","_iterator","_stopped","on","_handler_available","next","done","emit","value","Error","is_stopped","start","promise","then","iterator","e","stack","console","error","message","catch","stop","Hasher","trie","Map","find","digest","current","depth","previous","byte","get","set","contains","path","buffer","hash","update","hashes","found_name","ColorSpace","channels","unk_format","all_names","add","getUnkFormat","from","id","space","has","unkownFormat","format","color_space","Set","G","RGB","YCbCr","YCCK","LAB","HSV","CMYK","XYZ","XYB","PixelFormat","indexed","alpha","bit_depth","Log","filename","parent","log","_muted","count","_increment_count","type","is_printable","warn","mute","info","get_error_count","get_warning_count","get_logger","toString","warn_count","error_count","ROOT_LOGGER","ImageIdentifier","_info_provider","identify_only","get_info_provider","is_of_file_type","get_extension","get_extensions","get_mime","get_mimes","can_validate","debug_print","write_stream","write","get_linter","MagicNumberIdentifier","get_magic","magic","buffer_magic","slice","length","Buffer","compare","InfoProvider","calculate_bpp","dims","size","get_overhead","width","height","frames","get_dimensions","get_pixel_format","get_info","is_truncated","truncated","dimensions","pixel_format","bytes_per_pixel","CHUNK_TYPE_IEND","PNGChunk","offset","readUInt32BE","header","crc32","verify","alloc","check","writeUInt32BE","crc","get_total_length","SECTION_LENGTH_WIDTH","describe","get_chunks","current_offset","is_end","chunks","chunk","push","GRAYSCALE_TYPES","RGB_TYPES","ALPHA_TYPES","INDEXED_TYPES","PNGInfoProvider","end_chunk","IHDR_OFFSET","WIDTH_OFFSET","readInt8","HEIGHT_OFFSET","color_type","BIT_DEPTH_OFFSET","R","B","ImageLinter","lint","logger","PNGImageLinter","last_chunk","GIFInfoProvider","next_chunk","block_length","readUInt8","get_sub_block_length","sub_block_length","size_byte","get_color_table_length","color_table_bits","Math","pow","has_color_table","get_version","frame_count","found","SETTINGS_OFFSET","block_header","readUInt16LE","CHUNK_NAMES","i","EOI_MARKER","JPEGChunk","is_eoi_chunk","is_sof_chunk","result","marker_code","readUInt16BE","StandaloneJPEGChunk","EntropyCodedSegment","from_buffer","SOSChunk","DataJPEGChunk","MarkerSegment","sof_byte","number_of_components","scan_header_length","end_of_ecs","ecs_start","max","segment_start","indexOf","JPGInfoProvider","JPEGImageLinter","last_chunk_length","Bitstream","sub_bit","current_byte","read_from_byte","bits","mask","read_bits","WORD_SIZE","leftovers","shift","start_bits","bytes","floor","read","read_boolean","get_bits_read","U32_MAX","IllformedStreamError","BitStream","read_u32","distributions","dist","read_s32","v","read_f16","bits16","sign","biased_exp","mantissa","biased_exp32","mantissa32","ArrayBuffer","Uint32Array","Float32Array","read_customxy","x","y","read_enum","enum_table","SizeHeader","stream","ysize","xsize","small","ratio","get_small","get_ysize","get_xsize","get_ratio","ENUM_COLOR_SPACE","ENUM_WHITE_POINT","ENUM_PRIMARIES","ENUM_TRANSFER_FUNCTION","ENUM_RENDERING_INTENT","ColorEncoding","received_icc","opaque_icc","white_point","primaries","have_gamma","gamma","transfer_function","rendering_intent","all_default","white","red","green","blue","ImageMetadata","have_icc","bits_per_sample","color_encoding","alpha_bits","target_nits","m2","JXLInfoProvider","bit_stream","size_header","ISOBMFFAtom","tag","indent","block","content","subarray","BLOCK_TYPES","UnknownAtom","NullAtom","ISOBMFFBlock","_buffer","_offset","_children","children","readBlocks","bytesProcessed","blocksTillMax","desc","children_desc","child","Object","values","RootBlock","majorBrand","readBrand","minorVersion","compatibleBrands","numberOfCompatBrands","unknown","bitsPerChannel","UNKNOWN_BITS","AVIFInfoProvider","ispeAtom","meta","iprp","ipco","ispe","root","pixi","RIFFIdentifier","get_type_tag","riff_magic","type_magic","CHUNK_ID_LENGTH","read_chunks","chunk_types","chunk_id","RIFFChunk","SimpleChunk","BaseChunk","readUInt32LE","padding_byte","subchunk_id","subchunks","map","join","VERSIONS","readUint24LE","low_byte","middle_byte","VP8_CHUNK_TYPES","bitstream","frame_type","show_frame","data_partition_size","is_valid","horz_scale","vert_scale","VP8X_FLAGS_LENGTH","WEBPInfoProvider","dimensions_chunk","XMLIdentifier","get_root_element","toLowerCase","includes","ImageIdentifierRegistry","register","Constructor","provider","is_identify_only","extension","_extension_registry","_all_extensions","mime","_mime_registry","_all_mimes","_all_providers","clear_registry","clear","get_all_extensions","get_all_mimes","from_extension","from_file_descriptor","file","all_providers","ftyp","FTYP_START","first_magic","LinterError","Linter","finder","disable_color","calculate_optimial_size","bpp","describe_file","get_identifier","options","Promise","resolve","reject","identifier","file_buffer","mismatch","candidate","found_extension","ProviderClass","image_info","folder","handler","hasher","allowed_color_spaces","spaces","async","loader","load","duplicate","min_bpp","min_savings","byte_savings","size_difference","toFixed","linter","err","max_warnings","get_files","defaults","Finder","extensions","mimes","initial_items","is_image_extension","ext","is_image_mime","Loader","_path","getPath","BlobLoader","blob","_blob","arrbuf","arrayBuffer","assign","split","files","option","step","min","multiple","available","script","open","initial_files","_search","Array","results","has_finished","has_error","has_results","files_old","result_list","immediate","reformat_log","trim","line","key","required","dt","items","getAsFile","preventDefault","$refs","dropzone","classList","remove","dataTransfer","$emit","ref","drop","dragover","dragenter","dragleave","body","document","rootEl","createElement","appendChild","router","history","routes","component","use","mount"],"sourceRoot":""}